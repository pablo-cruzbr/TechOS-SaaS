
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Setor
 * 
 */
export type Setor = $Result.DefaultSelection<Prisma.$SetorPayload>
/**
 * Model InstituicaoUnidade
 * 
 */
export type InstituicaoUnidade = $Result.DefaultSelection<Prisma.$InstituicaoUnidadePayload>
/**
 * Model statusOrdemdeServico
 * 
 */
export type statusOrdemdeServico = $Result.DefaultSelection<Prisma.$statusOrdemdeServicoPayload>
/**
 * Model TipodeSolicitacao
 * 
 */
export type TipodeSolicitacao = $Result.DefaultSelection<Prisma.$TipodeSolicitacaoPayload>
/**
 * Model Tecnico
 * 
 */
export type Tecnico = $Result.DefaultSelection<Prisma.$TecnicoPayload>
/**
 * Model OrdemdeServico
 * 
 */
export type OrdemdeServico = $Result.DefaultSelection<Prisma.$OrdemdeServicoPayload>
/**
 * Model FormTecnico
 * 
 */
export type FormTecnico = $Result.DefaultSelection<Prisma.$FormTecnicoPayload>
/**
 * Model Equipamento
 * 
 */
export type Equipamento = $Result.DefaultSelection<Prisma.$EquipamentoPayload>
/**
 * Model controleDeAssistenciaTecnica
 * 
 */
export type controleDeAssistenciaTecnica = $Result.DefaultSelection<Prisma.$controleDeAssistenciaTecnicaPayload>
/**
 * Model statusReparo
 * 
 */
export type statusReparo = $Result.DefaultSelection<Prisma.$statusReparoPayload>
/**
 * Model StatusTeste
 * 
 */
export type StatusTeste = $Result.DefaultSelection<Prisma.$StatusTestePayload>
/**
 * Model controleDeLaudoTecnico
 * 
 */
export type controleDeLaudoTecnico = $Result.DefaultSelection<Prisma.$controleDeLaudoTecnicoPayload>
/**
 * Model controleDeLaboratio
 * 
 */
export type controleDeLaboratio = $Result.DefaultSelection<Prisma.$controleDeLaboratioPayload>
/**
 * Model statusControledeLaboratorio
 * 
 */
export type statusControledeLaboratorio = $Result.DefaultSelection<Prisma.$statusControledeLaboratorioPayload>
/**
 * Model controleDeMaquinasPendentesLaboratorio
 * 
 */
export type controleDeMaquinasPendentesLaboratorio = $Result.DefaultSelection<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>
/**
 * Model statusMaquinasPendentesLab
 * 
 */
export type statusMaquinasPendentesLab = $Result.DefaultSelection<Prisma.$statusMaquinasPendentesLabPayload>
/**
 * Model controledeMaquinasPendentesOro
 * 
 */
export type controledeMaquinasPendentesOro = $Result.DefaultSelection<Prisma.$controledeMaquinasPendentesOroPayload>
/**
 * Model statusMaquinasPendentesOro
 * 
 */
export type statusMaquinasPendentesOro = $Result.DefaultSelection<Prisma.$statusMaquinasPendentesOroPayload>
/**
 * Model documentacaoTecnica
 * 
 */
export type documentacaoTecnica = $Result.DefaultSelection<Prisma.$documentacaoTecnicaPayload>
/**
 * Model solicitacaoDeCompras
 * 
 */
export type solicitacaoDeCompras = $Result.DefaultSelection<Prisma.$solicitacaoDeComprasPayload>
/**
 * Model statusCompras
 * 
 */
export type statusCompras = $Result.DefaultSelection<Prisma.$statusComprasPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.setor`: Exposes CRUD operations for the **Setor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Setors
    * const setors = await prisma.setor.findMany()
    * ```
    */
  get setor(): Prisma.SetorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.instituicaoUnidade`: Exposes CRUD operations for the **InstituicaoUnidade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InstituicaoUnidades
    * const instituicaoUnidades = await prisma.instituicaoUnidade.findMany()
    * ```
    */
  get instituicaoUnidade(): Prisma.InstituicaoUnidadeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusOrdemdeServico`: Exposes CRUD operations for the **statusOrdemdeServico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusOrdemdeServicos
    * const statusOrdemdeServicos = await prisma.statusOrdemdeServico.findMany()
    * ```
    */
  get statusOrdemdeServico(): Prisma.statusOrdemdeServicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tipodeSolicitacao`: Exposes CRUD operations for the **TipodeSolicitacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipodeSolicitacaos
    * const tipodeSolicitacaos = await prisma.tipodeSolicitacao.findMany()
    * ```
    */
  get tipodeSolicitacao(): Prisma.TipodeSolicitacaoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tecnico`: Exposes CRUD operations for the **Tecnico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tecnicos
    * const tecnicos = await prisma.tecnico.findMany()
    * ```
    */
  get tecnico(): Prisma.TecnicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ordemdeServico`: Exposes CRUD operations for the **OrdemdeServico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrdemdeServicos
    * const ordemdeServicos = await prisma.ordemdeServico.findMany()
    * ```
    */
  get ordemdeServico(): Prisma.OrdemdeServicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.formTecnico`: Exposes CRUD operations for the **FormTecnico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FormTecnicos
    * const formTecnicos = await prisma.formTecnico.findMany()
    * ```
    */
  get formTecnico(): Prisma.FormTecnicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equipamento`: Exposes CRUD operations for the **Equipamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipamentos
    * const equipamentos = await prisma.equipamento.findMany()
    * ```
    */
  get equipamento(): Prisma.EquipamentoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.controleDeAssistenciaTecnica`: Exposes CRUD operations for the **controleDeAssistenciaTecnica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ControleDeAssistenciaTecnicas
    * const controleDeAssistenciaTecnicas = await prisma.controleDeAssistenciaTecnica.findMany()
    * ```
    */
  get controleDeAssistenciaTecnica(): Prisma.controleDeAssistenciaTecnicaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusReparo`: Exposes CRUD operations for the **statusReparo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusReparos
    * const statusReparos = await prisma.statusReparo.findMany()
    * ```
    */
  get statusReparo(): Prisma.statusReparoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusTeste`: Exposes CRUD operations for the **StatusTeste** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusTestes
    * const statusTestes = await prisma.statusTeste.findMany()
    * ```
    */
  get statusTeste(): Prisma.StatusTesteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.controleDeLaudoTecnico`: Exposes CRUD operations for the **controleDeLaudoTecnico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ControleDeLaudoTecnicos
    * const controleDeLaudoTecnicos = await prisma.controleDeLaudoTecnico.findMany()
    * ```
    */
  get controleDeLaudoTecnico(): Prisma.controleDeLaudoTecnicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.controleDeLaboratio`: Exposes CRUD operations for the **controleDeLaboratio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ControleDeLaboratios
    * const controleDeLaboratios = await prisma.controleDeLaboratio.findMany()
    * ```
    */
  get controleDeLaboratio(): Prisma.controleDeLaboratioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusControledeLaboratorio`: Exposes CRUD operations for the **statusControledeLaboratorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusControledeLaboratorios
    * const statusControledeLaboratorios = await prisma.statusControledeLaboratorio.findMany()
    * ```
    */
  get statusControledeLaboratorio(): Prisma.statusControledeLaboratorioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.controleDeMaquinasPendentesLaboratorio`: Exposes CRUD operations for the **controleDeMaquinasPendentesLaboratorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ControleDeMaquinasPendentesLaboratorios
    * const controleDeMaquinasPendentesLaboratorios = await prisma.controleDeMaquinasPendentesLaboratorio.findMany()
    * ```
    */
  get controleDeMaquinasPendentesLaboratorio(): Prisma.controleDeMaquinasPendentesLaboratorioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusMaquinasPendentesLab`: Exposes CRUD operations for the **statusMaquinasPendentesLab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusMaquinasPendentesLabs
    * const statusMaquinasPendentesLabs = await prisma.statusMaquinasPendentesLab.findMany()
    * ```
    */
  get statusMaquinasPendentesLab(): Prisma.statusMaquinasPendentesLabDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.controledeMaquinasPendentesOro`: Exposes CRUD operations for the **controledeMaquinasPendentesOro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ControledeMaquinasPendentesOros
    * const controledeMaquinasPendentesOros = await prisma.controledeMaquinasPendentesOro.findMany()
    * ```
    */
  get controledeMaquinasPendentesOro(): Prisma.controledeMaquinasPendentesOroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusMaquinasPendentesOro`: Exposes CRUD operations for the **statusMaquinasPendentesOro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusMaquinasPendentesOros
    * const statusMaquinasPendentesOros = await prisma.statusMaquinasPendentesOro.findMany()
    * ```
    */
  get statusMaquinasPendentesOro(): Prisma.statusMaquinasPendentesOroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentacaoTecnica`: Exposes CRUD operations for the **documentacaoTecnica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentacaoTecnicas
    * const documentacaoTecnicas = await prisma.documentacaoTecnica.findMany()
    * ```
    */
  get documentacaoTecnica(): Prisma.documentacaoTecnicaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.solicitacaoDeCompras`: Exposes CRUD operations for the **solicitacaoDeCompras** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SolicitacaoDeCompras
    * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.findMany()
    * ```
    */
  get solicitacaoDeCompras(): Prisma.solicitacaoDeComprasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusCompras`: Exposes CRUD operations for the **statusCompras** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusCompras
    * const statusCompras = await prisma.statusCompras.findMany()
    * ```
    */
  get statusCompras(): Prisma.statusComprasDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Cliente: 'Cliente',
    Setor: 'Setor',
    InstituicaoUnidade: 'InstituicaoUnidade',
    statusOrdemdeServico: 'statusOrdemdeServico',
    TipodeSolicitacao: 'TipodeSolicitacao',
    Tecnico: 'Tecnico',
    OrdemdeServico: 'OrdemdeServico',
    FormTecnico: 'FormTecnico',
    Equipamento: 'Equipamento',
    controleDeAssistenciaTecnica: 'controleDeAssistenciaTecnica',
    statusReparo: 'statusReparo',
    StatusTeste: 'StatusTeste',
    controleDeLaudoTecnico: 'controleDeLaudoTecnico',
    controleDeLaboratio: 'controleDeLaboratio',
    statusControledeLaboratorio: 'statusControledeLaboratorio',
    controleDeMaquinasPendentesLaboratorio: 'controleDeMaquinasPendentesLaboratorio',
    statusMaquinasPendentesLab: 'statusMaquinasPendentesLab',
    controledeMaquinasPendentesOro: 'controledeMaquinasPendentesOro',
    statusMaquinasPendentesOro: 'statusMaquinasPendentesOro',
    documentacaoTecnica: 'documentacaoTecnica',
    solicitacaoDeCompras: 'solicitacaoDeCompras',
    statusCompras: 'statusCompras'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "cliente" | "setor" | "instituicaoUnidade" | "statusOrdemdeServico" | "tipodeSolicitacao" | "tecnico" | "ordemdeServico" | "formTecnico" | "equipamento" | "controleDeAssistenciaTecnica" | "statusReparo" | "statusTeste" | "controleDeLaudoTecnico" | "controleDeLaboratio" | "statusControledeLaboratorio" | "controleDeMaquinasPendentesLaboratorio" | "statusMaquinasPendentesLab" | "controledeMaquinasPendentesOro" | "statusMaquinasPendentesOro" | "documentacaoTecnica" | "solicitacaoDeCompras" | "statusCompras"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClienteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Setor: {
        payload: Prisma.$SetorPayload<ExtArgs>
        fields: Prisma.SetorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SetorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SetorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          findFirst: {
            args: Prisma.SetorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SetorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          findMany: {
            args: Prisma.SetorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>[]
          }
          create: {
            args: Prisma.SetorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          createMany: {
            args: Prisma.SetorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SetorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>[]
          }
          delete: {
            args: Prisma.SetorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          update: {
            args: Prisma.SetorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          deleteMany: {
            args: Prisma.SetorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SetorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SetorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>[]
          }
          upsert: {
            args: Prisma.SetorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetorPayload>
          }
          aggregate: {
            args: Prisma.SetorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetor>
          }
          groupBy: {
            args: Prisma.SetorGroupByArgs<ExtArgs>
            result: $Utils.Optional<SetorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SetorCountArgs<ExtArgs>
            result: $Utils.Optional<SetorCountAggregateOutputType> | number
          }
        }
      }
      InstituicaoUnidade: {
        payload: Prisma.$InstituicaoUnidadePayload<ExtArgs>
        fields: Prisma.InstituicaoUnidadeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstituicaoUnidadeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstituicaoUnidadeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload>
          }
          findFirst: {
            args: Prisma.InstituicaoUnidadeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstituicaoUnidadeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload>
          }
          findMany: {
            args: Prisma.InstituicaoUnidadeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload>[]
          }
          create: {
            args: Prisma.InstituicaoUnidadeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload>
          }
          createMany: {
            args: Prisma.InstituicaoUnidadeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstituicaoUnidadeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload>[]
          }
          delete: {
            args: Prisma.InstituicaoUnidadeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload>
          }
          update: {
            args: Prisma.InstituicaoUnidadeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload>
          }
          deleteMany: {
            args: Prisma.InstituicaoUnidadeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstituicaoUnidadeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InstituicaoUnidadeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload>[]
          }
          upsert: {
            args: Prisma.InstituicaoUnidadeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoUnidadePayload>
          }
          aggregate: {
            args: Prisma.InstituicaoUnidadeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstituicaoUnidade>
          }
          groupBy: {
            args: Prisma.InstituicaoUnidadeGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstituicaoUnidadeGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstituicaoUnidadeCountArgs<ExtArgs>
            result: $Utils.Optional<InstituicaoUnidadeCountAggregateOutputType> | number
          }
        }
      }
      statusOrdemdeServico: {
        payload: Prisma.$statusOrdemdeServicoPayload<ExtArgs>
        fields: Prisma.statusOrdemdeServicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.statusOrdemdeServicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.statusOrdemdeServicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload>
          }
          findFirst: {
            args: Prisma.statusOrdemdeServicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.statusOrdemdeServicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload>
          }
          findMany: {
            args: Prisma.statusOrdemdeServicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload>[]
          }
          create: {
            args: Prisma.statusOrdemdeServicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload>
          }
          createMany: {
            args: Prisma.statusOrdemdeServicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.statusOrdemdeServicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload>[]
          }
          delete: {
            args: Prisma.statusOrdemdeServicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload>
          }
          update: {
            args: Prisma.statusOrdemdeServicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload>
          }
          deleteMany: {
            args: Prisma.statusOrdemdeServicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.statusOrdemdeServicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.statusOrdemdeServicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload>[]
          }
          upsert: {
            args: Prisma.statusOrdemdeServicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusOrdemdeServicoPayload>
          }
          aggregate: {
            args: Prisma.StatusOrdemdeServicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusOrdemdeServico>
          }
          groupBy: {
            args: Prisma.statusOrdemdeServicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusOrdemdeServicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.statusOrdemdeServicoCountArgs<ExtArgs>
            result: $Utils.Optional<StatusOrdemdeServicoCountAggregateOutputType> | number
          }
        }
      }
      TipodeSolicitacao: {
        payload: Prisma.$TipodeSolicitacaoPayload<ExtArgs>
        fields: Prisma.TipodeSolicitacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipodeSolicitacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipodeSolicitacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload>
          }
          findFirst: {
            args: Prisma.TipodeSolicitacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipodeSolicitacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload>
          }
          findMany: {
            args: Prisma.TipodeSolicitacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload>[]
          }
          create: {
            args: Prisma.TipodeSolicitacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload>
          }
          createMany: {
            args: Prisma.TipodeSolicitacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TipodeSolicitacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload>[]
          }
          delete: {
            args: Prisma.TipodeSolicitacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload>
          }
          update: {
            args: Prisma.TipodeSolicitacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload>
          }
          deleteMany: {
            args: Prisma.TipodeSolicitacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TipodeSolicitacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TipodeSolicitacaoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload>[]
          }
          upsert: {
            args: Prisma.TipodeSolicitacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipodeSolicitacaoPayload>
          }
          aggregate: {
            args: Prisma.TipodeSolicitacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTipodeSolicitacao>
          }
          groupBy: {
            args: Prisma.TipodeSolicitacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TipodeSolicitacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipodeSolicitacaoCountArgs<ExtArgs>
            result: $Utils.Optional<TipodeSolicitacaoCountAggregateOutputType> | number
          }
        }
      }
      Tecnico: {
        payload: Prisma.$TecnicoPayload<ExtArgs>
        fields: Prisma.TecnicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TecnicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TecnicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload>
          }
          findFirst: {
            args: Prisma.TecnicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TecnicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload>
          }
          findMany: {
            args: Prisma.TecnicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload>[]
          }
          create: {
            args: Prisma.TecnicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload>
          }
          createMany: {
            args: Prisma.TecnicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TecnicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload>[]
          }
          delete: {
            args: Prisma.TecnicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload>
          }
          update: {
            args: Prisma.TecnicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload>
          }
          deleteMany: {
            args: Prisma.TecnicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TecnicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TecnicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload>[]
          }
          upsert: {
            args: Prisma.TecnicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnicoPayload>
          }
          aggregate: {
            args: Prisma.TecnicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTecnico>
          }
          groupBy: {
            args: Prisma.TecnicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TecnicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TecnicoCountArgs<ExtArgs>
            result: $Utils.Optional<TecnicoCountAggregateOutputType> | number
          }
        }
      }
      OrdemdeServico: {
        payload: Prisma.$OrdemdeServicoPayload<ExtArgs>
        fields: Prisma.OrdemdeServicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrdemdeServicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrdemdeServicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload>
          }
          findFirst: {
            args: Prisma.OrdemdeServicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrdemdeServicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload>
          }
          findMany: {
            args: Prisma.OrdemdeServicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload>[]
          }
          create: {
            args: Prisma.OrdemdeServicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload>
          }
          createMany: {
            args: Prisma.OrdemdeServicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrdemdeServicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload>[]
          }
          delete: {
            args: Prisma.OrdemdeServicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload>
          }
          update: {
            args: Prisma.OrdemdeServicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload>
          }
          deleteMany: {
            args: Prisma.OrdemdeServicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrdemdeServicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrdemdeServicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload>[]
          }
          upsert: {
            args: Prisma.OrdemdeServicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdemdeServicoPayload>
          }
          aggregate: {
            args: Prisma.OrdemdeServicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrdemdeServico>
          }
          groupBy: {
            args: Prisma.OrdemdeServicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrdemdeServicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrdemdeServicoCountArgs<ExtArgs>
            result: $Utils.Optional<OrdemdeServicoCountAggregateOutputType> | number
          }
        }
      }
      FormTecnico: {
        payload: Prisma.$FormTecnicoPayload<ExtArgs>
        fields: Prisma.FormTecnicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormTecnicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormTecnicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload>
          }
          findFirst: {
            args: Prisma.FormTecnicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormTecnicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload>
          }
          findMany: {
            args: Prisma.FormTecnicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload>[]
          }
          create: {
            args: Prisma.FormTecnicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload>
          }
          createMany: {
            args: Prisma.FormTecnicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormTecnicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload>[]
          }
          delete: {
            args: Prisma.FormTecnicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload>
          }
          update: {
            args: Prisma.FormTecnicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload>
          }
          deleteMany: {
            args: Prisma.FormTecnicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormTecnicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FormTecnicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload>[]
          }
          upsert: {
            args: Prisma.FormTecnicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTecnicoPayload>
          }
          aggregate: {
            args: Prisma.FormTecnicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormTecnico>
          }
          groupBy: {
            args: Prisma.FormTecnicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormTecnicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormTecnicoCountArgs<ExtArgs>
            result: $Utils.Optional<FormTecnicoCountAggregateOutputType> | number
          }
        }
      }
      Equipamento: {
        payload: Prisma.$EquipamentoPayload<ExtArgs>
        fields: Prisma.EquipamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          findFirst: {
            args: Prisma.EquipamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          findMany: {
            args: Prisma.EquipamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>[]
          }
          create: {
            args: Prisma.EquipamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          createMany: {
            args: Prisma.EquipamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquipamentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>[]
          }
          delete: {
            args: Prisma.EquipamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          update: {
            args: Prisma.EquipamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          deleteMany: {
            args: Prisma.EquipamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquipamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquipamentoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>[]
          }
          upsert: {
            args: Prisma.EquipamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          aggregate: {
            args: Prisma.EquipamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquipamento>
          }
          groupBy: {
            args: Prisma.EquipamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquipamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipamentoCountArgs<ExtArgs>
            result: $Utils.Optional<EquipamentoCountAggregateOutputType> | number
          }
        }
      }
      controleDeAssistenciaTecnica: {
        payload: Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>
        fields: Prisma.controleDeAssistenciaTecnicaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.controleDeAssistenciaTecnicaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.controleDeAssistenciaTecnicaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload>
          }
          findFirst: {
            args: Prisma.controleDeAssistenciaTecnicaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.controleDeAssistenciaTecnicaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload>
          }
          findMany: {
            args: Prisma.controleDeAssistenciaTecnicaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload>[]
          }
          create: {
            args: Prisma.controleDeAssistenciaTecnicaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload>
          }
          createMany: {
            args: Prisma.controleDeAssistenciaTecnicaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.controleDeAssistenciaTecnicaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload>[]
          }
          delete: {
            args: Prisma.controleDeAssistenciaTecnicaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload>
          }
          update: {
            args: Prisma.controleDeAssistenciaTecnicaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload>
          }
          deleteMany: {
            args: Prisma.controleDeAssistenciaTecnicaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.controleDeAssistenciaTecnicaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.controleDeAssistenciaTecnicaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload>[]
          }
          upsert: {
            args: Prisma.controleDeAssistenciaTecnicaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeAssistenciaTecnicaPayload>
          }
          aggregate: {
            args: Prisma.ControleDeAssistenciaTecnicaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControleDeAssistenciaTecnica>
          }
          groupBy: {
            args: Prisma.controleDeAssistenciaTecnicaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControleDeAssistenciaTecnicaGroupByOutputType>[]
          }
          count: {
            args: Prisma.controleDeAssistenciaTecnicaCountArgs<ExtArgs>
            result: $Utils.Optional<ControleDeAssistenciaTecnicaCountAggregateOutputType> | number
          }
        }
      }
      statusReparo: {
        payload: Prisma.$statusReparoPayload<ExtArgs>
        fields: Prisma.statusReparoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.statusReparoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.statusReparoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload>
          }
          findFirst: {
            args: Prisma.statusReparoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.statusReparoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload>
          }
          findMany: {
            args: Prisma.statusReparoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload>[]
          }
          create: {
            args: Prisma.statusReparoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload>
          }
          createMany: {
            args: Prisma.statusReparoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.statusReparoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload>[]
          }
          delete: {
            args: Prisma.statusReparoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload>
          }
          update: {
            args: Prisma.statusReparoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload>
          }
          deleteMany: {
            args: Prisma.statusReparoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.statusReparoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.statusReparoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload>[]
          }
          upsert: {
            args: Prisma.statusReparoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusReparoPayload>
          }
          aggregate: {
            args: Prisma.StatusReparoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusReparo>
          }
          groupBy: {
            args: Prisma.statusReparoGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusReparoGroupByOutputType>[]
          }
          count: {
            args: Prisma.statusReparoCountArgs<ExtArgs>
            result: $Utils.Optional<StatusReparoCountAggregateOutputType> | number
          }
        }
      }
      StatusTeste: {
        payload: Prisma.$StatusTestePayload<ExtArgs>
        fields: Prisma.StatusTesteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusTesteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusTesteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload>
          }
          findFirst: {
            args: Prisma.StatusTesteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusTesteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload>
          }
          findMany: {
            args: Prisma.StatusTesteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload>[]
          }
          create: {
            args: Prisma.StatusTesteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload>
          }
          createMany: {
            args: Prisma.StatusTesteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatusTesteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload>[]
          }
          delete: {
            args: Prisma.StatusTesteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload>
          }
          update: {
            args: Prisma.StatusTesteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload>
          }
          deleteMany: {
            args: Prisma.StatusTesteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusTesteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StatusTesteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload>[]
          }
          upsert: {
            args: Prisma.StatusTesteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusTestePayload>
          }
          aggregate: {
            args: Prisma.StatusTesteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusTeste>
          }
          groupBy: {
            args: Prisma.StatusTesteGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusTesteGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusTesteCountArgs<ExtArgs>
            result: $Utils.Optional<StatusTesteCountAggregateOutputType> | number
          }
        }
      }
      controleDeLaudoTecnico: {
        payload: Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>
        fields: Prisma.controleDeLaudoTecnicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.controleDeLaudoTecnicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.controleDeLaudoTecnicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload>
          }
          findFirst: {
            args: Prisma.controleDeLaudoTecnicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.controleDeLaudoTecnicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload>
          }
          findMany: {
            args: Prisma.controleDeLaudoTecnicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload>[]
          }
          create: {
            args: Prisma.controleDeLaudoTecnicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload>
          }
          createMany: {
            args: Prisma.controleDeLaudoTecnicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.controleDeLaudoTecnicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload>[]
          }
          delete: {
            args: Prisma.controleDeLaudoTecnicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload>
          }
          update: {
            args: Prisma.controleDeLaudoTecnicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload>
          }
          deleteMany: {
            args: Prisma.controleDeLaudoTecnicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.controleDeLaudoTecnicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.controleDeLaudoTecnicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload>[]
          }
          upsert: {
            args: Prisma.controleDeLaudoTecnicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaudoTecnicoPayload>
          }
          aggregate: {
            args: Prisma.ControleDeLaudoTecnicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControleDeLaudoTecnico>
          }
          groupBy: {
            args: Prisma.controleDeLaudoTecnicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControleDeLaudoTecnicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.controleDeLaudoTecnicoCountArgs<ExtArgs>
            result: $Utils.Optional<ControleDeLaudoTecnicoCountAggregateOutputType> | number
          }
        }
      }
      controleDeLaboratio: {
        payload: Prisma.$controleDeLaboratioPayload<ExtArgs>
        fields: Prisma.controleDeLaboratioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.controleDeLaboratioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.controleDeLaboratioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload>
          }
          findFirst: {
            args: Prisma.controleDeLaboratioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.controleDeLaboratioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload>
          }
          findMany: {
            args: Prisma.controleDeLaboratioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload>[]
          }
          create: {
            args: Prisma.controleDeLaboratioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload>
          }
          createMany: {
            args: Prisma.controleDeLaboratioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.controleDeLaboratioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload>[]
          }
          delete: {
            args: Prisma.controleDeLaboratioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload>
          }
          update: {
            args: Prisma.controleDeLaboratioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload>
          }
          deleteMany: {
            args: Prisma.controleDeLaboratioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.controleDeLaboratioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.controleDeLaboratioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload>[]
          }
          upsert: {
            args: Prisma.controleDeLaboratioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeLaboratioPayload>
          }
          aggregate: {
            args: Prisma.ControleDeLaboratioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControleDeLaboratio>
          }
          groupBy: {
            args: Prisma.controleDeLaboratioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControleDeLaboratioGroupByOutputType>[]
          }
          count: {
            args: Prisma.controleDeLaboratioCountArgs<ExtArgs>
            result: $Utils.Optional<ControleDeLaboratioCountAggregateOutputType> | number
          }
        }
      }
      statusControledeLaboratorio: {
        payload: Prisma.$statusControledeLaboratorioPayload<ExtArgs>
        fields: Prisma.statusControledeLaboratorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.statusControledeLaboratorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.statusControledeLaboratorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload>
          }
          findFirst: {
            args: Prisma.statusControledeLaboratorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.statusControledeLaboratorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload>
          }
          findMany: {
            args: Prisma.statusControledeLaboratorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload>[]
          }
          create: {
            args: Prisma.statusControledeLaboratorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload>
          }
          createMany: {
            args: Prisma.statusControledeLaboratorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.statusControledeLaboratorioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload>[]
          }
          delete: {
            args: Prisma.statusControledeLaboratorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload>
          }
          update: {
            args: Prisma.statusControledeLaboratorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload>
          }
          deleteMany: {
            args: Prisma.statusControledeLaboratorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.statusControledeLaboratorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.statusControledeLaboratorioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload>[]
          }
          upsert: {
            args: Prisma.statusControledeLaboratorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusControledeLaboratorioPayload>
          }
          aggregate: {
            args: Prisma.StatusControledeLaboratorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusControledeLaboratorio>
          }
          groupBy: {
            args: Prisma.statusControledeLaboratorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusControledeLaboratorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.statusControledeLaboratorioCountArgs<ExtArgs>
            result: $Utils.Optional<StatusControledeLaboratorioCountAggregateOutputType> | number
          }
        }
      }
      controleDeMaquinasPendentesLaboratorio: {
        payload: Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>
        fields: Prisma.controleDeMaquinasPendentesLaboratorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>
          }
          findFirst: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>
          }
          findMany: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>[]
          }
          create: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>
          }
          createMany: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>[]
          }
          delete: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>
          }
          update: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>
          }
          deleteMany: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>[]
          }
          upsert: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload>
          }
          aggregate: {
            args: Prisma.ControleDeMaquinasPendentesLaboratorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControleDeMaquinasPendentesLaboratorio>
          }
          groupBy: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControleDeMaquinasPendentesLaboratorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.controleDeMaquinasPendentesLaboratorioCountArgs<ExtArgs>
            result: $Utils.Optional<ControleDeMaquinasPendentesLaboratorioCountAggregateOutputType> | number
          }
        }
      }
      statusMaquinasPendentesLab: {
        payload: Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>
        fields: Prisma.statusMaquinasPendentesLabFieldRefs
        operations: {
          findUnique: {
            args: Prisma.statusMaquinasPendentesLabFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.statusMaquinasPendentesLabFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload>
          }
          findFirst: {
            args: Prisma.statusMaquinasPendentesLabFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.statusMaquinasPendentesLabFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload>
          }
          findMany: {
            args: Prisma.statusMaquinasPendentesLabFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload>[]
          }
          create: {
            args: Prisma.statusMaquinasPendentesLabCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload>
          }
          createMany: {
            args: Prisma.statusMaquinasPendentesLabCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.statusMaquinasPendentesLabCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload>[]
          }
          delete: {
            args: Prisma.statusMaquinasPendentesLabDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload>
          }
          update: {
            args: Prisma.statusMaquinasPendentesLabUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload>
          }
          deleteMany: {
            args: Prisma.statusMaquinasPendentesLabDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.statusMaquinasPendentesLabUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.statusMaquinasPendentesLabUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload>[]
          }
          upsert: {
            args: Prisma.statusMaquinasPendentesLabUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesLabPayload>
          }
          aggregate: {
            args: Prisma.StatusMaquinasPendentesLabAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusMaquinasPendentesLab>
          }
          groupBy: {
            args: Prisma.statusMaquinasPendentesLabGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusMaquinasPendentesLabGroupByOutputType>[]
          }
          count: {
            args: Prisma.statusMaquinasPendentesLabCountArgs<ExtArgs>
            result: $Utils.Optional<StatusMaquinasPendentesLabCountAggregateOutputType> | number
          }
        }
      }
      controledeMaquinasPendentesOro: {
        payload: Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>
        fields: Prisma.controledeMaquinasPendentesOroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.controledeMaquinasPendentesOroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.controledeMaquinasPendentesOroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload>
          }
          findFirst: {
            args: Prisma.controledeMaquinasPendentesOroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.controledeMaquinasPendentesOroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload>
          }
          findMany: {
            args: Prisma.controledeMaquinasPendentesOroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload>[]
          }
          create: {
            args: Prisma.controledeMaquinasPendentesOroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload>
          }
          createMany: {
            args: Prisma.controledeMaquinasPendentesOroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.controledeMaquinasPendentesOroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload>[]
          }
          delete: {
            args: Prisma.controledeMaquinasPendentesOroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload>
          }
          update: {
            args: Prisma.controledeMaquinasPendentesOroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload>
          }
          deleteMany: {
            args: Prisma.controledeMaquinasPendentesOroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.controledeMaquinasPendentesOroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.controledeMaquinasPendentesOroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload>[]
          }
          upsert: {
            args: Prisma.controledeMaquinasPendentesOroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controledeMaquinasPendentesOroPayload>
          }
          aggregate: {
            args: Prisma.ControledeMaquinasPendentesOroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControledeMaquinasPendentesOro>
          }
          groupBy: {
            args: Prisma.controledeMaquinasPendentesOroGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControledeMaquinasPendentesOroGroupByOutputType>[]
          }
          count: {
            args: Prisma.controledeMaquinasPendentesOroCountArgs<ExtArgs>
            result: $Utils.Optional<ControledeMaquinasPendentesOroCountAggregateOutputType> | number
          }
        }
      }
      statusMaquinasPendentesOro: {
        payload: Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>
        fields: Prisma.statusMaquinasPendentesOroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.statusMaquinasPendentesOroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.statusMaquinasPendentesOroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload>
          }
          findFirst: {
            args: Prisma.statusMaquinasPendentesOroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.statusMaquinasPendentesOroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload>
          }
          findMany: {
            args: Prisma.statusMaquinasPendentesOroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload>[]
          }
          create: {
            args: Prisma.statusMaquinasPendentesOroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload>
          }
          createMany: {
            args: Prisma.statusMaquinasPendentesOroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.statusMaquinasPendentesOroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload>[]
          }
          delete: {
            args: Prisma.statusMaquinasPendentesOroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload>
          }
          update: {
            args: Prisma.statusMaquinasPendentesOroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload>
          }
          deleteMany: {
            args: Prisma.statusMaquinasPendentesOroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.statusMaquinasPendentesOroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.statusMaquinasPendentesOroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload>[]
          }
          upsert: {
            args: Prisma.statusMaquinasPendentesOroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusMaquinasPendentesOroPayload>
          }
          aggregate: {
            args: Prisma.StatusMaquinasPendentesOroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusMaquinasPendentesOro>
          }
          groupBy: {
            args: Prisma.statusMaquinasPendentesOroGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusMaquinasPendentesOroGroupByOutputType>[]
          }
          count: {
            args: Prisma.statusMaquinasPendentesOroCountArgs<ExtArgs>
            result: $Utils.Optional<StatusMaquinasPendentesOroCountAggregateOutputType> | number
          }
        }
      }
      documentacaoTecnica: {
        payload: Prisma.$documentacaoTecnicaPayload<ExtArgs>
        fields: Prisma.documentacaoTecnicaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.documentacaoTecnicaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.documentacaoTecnicaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload>
          }
          findFirst: {
            args: Prisma.documentacaoTecnicaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.documentacaoTecnicaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload>
          }
          findMany: {
            args: Prisma.documentacaoTecnicaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload>[]
          }
          create: {
            args: Prisma.documentacaoTecnicaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload>
          }
          createMany: {
            args: Prisma.documentacaoTecnicaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.documentacaoTecnicaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload>[]
          }
          delete: {
            args: Prisma.documentacaoTecnicaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload>
          }
          update: {
            args: Prisma.documentacaoTecnicaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload>
          }
          deleteMany: {
            args: Prisma.documentacaoTecnicaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.documentacaoTecnicaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.documentacaoTecnicaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload>[]
          }
          upsert: {
            args: Prisma.documentacaoTecnicaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$documentacaoTecnicaPayload>
          }
          aggregate: {
            args: Prisma.DocumentacaoTecnicaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentacaoTecnica>
          }
          groupBy: {
            args: Prisma.documentacaoTecnicaGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentacaoTecnicaGroupByOutputType>[]
          }
          count: {
            args: Prisma.documentacaoTecnicaCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentacaoTecnicaCountAggregateOutputType> | number
          }
        }
      }
      solicitacaoDeCompras: {
        payload: Prisma.$solicitacaoDeComprasPayload<ExtArgs>
        fields: Prisma.solicitacaoDeComprasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.solicitacaoDeComprasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.solicitacaoDeComprasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload>
          }
          findFirst: {
            args: Prisma.solicitacaoDeComprasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.solicitacaoDeComprasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload>
          }
          findMany: {
            args: Prisma.solicitacaoDeComprasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload>[]
          }
          create: {
            args: Prisma.solicitacaoDeComprasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload>
          }
          createMany: {
            args: Prisma.solicitacaoDeComprasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.solicitacaoDeComprasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload>[]
          }
          delete: {
            args: Prisma.solicitacaoDeComprasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload>
          }
          update: {
            args: Prisma.solicitacaoDeComprasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload>
          }
          deleteMany: {
            args: Prisma.solicitacaoDeComprasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.solicitacaoDeComprasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.solicitacaoDeComprasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload>[]
          }
          upsert: {
            args: Prisma.solicitacaoDeComprasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$solicitacaoDeComprasPayload>
          }
          aggregate: {
            args: Prisma.SolicitacaoDeComprasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSolicitacaoDeCompras>
          }
          groupBy: {
            args: Prisma.solicitacaoDeComprasGroupByArgs<ExtArgs>
            result: $Utils.Optional<SolicitacaoDeComprasGroupByOutputType>[]
          }
          count: {
            args: Prisma.solicitacaoDeComprasCountArgs<ExtArgs>
            result: $Utils.Optional<SolicitacaoDeComprasCountAggregateOutputType> | number
          }
        }
      }
      statusCompras: {
        payload: Prisma.$statusComprasPayload<ExtArgs>
        fields: Prisma.statusComprasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.statusComprasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.statusComprasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload>
          }
          findFirst: {
            args: Prisma.statusComprasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.statusComprasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload>
          }
          findMany: {
            args: Prisma.statusComprasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload>[]
          }
          create: {
            args: Prisma.statusComprasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload>
          }
          createMany: {
            args: Prisma.statusComprasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.statusComprasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload>[]
          }
          delete: {
            args: Prisma.statusComprasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload>
          }
          update: {
            args: Prisma.statusComprasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload>
          }
          deleteMany: {
            args: Prisma.statusComprasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.statusComprasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.statusComprasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload>[]
          }
          upsert: {
            args: Prisma.statusComprasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusComprasPayload>
          }
          aggregate: {
            args: Prisma.StatusComprasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusCompras>
          }
          groupBy: {
            args: Prisma.statusComprasGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusComprasGroupByOutputType>[]
          }
          count: {
            args: Prisma.statusComprasCountArgs<ExtArgs>
            result: $Utils.Optional<StatusComprasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    cliente?: ClienteOmit
    setor?: SetorOmit
    instituicaoUnidade?: InstituicaoUnidadeOmit
    statusOrdemdeServico?: statusOrdemdeServicoOmit
    tipodeSolicitacao?: TipodeSolicitacaoOmit
    tecnico?: TecnicoOmit
    ordemdeServico?: OrdemdeServicoOmit
    formTecnico?: FormTecnicoOmit
    equipamento?: EquipamentoOmit
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaOmit
    statusReparo?: statusReparoOmit
    statusTeste?: StatusTesteOmit
    controleDeLaudoTecnico?: controleDeLaudoTecnicoOmit
    controleDeLaboratio?: controleDeLaboratioOmit
    statusControledeLaboratorio?: statusControledeLaboratorioOmit
    controleDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioOmit
    statusMaquinasPendentesLab?: statusMaquinasPendentesLabOmit
    controledeMaquinasPendentesOro?: controledeMaquinasPendentesOroOmit
    statusMaquinasPendentesOro?: statusMaquinasPendentesOroOmit
    documentacaoTecnica?: documentacaoTecnicaOmit
    solicitacaoDeCompras?: solicitacaoDeComprasOmit
    statusCompras?: statusComprasOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    users: number
    ordensDeServico: number
    controlesdeAssistenciatecnica: number
    controlesDeLaboratio: number
    documentacoesTecnicas: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ClienteCountOutputTypeCountUsersArgs
    ordensDeServico?: boolean | ClienteCountOutputTypeCountOrdensDeServicoArgs
    controlesdeAssistenciatecnica?: boolean | ClienteCountOutputTypeCountControlesdeAssistenciatecnicaArgs
    controlesDeLaboratio?: boolean | ClienteCountOutputTypeCountControlesDeLaboratioArgs
    documentacoesTecnicas?: boolean | ClienteCountOutputTypeCountDocumentacoesTecnicasArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountOrdensDeServicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdemdeServicoWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountControlesdeAssistenciatecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeAssistenciaTecnicaWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountControlesDeLaboratioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeLaboratioWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountDocumentacoesTecnicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: documentacaoTecnicaWhereInput
  }


  /**
   * Count Type SetorCountOutputType
   */

  export type SetorCountOutputType = {
    users: number
  }

  export type SetorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | SetorCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * SetorCountOutputType without action
   */
  export type SetorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetorCountOutputType
     */
    select?: SetorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SetorCountOutputType without action
   */
  export type SetorCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type InstituicaoUnidadeCountOutputType
   */

  export type InstituicaoUnidadeCountOutputType = {
    users: number
    ordens: number
    controlesdeAssistenciaTecnica: number
    controlesdeLaudoTecnico: number
    controlesDeLaboratio: number
    controlesDeMaquinasPendentesOro: number
    documentacoesTecnicas: number
  }

  export type InstituicaoUnidadeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | InstituicaoUnidadeCountOutputTypeCountUsersArgs
    ordens?: boolean | InstituicaoUnidadeCountOutputTypeCountOrdensArgs
    controlesdeAssistenciaTecnica?: boolean | InstituicaoUnidadeCountOutputTypeCountControlesdeAssistenciaTecnicaArgs
    controlesdeLaudoTecnico?: boolean | InstituicaoUnidadeCountOutputTypeCountControlesdeLaudoTecnicoArgs
    controlesDeLaboratio?: boolean | InstituicaoUnidadeCountOutputTypeCountControlesDeLaboratioArgs
    controlesDeMaquinasPendentesOro?: boolean | InstituicaoUnidadeCountOutputTypeCountControlesDeMaquinasPendentesOroArgs
    documentacoesTecnicas?: boolean | InstituicaoUnidadeCountOutputTypeCountDocumentacoesTecnicasArgs
  }

  // Custom InputTypes
  /**
   * InstituicaoUnidadeCountOutputType without action
   */
  export type InstituicaoUnidadeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidadeCountOutputType
     */
    select?: InstituicaoUnidadeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstituicaoUnidadeCountOutputType without action
   */
  export type InstituicaoUnidadeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * InstituicaoUnidadeCountOutputType without action
   */
  export type InstituicaoUnidadeCountOutputTypeCountOrdensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdemdeServicoWhereInput
  }

  /**
   * InstituicaoUnidadeCountOutputType without action
   */
  export type InstituicaoUnidadeCountOutputTypeCountControlesdeAssistenciaTecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeAssistenciaTecnicaWhereInput
  }

  /**
   * InstituicaoUnidadeCountOutputType without action
   */
  export type InstituicaoUnidadeCountOutputTypeCountControlesdeLaudoTecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeLaudoTecnicoWhereInput
  }

  /**
   * InstituicaoUnidadeCountOutputType without action
   */
  export type InstituicaoUnidadeCountOutputTypeCountControlesDeLaboratioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeLaboratioWhereInput
  }

  /**
   * InstituicaoUnidadeCountOutputType without action
   */
  export type InstituicaoUnidadeCountOutputTypeCountControlesDeMaquinasPendentesOroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controledeMaquinasPendentesOroWhereInput
  }

  /**
   * InstituicaoUnidadeCountOutputType without action
   */
  export type InstituicaoUnidadeCountOutputTypeCountDocumentacoesTecnicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: documentacaoTecnicaWhereInput
  }


  /**
   * Count Type StatusOrdemdeServicoCountOutputType
   */

  export type StatusOrdemdeServicoCountOutputType = {
    ordens: number
    formstecnico: number
  }

  export type StatusOrdemdeServicoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ordens?: boolean | StatusOrdemdeServicoCountOutputTypeCountOrdensArgs
    formstecnico?: boolean | StatusOrdemdeServicoCountOutputTypeCountFormstecnicoArgs
  }

  // Custom InputTypes
  /**
   * StatusOrdemdeServicoCountOutputType without action
   */
  export type StatusOrdemdeServicoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusOrdemdeServicoCountOutputType
     */
    select?: StatusOrdemdeServicoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusOrdemdeServicoCountOutputType without action
   */
  export type StatusOrdemdeServicoCountOutputTypeCountOrdensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdemdeServicoWhereInput
  }

  /**
   * StatusOrdemdeServicoCountOutputType without action
   */
  export type StatusOrdemdeServicoCountOutputTypeCountFormstecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormTecnicoWhereInput
  }


  /**
   * Count Type TipodeSolicitacaoCountOutputType
   */

  export type TipodeSolicitacaoCountOutputType = {
    ordens: number
  }

  export type TipodeSolicitacaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ordens?: boolean | TipodeSolicitacaoCountOutputTypeCountOrdensArgs
  }

  // Custom InputTypes
  /**
   * TipodeSolicitacaoCountOutputType without action
   */
  export type TipodeSolicitacaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacaoCountOutputType
     */
    select?: TipodeSolicitacaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TipodeSolicitacaoCountOutputType without action
   */
  export type TipodeSolicitacaoCountOutputTypeCountOrdensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdemdeServicoWhereInput
  }


  /**
   * Count Type TecnicoCountOutputType
   */

  export type TecnicoCountOutputType = {
    ordens: number
    controlesdeAssistenciatecnica: number
    controlesdeLaudoTecnico: number
    documentacoesTecnicas: number
  }

  export type TecnicoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ordens?: boolean | TecnicoCountOutputTypeCountOrdensArgs
    controlesdeAssistenciatecnica?: boolean | TecnicoCountOutputTypeCountControlesdeAssistenciatecnicaArgs
    controlesdeLaudoTecnico?: boolean | TecnicoCountOutputTypeCountControlesdeLaudoTecnicoArgs
    documentacoesTecnicas?: boolean | TecnicoCountOutputTypeCountDocumentacoesTecnicasArgs
  }

  // Custom InputTypes
  /**
   * TecnicoCountOutputType without action
   */
  export type TecnicoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TecnicoCountOutputType
     */
    select?: TecnicoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TecnicoCountOutputType without action
   */
  export type TecnicoCountOutputTypeCountOrdensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdemdeServicoWhereInput
  }

  /**
   * TecnicoCountOutputType without action
   */
  export type TecnicoCountOutputTypeCountControlesdeAssistenciatecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeAssistenciaTecnicaWhereInput
  }

  /**
   * TecnicoCountOutputType without action
   */
  export type TecnicoCountOutputTypeCountControlesdeLaudoTecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeLaudoTecnicoWhereInput
  }

  /**
   * TecnicoCountOutputType without action
   */
  export type TecnicoCountOutputTypeCountDocumentacoesTecnicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: documentacaoTecnicaWhereInput
  }


  /**
   * Count Type EquipamentoCountOutputType
   */

  export type EquipamentoCountOutputType = {
    controlesDeAssistencia: number
    controlesdeLaudoTecnico: number
    controlesDeLaboratio: number
    controlesDeMaquinasPendentesLaboratorio: number
    controlesDeMaquinasPendentesOro: number
  }

  export type EquipamentoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controlesDeAssistencia?: boolean | EquipamentoCountOutputTypeCountControlesDeAssistenciaArgs
    controlesdeLaudoTecnico?: boolean | EquipamentoCountOutputTypeCountControlesdeLaudoTecnicoArgs
    controlesDeLaboratio?: boolean | EquipamentoCountOutputTypeCountControlesDeLaboratioArgs
    controlesDeMaquinasPendentesLaboratorio?: boolean | EquipamentoCountOutputTypeCountControlesDeMaquinasPendentesLaboratorioArgs
    controlesDeMaquinasPendentesOro?: boolean | EquipamentoCountOutputTypeCountControlesDeMaquinasPendentesOroArgs
  }

  // Custom InputTypes
  /**
   * EquipamentoCountOutputType without action
   */
  export type EquipamentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipamentoCountOutputType
     */
    select?: EquipamentoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipamentoCountOutputType without action
   */
  export type EquipamentoCountOutputTypeCountControlesDeAssistenciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeAssistenciaTecnicaWhereInput
  }

  /**
   * EquipamentoCountOutputType without action
   */
  export type EquipamentoCountOutputTypeCountControlesdeLaudoTecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeLaudoTecnicoWhereInput
  }

  /**
   * EquipamentoCountOutputType without action
   */
  export type EquipamentoCountOutputTypeCountControlesDeLaboratioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeLaboratioWhereInput
  }

  /**
   * EquipamentoCountOutputType without action
   */
  export type EquipamentoCountOutputTypeCountControlesDeMaquinasPendentesLaboratorioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
  }

  /**
   * EquipamentoCountOutputType without action
   */
  export type EquipamentoCountOutputTypeCountControlesDeMaquinasPendentesOroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controledeMaquinasPendentesOroWhereInput
  }


  /**
   * Count Type StatusReparoCountOutputType
   */

  export type StatusReparoCountOutputType = {
    controleDeAssistenciaTecnica: number
  }

  export type StatusReparoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controleDeAssistenciaTecnica?: boolean | StatusReparoCountOutputTypeCountControleDeAssistenciaTecnicaArgs
  }

  // Custom InputTypes
  /**
   * StatusReparoCountOutputType without action
   */
  export type StatusReparoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReparoCountOutputType
     */
    select?: StatusReparoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusReparoCountOutputType without action
   */
  export type StatusReparoCountOutputTypeCountControleDeAssistenciaTecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeAssistenciaTecnicaWhereInput
  }


  /**
   * Count Type StatusTesteCountOutputType
   */

  export type StatusTesteCountOutputType = {
    controleDeAssistenciaTecnica: number
  }

  export type StatusTesteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controleDeAssistenciaTecnica?: boolean | StatusTesteCountOutputTypeCountControleDeAssistenciaTecnicaArgs
  }

  // Custom InputTypes
  /**
   * StatusTesteCountOutputType without action
   */
  export type StatusTesteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTesteCountOutputType
     */
    select?: StatusTesteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusTesteCountOutputType without action
   */
  export type StatusTesteCountOutputTypeCountControleDeAssistenciaTecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeAssistenciaTecnicaWhereInput
  }


  /**
   * Count Type StatusControledeLaboratorioCountOutputType
   */

  export type StatusControledeLaboratorioCountOutputType = {
    controlesDeLaboratio: number
  }

  export type StatusControledeLaboratorioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controlesDeLaboratio?: boolean | StatusControledeLaboratorioCountOutputTypeCountControlesDeLaboratioArgs
  }

  // Custom InputTypes
  /**
   * StatusControledeLaboratorioCountOutputType without action
   */
  export type StatusControledeLaboratorioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusControledeLaboratorioCountOutputType
     */
    select?: StatusControledeLaboratorioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusControledeLaboratorioCountOutputType without action
   */
  export type StatusControledeLaboratorioCountOutputTypeCountControlesDeLaboratioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeLaboratioWhereInput
  }


  /**
   * Count Type StatusMaquinasPendentesLabCountOutputType
   */

  export type StatusMaquinasPendentesLabCountOutputType = {
    controlesDeMaquinasPendentesLaboratorio: number
  }

  export type StatusMaquinasPendentesLabCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controlesDeMaquinasPendentesLaboratorio?: boolean | StatusMaquinasPendentesLabCountOutputTypeCountControlesDeMaquinasPendentesLaboratorioArgs
  }

  // Custom InputTypes
  /**
   * StatusMaquinasPendentesLabCountOutputType without action
   */
  export type StatusMaquinasPendentesLabCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusMaquinasPendentesLabCountOutputType
     */
    select?: StatusMaquinasPendentesLabCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusMaquinasPendentesLabCountOutputType without action
   */
  export type StatusMaquinasPendentesLabCountOutputTypeCountControlesDeMaquinasPendentesLaboratorioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
  }


  /**
   * Count Type StatusMaquinasPendentesOroCountOutputType
   */

  export type StatusMaquinasPendentesOroCountOutputType = {
    controlesDeMaquinasPendentesOro: number
  }

  export type StatusMaquinasPendentesOroCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controlesDeMaquinasPendentesOro?: boolean | StatusMaquinasPendentesOroCountOutputTypeCountControlesDeMaquinasPendentesOroArgs
  }

  // Custom InputTypes
  /**
   * StatusMaquinasPendentesOroCountOutputType without action
   */
  export type StatusMaquinasPendentesOroCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusMaquinasPendentesOroCountOutputType
     */
    select?: StatusMaquinasPendentesOroCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusMaquinasPendentesOroCountOutputType without action
   */
  export type StatusMaquinasPendentesOroCountOutputTypeCountControlesDeMaquinasPendentesOroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controledeMaquinasPendentesOroWhereInput
  }


  /**
   * Count Type StatusComprasCountOutputType
   */

  export type StatusComprasCountOutputType = {
    solicitacoesDeCompras: number
  }

  export type StatusComprasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solicitacoesDeCompras?: boolean | StatusComprasCountOutputTypeCountSolicitacoesDeComprasArgs
  }

  // Custom InputTypes
  /**
   * StatusComprasCountOutputType without action
   */
  export type StatusComprasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusComprasCountOutputType
     */
    select?: StatusComprasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusComprasCountOutputType without action
   */
  export type StatusComprasCountOutputTypeCountSolicitacoesDeComprasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: solicitacaoDeComprasWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    create_at: Date | null
    updated_at: Date | null
    cliente_id: string | null
    setor_id: string | null
    instituicao_id: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    create_at: Date | null
    updated_at: Date | null
    cliente_id: string | null
    setor_id: string | null
    instituicao_id: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    create_at: number
    updated_at: number
    cliente_id: number
    setor_id: number
    instituicao_id: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    create_at?: true
    updated_at?: true
    cliente_id?: true
    setor_id?: true
    instituicao_id?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    create_at?: true
    updated_at?: true
    cliente_id?: true
    setor_id?: true
    instituicao_id?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    create_at?: true
    updated_at?: true
    cliente_id?: true
    setor_id?: true
    instituicao_id?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    create_at: Date | null
    updated_at: Date | null
    cliente_id: string | null
    setor_id: string | null
    instituicao_id: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    create_at?: boolean
    updated_at?: boolean
    cliente_id?: boolean
    setor_id?: boolean
    instituicao_id?: boolean
    cliente?: boolean | User$clienteArgs<ExtArgs>
    setor?: boolean | User$setorArgs<ExtArgs>
    instituicao?: boolean | User$instituicaoArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    create_at?: boolean
    updated_at?: boolean
    cliente_id?: boolean
    setor_id?: boolean
    instituicao_id?: boolean
    cliente?: boolean | User$clienteArgs<ExtArgs>
    setor?: boolean | User$setorArgs<ExtArgs>
    instituicao?: boolean | User$instituicaoArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    create_at?: boolean
    updated_at?: boolean
    cliente_id?: boolean
    setor_id?: boolean
    instituicao_id?: boolean
    cliente?: boolean | User$clienteArgs<ExtArgs>
    setor?: boolean | User$setorArgs<ExtArgs>
    instituicao?: boolean | User$instituicaoArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    create_at?: boolean
    updated_at?: boolean
    cliente_id?: boolean
    setor_id?: boolean
    instituicao_id?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "create_at" | "updated_at" | "cliente_id" | "setor_id" | "instituicao_id", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | User$clienteArgs<ExtArgs>
    setor?: boolean | User$setorArgs<ExtArgs>
    instituicao?: boolean | User$instituicaoArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | User$clienteArgs<ExtArgs>
    setor?: boolean | User$setorArgs<ExtArgs>
    instituicao?: boolean | User$instituicaoArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | User$clienteArgs<ExtArgs>
    setor?: boolean | User$setorArgs<ExtArgs>
    instituicao?: boolean | User$instituicaoArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs> | null
      setor: Prisma.$SetorPayload<ExtArgs> | null
      instituicao: Prisma.$InstituicaoUnidadePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      create_at: Date | null
      updated_at: Date | null
      cliente_id: string | null
      setor_id: string | null
      instituicao_id: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends User$clienteArgs<ExtArgs> = {}>(args?: Subset<T, User$clienteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    setor<T extends User$setorArgs<ExtArgs> = {}>(args?: Subset<T, User$setorArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    instituicao<T extends User$instituicaoArgs<ExtArgs> = {}>(args?: Subset<T, User$instituicaoArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly create_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
    readonly cliente_id: FieldRef<"User", 'String'>
    readonly setor_id: FieldRef<"User", 'String'>
    readonly instituicao_id: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.cliente
   */
  export type User$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }

  /**
   * User.setor
   */
  export type User$setorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    where?: SetorWhereInput
  }

  /**
   * User.instituicao
   */
  export type User$instituicaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    where?: InstituicaoUnidadeWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type ClienteMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: ClienteCountAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    users?: boolean | Cliente$usersArgs<ExtArgs>
    ordensDeServico?: boolean | Cliente$ordensDeServicoArgs<ExtArgs>
    controlesdeAssistenciatecnica?: boolean | Cliente$controlesdeAssistenciatecnicaArgs<ExtArgs>
    controlesDeLaboratio?: boolean | Cliente$controlesDeLaboratioArgs<ExtArgs>
    documentacoesTecnicas?: boolean | Cliente$documentacoesTecnicasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type ClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["cliente"]>
  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Cliente$usersArgs<ExtArgs>
    ordensDeServico?: boolean | Cliente$ordensDeServicoArgs<ExtArgs>
    controlesdeAssistenciatecnica?: boolean | Cliente$controlesdeAssistenciatecnicaArgs<ExtArgs>
    controlesDeLaboratio?: boolean | Cliente$controlesDeLaboratioArgs<ExtArgs>
    documentacoesTecnicas?: boolean | Cliente$documentacoesTecnicasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClienteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      ordensDeServico: Prisma.$OrdemdeServicoPayload<ExtArgs>[]
      controlesdeAssistenciatecnica: Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>[]
      controlesDeLaboratio: Prisma.$controleDeLaboratioPayload<ExtArgs>[]
      documentacoesTecnicas: Prisma.$documentacaoTecnicaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clientes and returns the data saved in the database.
     * @param {ClienteCreateManyAndReturnArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clientes and only return the `id`
     * const clienteWithIdOnly = await prisma.cliente.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClienteCreateManyAndReturnArgs>(args?: SelectSubset<T, ClienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes and returns the data updated in the database.
     * @param {ClienteUpdateManyAndReturnArgs} args - Arguments to update many Clientes.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clientes and only return the `id`
     * const clienteWithIdOnly = await prisma.cliente.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClienteUpdateManyAndReturnArgs>(args: SelectSubset<T, ClienteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Cliente$usersArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ordensDeServico<T extends Cliente$ordensDeServicoArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$ordensDeServicoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesdeAssistenciatecnica<T extends Cliente$controlesdeAssistenciatecnicaArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$controlesdeAssistenciatecnicaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesDeLaboratio<T extends Cliente$controlesDeLaboratioArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$controlesDeLaboratioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documentacoesTecnicas<T extends Cliente$documentacoesTecnicasArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$documentacoesTecnicasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'String'>
    readonly name: FieldRef<"Cliente", 'String'>
    readonly create_at: FieldRef<"Cliente", 'DateTime'>
    readonly updated_at: FieldRef<"Cliente", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente createManyAndReturn
   */
  export type ClienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente updateManyAndReturn
   */
  export type ClienteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to delete.
     */
    limit?: number
  }

  /**
   * Cliente.users
   */
  export type Cliente$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Cliente.ordensDeServico
   */
  export type Cliente$ordensDeServicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    where?: OrdemdeServicoWhereInput
    orderBy?: OrdemdeServicoOrderByWithRelationInput | OrdemdeServicoOrderByWithRelationInput[]
    cursor?: OrdemdeServicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdemdeServicoScalarFieldEnum | OrdemdeServicoScalarFieldEnum[]
  }

  /**
   * Cliente.controlesdeAssistenciatecnica
   */
  export type Cliente$controlesdeAssistenciatecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    where?: controleDeAssistenciaTecnicaWhereInput
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeAssistenciaTecnicaScalarFieldEnum | ControleDeAssistenciaTecnicaScalarFieldEnum[]
  }

  /**
   * Cliente.controlesDeLaboratio
   */
  export type Cliente$controlesDeLaboratioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    where?: controleDeLaboratioWhereInput
    orderBy?: controleDeLaboratioOrderByWithRelationInput | controleDeLaboratioOrderByWithRelationInput[]
    cursor?: controleDeLaboratioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeLaboratioScalarFieldEnum | ControleDeLaboratioScalarFieldEnum[]
  }

  /**
   * Cliente.documentacoesTecnicas
   */
  export type Cliente$documentacoesTecnicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    where?: documentacaoTecnicaWhereInput
    orderBy?: documentacaoTecnicaOrderByWithRelationInput | documentacaoTecnicaOrderByWithRelationInput[]
    cursor?: documentacaoTecnicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentacaoTecnicaScalarFieldEnum | DocumentacaoTecnicaScalarFieldEnum[]
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model Setor
   */

  export type AggregateSetor = {
    _count: SetorCountAggregateOutputType | null
    _min: SetorMinAggregateOutputType | null
    _max: SetorMaxAggregateOutputType | null
  }

  export type SetorMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type SetorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type SetorCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type SetorMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type SetorMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type SetorCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type SetorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setor to aggregate.
     */
    where?: SetorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setors to fetch.
     */
    orderBy?: SetorOrderByWithRelationInput | SetorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SetorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Setors
    **/
    _count?: true | SetorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SetorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SetorMaxAggregateInputType
  }

  export type GetSetorAggregateType<T extends SetorAggregateArgs> = {
        [P in keyof T & keyof AggregateSetor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetor[P]>
      : GetScalarType<T[P], AggregateSetor[P]>
  }




  export type SetorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SetorWhereInput
    orderBy?: SetorOrderByWithAggregationInput | SetorOrderByWithAggregationInput[]
    by: SetorScalarFieldEnum[] | SetorScalarFieldEnum
    having?: SetorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SetorCountAggregateInputType | true
    _min?: SetorMinAggregateInputType
    _max?: SetorMaxAggregateInputType
  }

  export type SetorGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: SetorCountAggregateOutputType | null
    _min: SetorMinAggregateOutputType | null
    _max: SetorMaxAggregateOutputType | null
  }

  type GetSetorGroupByPayload<T extends SetorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SetorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SetorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SetorGroupByOutputType[P]>
            : GetScalarType<T[P], SetorGroupByOutputType[P]>
        }
      >
    >


  export type SetorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    users?: boolean | Setor$usersArgs<ExtArgs>
    _count?: boolean | SetorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["setor"]>

  export type SetorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["setor"]>

  export type SetorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["setor"]>

  export type SetorSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type SetorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["setor"]>
  export type SetorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Setor$usersArgs<ExtArgs>
    _count?: boolean | SetorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SetorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SetorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SetorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setor"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["setor"]>
    composites: {}
  }

  type SetorGetPayload<S extends boolean | null | undefined | SetorDefaultArgs> = $Result.GetResult<Prisma.$SetorPayload, S>

  type SetorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SetorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SetorCountAggregateInputType | true
    }

  export interface SetorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setor'], meta: { name: 'Setor' } }
    /**
     * Find zero or one Setor that matches the filter.
     * @param {SetorFindUniqueArgs} args - Arguments to find a Setor
     * @example
     * // Get one Setor
     * const setor = await prisma.setor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SetorFindUniqueArgs>(args: SelectSubset<T, SetorFindUniqueArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Setor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SetorFindUniqueOrThrowArgs} args - Arguments to find a Setor
     * @example
     * // Get one Setor
     * const setor = await prisma.setor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SetorFindUniqueOrThrowArgs>(args: SelectSubset<T, SetorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Setor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorFindFirstArgs} args - Arguments to find a Setor
     * @example
     * // Get one Setor
     * const setor = await prisma.setor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SetorFindFirstArgs>(args?: SelectSubset<T, SetorFindFirstArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Setor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorFindFirstOrThrowArgs} args - Arguments to find a Setor
     * @example
     * // Get one Setor
     * const setor = await prisma.setor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SetorFindFirstOrThrowArgs>(args?: SelectSubset<T, SetorFindFirstOrThrowArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Setors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Setors
     * const setors = await prisma.setor.findMany()
     * 
     * // Get first 10 Setors
     * const setors = await prisma.setor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const setorWithIdOnly = await prisma.setor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SetorFindManyArgs>(args?: SelectSubset<T, SetorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Setor.
     * @param {SetorCreateArgs} args - Arguments to create a Setor.
     * @example
     * // Create one Setor
     * const Setor = await prisma.setor.create({
     *   data: {
     *     // ... data to create a Setor
     *   }
     * })
     * 
     */
    create<T extends SetorCreateArgs>(args: SelectSubset<T, SetorCreateArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Setors.
     * @param {SetorCreateManyArgs} args - Arguments to create many Setors.
     * @example
     * // Create many Setors
     * const setor = await prisma.setor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SetorCreateManyArgs>(args?: SelectSubset<T, SetorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Setors and returns the data saved in the database.
     * @param {SetorCreateManyAndReturnArgs} args - Arguments to create many Setors.
     * @example
     * // Create many Setors
     * const setor = await prisma.setor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Setors and only return the `id`
     * const setorWithIdOnly = await prisma.setor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SetorCreateManyAndReturnArgs>(args?: SelectSubset<T, SetorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Setor.
     * @param {SetorDeleteArgs} args - Arguments to delete one Setor.
     * @example
     * // Delete one Setor
     * const Setor = await prisma.setor.delete({
     *   where: {
     *     // ... filter to delete one Setor
     *   }
     * })
     * 
     */
    delete<T extends SetorDeleteArgs>(args: SelectSubset<T, SetorDeleteArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Setor.
     * @param {SetorUpdateArgs} args - Arguments to update one Setor.
     * @example
     * // Update one Setor
     * const setor = await prisma.setor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SetorUpdateArgs>(args: SelectSubset<T, SetorUpdateArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Setors.
     * @param {SetorDeleteManyArgs} args - Arguments to filter Setors to delete.
     * @example
     * // Delete a few Setors
     * const { count } = await prisma.setor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SetorDeleteManyArgs>(args?: SelectSubset<T, SetorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Setors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Setors
     * const setor = await prisma.setor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SetorUpdateManyArgs>(args: SelectSubset<T, SetorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Setors and returns the data updated in the database.
     * @param {SetorUpdateManyAndReturnArgs} args - Arguments to update many Setors.
     * @example
     * // Update many Setors
     * const setor = await prisma.setor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Setors and only return the `id`
     * const setorWithIdOnly = await prisma.setor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SetorUpdateManyAndReturnArgs>(args: SelectSubset<T, SetorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Setor.
     * @param {SetorUpsertArgs} args - Arguments to update or create a Setor.
     * @example
     * // Update or create a Setor
     * const setor = await prisma.setor.upsert({
     *   create: {
     *     // ... data to create a Setor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setor we want to update
     *   }
     * })
     */
    upsert<T extends SetorUpsertArgs>(args: SelectSubset<T, SetorUpsertArgs<ExtArgs>>): Prisma__SetorClient<$Result.GetResult<Prisma.$SetorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Setors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorCountArgs} args - Arguments to filter Setors to count.
     * @example
     * // Count the number of Setors
     * const count = await prisma.setor.count({
     *   where: {
     *     // ... the filter for the Setors we want to count
     *   }
     * })
    **/
    count<T extends SetorCountArgs>(
      args?: Subset<T, SetorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SetorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SetorAggregateArgs>(args: Subset<T, SetorAggregateArgs>): Prisma.PrismaPromise<GetSetorAggregateType<T>>

    /**
     * Group by Setor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SetorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SetorGroupByArgs['orderBy'] }
        : { orderBy?: SetorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SetorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSetorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setor model
   */
  readonly fields: SetorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SetorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Setor$usersArgs<ExtArgs> = {}>(args?: Subset<T, Setor$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setor model
   */
  interface SetorFieldRefs {
    readonly id: FieldRef<"Setor", 'String'>
    readonly name: FieldRef<"Setor", 'String'>
    readonly create_at: FieldRef<"Setor", 'DateTime'>
    readonly updated_at: FieldRef<"Setor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Setor findUnique
   */
  export type SetorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setor to fetch.
     */
    where: SetorWhereUniqueInput
  }

  /**
   * Setor findUniqueOrThrow
   */
  export type SetorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setor to fetch.
     */
    where: SetorWhereUniqueInput
  }

  /**
   * Setor findFirst
   */
  export type SetorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setor to fetch.
     */
    where?: SetorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setors to fetch.
     */
    orderBy?: SetorOrderByWithRelationInput | SetorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Setors.
     */
    cursor?: SetorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Setors.
     */
    distinct?: SetorScalarFieldEnum | SetorScalarFieldEnum[]
  }

  /**
   * Setor findFirstOrThrow
   */
  export type SetorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setor to fetch.
     */
    where?: SetorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setors to fetch.
     */
    orderBy?: SetorOrderByWithRelationInput | SetorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Setors.
     */
    cursor?: SetorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Setors.
     */
    distinct?: SetorScalarFieldEnum | SetorScalarFieldEnum[]
  }

  /**
   * Setor findMany
   */
  export type SetorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter, which Setors to fetch.
     */
    where?: SetorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Setors to fetch.
     */
    orderBy?: SetorOrderByWithRelationInput | SetorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Setors.
     */
    cursor?: SetorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Setors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Setors.
     */
    skip?: number
    distinct?: SetorScalarFieldEnum | SetorScalarFieldEnum[]
  }

  /**
   * Setor create
   */
  export type SetorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * The data needed to create a Setor.
     */
    data: XOR<SetorCreateInput, SetorUncheckedCreateInput>
  }

  /**
   * Setor createMany
   */
  export type SetorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Setors.
     */
    data: SetorCreateManyInput | SetorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setor createManyAndReturn
   */
  export type SetorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * The data used to create many Setors.
     */
    data: SetorCreateManyInput | SetorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setor update
   */
  export type SetorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * The data needed to update a Setor.
     */
    data: XOR<SetorUpdateInput, SetorUncheckedUpdateInput>
    /**
     * Choose, which Setor to update.
     */
    where: SetorWhereUniqueInput
  }

  /**
   * Setor updateMany
   */
  export type SetorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Setors.
     */
    data: XOR<SetorUpdateManyMutationInput, SetorUncheckedUpdateManyInput>
    /**
     * Filter which Setors to update
     */
    where?: SetorWhereInput
    /**
     * Limit how many Setors to update.
     */
    limit?: number
  }

  /**
   * Setor updateManyAndReturn
   */
  export type SetorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * The data used to update Setors.
     */
    data: XOR<SetorUpdateManyMutationInput, SetorUncheckedUpdateManyInput>
    /**
     * Filter which Setors to update
     */
    where?: SetorWhereInput
    /**
     * Limit how many Setors to update.
     */
    limit?: number
  }

  /**
   * Setor upsert
   */
  export type SetorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * The filter to search for the Setor to update in case it exists.
     */
    where: SetorWhereUniqueInput
    /**
     * In case the Setor found by the `where` argument doesn't exist, create a new Setor with this data.
     */
    create: XOR<SetorCreateInput, SetorUncheckedCreateInput>
    /**
     * In case the Setor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SetorUpdateInput, SetorUncheckedUpdateInput>
  }

  /**
   * Setor delete
   */
  export type SetorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
    /**
     * Filter which Setor to delete.
     */
    where: SetorWhereUniqueInput
  }

  /**
   * Setor deleteMany
   */
  export type SetorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setors to delete
     */
    where?: SetorWhereInput
    /**
     * Limit how many Setors to delete.
     */
    limit?: number
  }

  /**
   * Setor.users
   */
  export type Setor$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Setor without action
   */
  export type SetorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setor
     */
    select?: SetorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setor
     */
    omit?: SetorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetorInclude<ExtArgs> | null
  }


  /**
   * Model InstituicaoUnidade
   */

  export type AggregateInstituicaoUnidade = {
    _count: InstituicaoUnidadeCountAggregateOutputType | null
    _min: InstituicaoUnidadeMinAggregateOutputType | null
    _max: InstituicaoUnidadeMaxAggregateOutputType | null
  }

  export type InstituicaoUnidadeMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type InstituicaoUnidadeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type InstituicaoUnidadeCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type InstituicaoUnidadeMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type InstituicaoUnidadeMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type InstituicaoUnidadeCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type InstituicaoUnidadeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstituicaoUnidade to aggregate.
     */
    where?: InstituicaoUnidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstituicaoUnidades to fetch.
     */
    orderBy?: InstituicaoUnidadeOrderByWithRelationInput | InstituicaoUnidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstituicaoUnidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstituicaoUnidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstituicaoUnidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InstituicaoUnidades
    **/
    _count?: true | InstituicaoUnidadeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstituicaoUnidadeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstituicaoUnidadeMaxAggregateInputType
  }

  export type GetInstituicaoUnidadeAggregateType<T extends InstituicaoUnidadeAggregateArgs> = {
        [P in keyof T & keyof AggregateInstituicaoUnidade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstituicaoUnidade[P]>
      : GetScalarType<T[P], AggregateInstituicaoUnidade[P]>
  }




  export type InstituicaoUnidadeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstituicaoUnidadeWhereInput
    orderBy?: InstituicaoUnidadeOrderByWithAggregationInput | InstituicaoUnidadeOrderByWithAggregationInput[]
    by: InstituicaoUnidadeScalarFieldEnum[] | InstituicaoUnidadeScalarFieldEnum
    having?: InstituicaoUnidadeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstituicaoUnidadeCountAggregateInputType | true
    _min?: InstituicaoUnidadeMinAggregateInputType
    _max?: InstituicaoUnidadeMaxAggregateInputType
  }

  export type InstituicaoUnidadeGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: InstituicaoUnidadeCountAggregateOutputType | null
    _min: InstituicaoUnidadeMinAggregateOutputType | null
    _max: InstituicaoUnidadeMaxAggregateOutputType | null
  }

  type GetInstituicaoUnidadeGroupByPayload<T extends InstituicaoUnidadeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstituicaoUnidadeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstituicaoUnidadeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstituicaoUnidadeGroupByOutputType[P]>
            : GetScalarType<T[P], InstituicaoUnidadeGroupByOutputType[P]>
        }
      >
    >


  export type InstituicaoUnidadeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    users?: boolean | InstituicaoUnidade$usersArgs<ExtArgs>
    ordens?: boolean | InstituicaoUnidade$ordensArgs<ExtArgs>
    controlesdeAssistenciaTecnica?: boolean | InstituicaoUnidade$controlesdeAssistenciaTecnicaArgs<ExtArgs>
    controlesdeLaudoTecnico?: boolean | InstituicaoUnidade$controlesdeLaudoTecnicoArgs<ExtArgs>
    controlesDeLaboratio?: boolean | InstituicaoUnidade$controlesDeLaboratioArgs<ExtArgs>
    controlesDeMaquinasPendentesOro?: boolean | InstituicaoUnidade$controlesDeMaquinasPendentesOroArgs<ExtArgs>
    documentacoesTecnicas?: boolean | InstituicaoUnidade$documentacoesTecnicasArgs<ExtArgs>
    _count?: boolean | InstituicaoUnidadeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instituicaoUnidade"]>

  export type InstituicaoUnidadeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["instituicaoUnidade"]>

  export type InstituicaoUnidadeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["instituicaoUnidade"]>

  export type InstituicaoUnidadeSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type InstituicaoUnidadeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["instituicaoUnidade"]>
  export type InstituicaoUnidadeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | InstituicaoUnidade$usersArgs<ExtArgs>
    ordens?: boolean | InstituicaoUnidade$ordensArgs<ExtArgs>
    controlesdeAssistenciaTecnica?: boolean | InstituicaoUnidade$controlesdeAssistenciaTecnicaArgs<ExtArgs>
    controlesdeLaudoTecnico?: boolean | InstituicaoUnidade$controlesdeLaudoTecnicoArgs<ExtArgs>
    controlesDeLaboratio?: boolean | InstituicaoUnidade$controlesDeLaboratioArgs<ExtArgs>
    controlesDeMaquinasPendentesOro?: boolean | InstituicaoUnidade$controlesDeMaquinasPendentesOroArgs<ExtArgs>
    documentacoesTecnicas?: boolean | InstituicaoUnidade$documentacoesTecnicasArgs<ExtArgs>
    _count?: boolean | InstituicaoUnidadeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InstituicaoUnidadeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type InstituicaoUnidadeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InstituicaoUnidadePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InstituicaoUnidade"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      ordens: Prisma.$OrdemdeServicoPayload<ExtArgs>[]
      controlesdeAssistenciaTecnica: Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>[]
      controlesdeLaudoTecnico: Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>[]
      controlesDeLaboratio: Prisma.$controleDeLaboratioPayload<ExtArgs>[]
      controlesDeMaquinasPendentesOro: Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>[]
      documentacoesTecnicas: Prisma.$documentacaoTecnicaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["instituicaoUnidade"]>
    composites: {}
  }

  type InstituicaoUnidadeGetPayload<S extends boolean | null | undefined | InstituicaoUnidadeDefaultArgs> = $Result.GetResult<Prisma.$InstituicaoUnidadePayload, S>

  type InstituicaoUnidadeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InstituicaoUnidadeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InstituicaoUnidadeCountAggregateInputType | true
    }

  export interface InstituicaoUnidadeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstituicaoUnidade'], meta: { name: 'InstituicaoUnidade' } }
    /**
     * Find zero or one InstituicaoUnidade that matches the filter.
     * @param {InstituicaoUnidadeFindUniqueArgs} args - Arguments to find a InstituicaoUnidade
     * @example
     * // Get one InstituicaoUnidade
     * const instituicaoUnidade = await prisma.instituicaoUnidade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstituicaoUnidadeFindUniqueArgs>(args: SelectSubset<T, InstituicaoUnidadeFindUniqueArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InstituicaoUnidade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InstituicaoUnidadeFindUniqueOrThrowArgs} args - Arguments to find a InstituicaoUnidade
     * @example
     * // Get one InstituicaoUnidade
     * const instituicaoUnidade = await prisma.instituicaoUnidade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstituicaoUnidadeFindUniqueOrThrowArgs>(args: SelectSubset<T, InstituicaoUnidadeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InstituicaoUnidade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoUnidadeFindFirstArgs} args - Arguments to find a InstituicaoUnidade
     * @example
     * // Get one InstituicaoUnidade
     * const instituicaoUnidade = await prisma.instituicaoUnidade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstituicaoUnidadeFindFirstArgs>(args?: SelectSubset<T, InstituicaoUnidadeFindFirstArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InstituicaoUnidade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoUnidadeFindFirstOrThrowArgs} args - Arguments to find a InstituicaoUnidade
     * @example
     * // Get one InstituicaoUnidade
     * const instituicaoUnidade = await prisma.instituicaoUnidade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstituicaoUnidadeFindFirstOrThrowArgs>(args?: SelectSubset<T, InstituicaoUnidadeFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InstituicaoUnidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoUnidadeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InstituicaoUnidades
     * const instituicaoUnidades = await prisma.instituicaoUnidade.findMany()
     * 
     * // Get first 10 InstituicaoUnidades
     * const instituicaoUnidades = await prisma.instituicaoUnidade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instituicaoUnidadeWithIdOnly = await prisma.instituicaoUnidade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InstituicaoUnidadeFindManyArgs>(args?: SelectSubset<T, InstituicaoUnidadeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InstituicaoUnidade.
     * @param {InstituicaoUnidadeCreateArgs} args - Arguments to create a InstituicaoUnidade.
     * @example
     * // Create one InstituicaoUnidade
     * const InstituicaoUnidade = await prisma.instituicaoUnidade.create({
     *   data: {
     *     // ... data to create a InstituicaoUnidade
     *   }
     * })
     * 
     */
    create<T extends InstituicaoUnidadeCreateArgs>(args: SelectSubset<T, InstituicaoUnidadeCreateArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InstituicaoUnidades.
     * @param {InstituicaoUnidadeCreateManyArgs} args - Arguments to create many InstituicaoUnidades.
     * @example
     * // Create many InstituicaoUnidades
     * const instituicaoUnidade = await prisma.instituicaoUnidade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstituicaoUnidadeCreateManyArgs>(args?: SelectSubset<T, InstituicaoUnidadeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InstituicaoUnidades and returns the data saved in the database.
     * @param {InstituicaoUnidadeCreateManyAndReturnArgs} args - Arguments to create many InstituicaoUnidades.
     * @example
     * // Create many InstituicaoUnidades
     * const instituicaoUnidade = await prisma.instituicaoUnidade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InstituicaoUnidades and only return the `id`
     * const instituicaoUnidadeWithIdOnly = await prisma.instituicaoUnidade.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstituicaoUnidadeCreateManyAndReturnArgs>(args?: SelectSubset<T, InstituicaoUnidadeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InstituicaoUnidade.
     * @param {InstituicaoUnidadeDeleteArgs} args - Arguments to delete one InstituicaoUnidade.
     * @example
     * // Delete one InstituicaoUnidade
     * const InstituicaoUnidade = await prisma.instituicaoUnidade.delete({
     *   where: {
     *     // ... filter to delete one InstituicaoUnidade
     *   }
     * })
     * 
     */
    delete<T extends InstituicaoUnidadeDeleteArgs>(args: SelectSubset<T, InstituicaoUnidadeDeleteArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InstituicaoUnidade.
     * @param {InstituicaoUnidadeUpdateArgs} args - Arguments to update one InstituicaoUnidade.
     * @example
     * // Update one InstituicaoUnidade
     * const instituicaoUnidade = await prisma.instituicaoUnidade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstituicaoUnidadeUpdateArgs>(args: SelectSubset<T, InstituicaoUnidadeUpdateArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InstituicaoUnidades.
     * @param {InstituicaoUnidadeDeleteManyArgs} args - Arguments to filter InstituicaoUnidades to delete.
     * @example
     * // Delete a few InstituicaoUnidades
     * const { count } = await prisma.instituicaoUnidade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstituicaoUnidadeDeleteManyArgs>(args?: SelectSubset<T, InstituicaoUnidadeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstituicaoUnidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoUnidadeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InstituicaoUnidades
     * const instituicaoUnidade = await prisma.instituicaoUnidade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstituicaoUnidadeUpdateManyArgs>(args: SelectSubset<T, InstituicaoUnidadeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstituicaoUnidades and returns the data updated in the database.
     * @param {InstituicaoUnidadeUpdateManyAndReturnArgs} args - Arguments to update many InstituicaoUnidades.
     * @example
     * // Update many InstituicaoUnidades
     * const instituicaoUnidade = await prisma.instituicaoUnidade.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InstituicaoUnidades and only return the `id`
     * const instituicaoUnidadeWithIdOnly = await prisma.instituicaoUnidade.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InstituicaoUnidadeUpdateManyAndReturnArgs>(args: SelectSubset<T, InstituicaoUnidadeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InstituicaoUnidade.
     * @param {InstituicaoUnidadeUpsertArgs} args - Arguments to update or create a InstituicaoUnidade.
     * @example
     * // Update or create a InstituicaoUnidade
     * const instituicaoUnidade = await prisma.instituicaoUnidade.upsert({
     *   create: {
     *     // ... data to create a InstituicaoUnidade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InstituicaoUnidade we want to update
     *   }
     * })
     */
    upsert<T extends InstituicaoUnidadeUpsertArgs>(args: SelectSubset<T, InstituicaoUnidadeUpsertArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InstituicaoUnidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoUnidadeCountArgs} args - Arguments to filter InstituicaoUnidades to count.
     * @example
     * // Count the number of InstituicaoUnidades
     * const count = await prisma.instituicaoUnidade.count({
     *   where: {
     *     // ... the filter for the InstituicaoUnidades we want to count
     *   }
     * })
    **/
    count<T extends InstituicaoUnidadeCountArgs>(
      args?: Subset<T, InstituicaoUnidadeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstituicaoUnidadeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InstituicaoUnidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoUnidadeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstituicaoUnidadeAggregateArgs>(args: Subset<T, InstituicaoUnidadeAggregateArgs>): Prisma.PrismaPromise<GetInstituicaoUnidadeAggregateType<T>>

    /**
     * Group by InstituicaoUnidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoUnidadeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstituicaoUnidadeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstituicaoUnidadeGroupByArgs['orderBy'] }
        : { orderBy?: InstituicaoUnidadeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstituicaoUnidadeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstituicaoUnidadeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InstituicaoUnidade model
   */
  readonly fields: InstituicaoUnidadeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InstituicaoUnidade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstituicaoUnidadeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends InstituicaoUnidade$usersArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidade$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ordens<T extends InstituicaoUnidade$ordensArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidade$ordensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesdeAssistenciaTecnica<T extends InstituicaoUnidade$controlesdeAssistenciaTecnicaArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidade$controlesdeAssistenciaTecnicaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesdeLaudoTecnico<T extends InstituicaoUnidade$controlesdeLaudoTecnicoArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidade$controlesdeLaudoTecnicoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesDeLaboratio<T extends InstituicaoUnidade$controlesDeLaboratioArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidade$controlesDeLaboratioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesDeMaquinasPendentesOro<T extends InstituicaoUnidade$controlesDeMaquinasPendentesOroArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidade$controlesDeMaquinasPendentesOroArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documentacoesTecnicas<T extends InstituicaoUnidade$documentacoesTecnicasArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidade$documentacoesTecnicasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InstituicaoUnidade model
   */
  interface InstituicaoUnidadeFieldRefs {
    readonly id: FieldRef<"InstituicaoUnidade", 'String'>
    readonly name: FieldRef<"InstituicaoUnidade", 'String'>
    readonly create_at: FieldRef<"InstituicaoUnidade", 'DateTime'>
    readonly updated_at: FieldRef<"InstituicaoUnidade", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InstituicaoUnidade findUnique
   */
  export type InstituicaoUnidadeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    /**
     * Filter, which InstituicaoUnidade to fetch.
     */
    where: InstituicaoUnidadeWhereUniqueInput
  }

  /**
   * InstituicaoUnidade findUniqueOrThrow
   */
  export type InstituicaoUnidadeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    /**
     * Filter, which InstituicaoUnidade to fetch.
     */
    where: InstituicaoUnidadeWhereUniqueInput
  }

  /**
   * InstituicaoUnidade findFirst
   */
  export type InstituicaoUnidadeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    /**
     * Filter, which InstituicaoUnidade to fetch.
     */
    where?: InstituicaoUnidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstituicaoUnidades to fetch.
     */
    orderBy?: InstituicaoUnidadeOrderByWithRelationInput | InstituicaoUnidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstituicaoUnidades.
     */
    cursor?: InstituicaoUnidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstituicaoUnidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstituicaoUnidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstituicaoUnidades.
     */
    distinct?: InstituicaoUnidadeScalarFieldEnum | InstituicaoUnidadeScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade findFirstOrThrow
   */
  export type InstituicaoUnidadeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    /**
     * Filter, which InstituicaoUnidade to fetch.
     */
    where?: InstituicaoUnidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstituicaoUnidades to fetch.
     */
    orderBy?: InstituicaoUnidadeOrderByWithRelationInput | InstituicaoUnidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstituicaoUnidades.
     */
    cursor?: InstituicaoUnidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstituicaoUnidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstituicaoUnidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstituicaoUnidades.
     */
    distinct?: InstituicaoUnidadeScalarFieldEnum | InstituicaoUnidadeScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade findMany
   */
  export type InstituicaoUnidadeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    /**
     * Filter, which InstituicaoUnidades to fetch.
     */
    where?: InstituicaoUnidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstituicaoUnidades to fetch.
     */
    orderBy?: InstituicaoUnidadeOrderByWithRelationInput | InstituicaoUnidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InstituicaoUnidades.
     */
    cursor?: InstituicaoUnidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstituicaoUnidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstituicaoUnidades.
     */
    skip?: number
    distinct?: InstituicaoUnidadeScalarFieldEnum | InstituicaoUnidadeScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade create
   */
  export type InstituicaoUnidadeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    /**
     * The data needed to create a InstituicaoUnidade.
     */
    data: XOR<InstituicaoUnidadeCreateInput, InstituicaoUnidadeUncheckedCreateInput>
  }

  /**
   * InstituicaoUnidade createMany
   */
  export type InstituicaoUnidadeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InstituicaoUnidades.
     */
    data: InstituicaoUnidadeCreateManyInput | InstituicaoUnidadeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InstituicaoUnidade createManyAndReturn
   */
  export type InstituicaoUnidadeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * The data used to create many InstituicaoUnidades.
     */
    data: InstituicaoUnidadeCreateManyInput | InstituicaoUnidadeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InstituicaoUnidade update
   */
  export type InstituicaoUnidadeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    /**
     * The data needed to update a InstituicaoUnidade.
     */
    data: XOR<InstituicaoUnidadeUpdateInput, InstituicaoUnidadeUncheckedUpdateInput>
    /**
     * Choose, which InstituicaoUnidade to update.
     */
    where: InstituicaoUnidadeWhereUniqueInput
  }

  /**
   * InstituicaoUnidade updateMany
   */
  export type InstituicaoUnidadeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InstituicaoUnidades.
     */
    data: XOR<InstituicaoUnidadeUpdateManyMutationInput, InstituicaoUnidadeUncheckedUpdateManyInput>
    /**
     * Filter which InstituicaoUnidades to update
     */
    where?: InstituicaoUnidadeWhereInput
    /**
     * Limit how many InstituicaoUnidades to update.
     */
    limit?: number
  }

  /**
   * InstituicaoUnidade updateManyAndReturn
   */
  export type InstituicaoUnidadeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * The data used to update InstituicaoUnidades.
     */
    data: XOR<InstituicaoUnidadeUpdateManyMutationInput, InstituicaoUnidadeUncheckedUpdateManyInput>
    /**
     * Filter which InstituicaoUnidades to update
     */
    where?: InstituicaoUnidadeWhereInput
    /**
     * Limit how many InstituicaoUnidades to update.
     */
    limit?: number
  }

  /**
   * InstituicaoUnidade upsert
   */
  export type InstituicaoUnidadeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    /**
     * The filter to search for the InstituicaoUnidade to update in case it exists.
     */
    where: InstituicaoUnidadeWhereUniqueInput
    /**
     * In case the InstituicaoUnidade found by the `where` argument doesn't exist, create a new InstituicaoUnidade with this data.
     */
    create: XOR<InstituicaoUnidadeCreateInput, InstituicaoUnidadeUncheckedCreateInput>
    /**
     * In case the InstituicaoUnidade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstituicaoUnidadeUpdateInput, InstituicaoUnidadeUncheckedUpdateInput>
  }

  /**
   * InstituicaoUnidade delete
   */
  export type InstituicaoUnidadeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    /**
     * Filter which InstituicaoUnidade to delete.
     */
    where: InstituicaoUnidadeWhereUniqueInput
  }

  /**
   * InstituicaoUnidade deleteMany
   */
  export type InstituicaoUnidadeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstituicaoUnidades to delete
     */
    where?: InstituicaoUnidadeWhereInput
    /**
     * Limit how many InstituicaoUnidades to delete.
     */
    limit?: number
  }

  /**
   * InstituicaoUnidade.users
   */
  export type InstituicaoUnidade$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade.ordens
   */
  export type InstituicaoUnidade$ordensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    where?: OrdemdeServicoWhereInput
    orderBy?: OrdemdeServicoOrderByWithRelationInput | OrdemdeServicoOrderByWithRelationInput[]
    cursor?: OrdemdeServicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdemdeServicoScalarFieldEnum | OrdemdeServicoScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade.controlesdeAssistenciaTecnica
   */
  export type InstituicaoUnidade$controlesdeAssistenciaTecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    where?: controleDeAssistenciaTecnicaWhereInput
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeAssistenciaTecnicaScalarFieldEnum | ControleDeAssistenciaTecnicaScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade.controlesdeLaudoTecnico
   */
  export type InstituicaoUnidade$controlesdeLaudoTecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    where?: controleDeLaudoTecnicoWhereInput
    orderBy?: controleDeLaudoTecnicoOrderByWithRelationInput | controleDeLaudoTecnicoOrderByWithRelationInput[]
    cursor?: controleDeLaudoTecnicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeLaudoTecnicoScalarFieldEnum | ControleDeLaudoTecnicoScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade.controlesDeLaboratio
   */
  export type InstituicaoUnidade$controlesDeLaboratioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    where?: controleDeLaboratioWhereInput
    orderBy?: controleDeLaboratioOrderByWithRelationInput | controleDeLaboratioOrderByWithRelationInput[]
    cursor?: controleDeLaboratioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeLaboratioScalarFieldEnum | ControleDeLaboratioScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade.controlesDeMaquinasPendentesOro
   */
  export type InstituicaoUnidade$controlesDeMaquinasPendentesOroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    where?: controledeMaquinasPendentesOroWhereInput
    orderBy?: controledeMaquinasPendentesOroOrderByWithRelationInput | controledeMaquinasPendentesOroOrderByWithRelationInput[]
    cursor?: controledeMaquinasPendentesOroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControledeMaquinasPendentesOroScalarFieldEnum | ControledeMaquinasPendentesOroScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade.documentacoesTecnicas
   */
  export type InstituicaoUnidade$documentacoesTecnicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    where?: documentacaoTecnicaWhereInput
    orderBy?: documentacaoTecnicaOrderByWithRelationInput | documentacaoTecnicaOrderByWithRelationInput[]
    cursor?: documentacaoTecnicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentacaoTecnicaScalarFieldEnum | DocumentacaoTecnicaScalarFieldEnum[]
  }

  /**
   * InstituicaoUnidade without action
   */
  export type InstituicaoUnidadeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
  }


  /**
   * Model statusOrdemdeServico
   */

  export type AggregateStatusOrdemdeServico = {
    _count: StatusOrdemdeServicoCountAggregateOutputType | null
    _min: StatusOrdemdeServicoMinAggregateOutputType | null
    _max: StatusOrdemdeServicoMaxAggregateOutputType | null
  }

  export type StatusOrdemdeServicoMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusOrdemdeServicoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusOrdemdeServicoCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type StatusOrdemdeServicoMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusOrdemdeServicoMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusOrdemdeServicoCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type StatusOrdemdeServicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusOrdemdeServico to aggregate.
     */
    where?: statusOrdemdeServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusOrdemdeServicos to fetch.
     */
    orderBy?: statusOrdemdeServicoOrderByWithRelationInput | statusOrdemdeServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusOrdemdeServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusOrdemdeServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusOrdemdeServicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statusOrdemdeServicos
    **/
    _count?: true | StatusOrdemdeServicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusOrdemdeServicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusOrdemdeServicoMaxAggregateInputType
  }

  export type GetStatusOrdemdeServicoAggregateType<T extends StatusOrdemdeServicoAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusOrdemdeServico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusOrdemdeServico[P]>
      : GetScalarType<T[P], AggregateStatusOrdemdeServico[P]>
  }




  export type statusOrdemdeServicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: statusOrdemdeServicoWhereInput
    orderBy?: statusOrdemdeServicoOrderByWithAggregationInput | statusOrdemdeServicoOrderByWithAggregationInput[]
    by: StatusOrdemdeServicoScalarFieldEnum[] | StatusOrdemdeServicoScalarFieldEnum
    having?: statusOrdemdeServicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusOrdemdeServicoCountAggregateInputType | true
    _min?: StatusOrdemdeServicoMinAggregateInputType
    _max?: StatusOrdemdeServicoMaxAggregateInputType
  }

  export type StatusOrdemdeServicoGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: StatusOrdemdeServicoCountAggregateOutputType | null
    _min: StatusOrdemdeServicoMinAggregateOutputType | null
    _max: StatusOrdemdeServicoMaxAggregateOutputType | null
  }

  type GetStatusOrdemdeServicoGroupByPayload<T extends statusOrdemdeServicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusOrdemdeServicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusOrdemdeServicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusOrdemdeServicoGroupByOutputType[P]>
            : GetScalarType<T[P], StatusOrdemdeServicoGroupByOutputType[P]>
        }
      >
    >


  export type statusOrdemdeServicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    ordens?: boolean | statusOrdemdeServico$ordensArgs<ExtArgs>
    formstecnico?: boolean | statusOrdemdeServico$formstecnicoArgs<ExtArgs>
    _count?: boolean | StatusOrdemdeServicoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusOrdemdeServico"]>

  export type statusOrdemdeServicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusOrdemdeServico"]>

  export type statusOrdemdeServicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusOrdemdeServico"]>

  export type statusOrdemdeServicoSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type statusOrdemdeServicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["statusOrdemdeServico"]>
  export type statusOrdemdeServicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ordens?: boolean | statusOrdemdeServico$ordensArgs<ExtArgs>
    formstecnico?: boolean | statusOrdemdeServico$formstecnicoArgs<ExtArgs>
    _count?: boolean | StatusOrdemdeServicoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type statusOrdemdeServicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type statusOrdemdeServicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $statusOrdemdeServicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "statusOrdemdeServico"
    objects: {
      ordens: Prisma.$OrdemdeServicoPayload<ExtArgs>[]
      formstecnico: Prisma.$FormTecnicoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["statusOrdemdeServico"]>
    composites: {}
  }

  type statusOrdemdeServicoGetPayload<S extends boolean | null | undefined | statusOrdemdeServicoDefaultArgs> = $Result.GetResult<Prisma.$statusOrdemdeServicoPayload, S>

  type statusOrdemdeServicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<statusOrdemdeServicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusOrdemdeServicoCountAggregateInputType | true
    }

  export interface statusOrdemdeServicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['statusOrdemdeServico'], meta: { name: 'statusOrdemdeServico' } }
    /**
     * Find zero or one StatusOrdemdeServico that matches the filter.
     * @param {statusOrdemdeServicoFindUniqueArgs} args - Arguments to find a StatusOrdemdeServico
     * @example
     * // Get one StatusOrdemdeServico
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends statusOrdemdeServicoFindUniqueArgs>(args: SelectSubset<T, statusOrdemdeServicoFindUniqueArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusOrdemdeServico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {statusOrdemdeServicoFindUniqueOrThrowArgs} args - Arguments to find a StatusOrdemdeServico
     * @example
     * // Get one StatusOrdemdeServico
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends statusOrdemdeServicoFindUniqueOrThrowArgs>(args: SelectSubset<T, statusOrdemdeServicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusOrdemdeServico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusOrdemdeServicoFindFirstArgs} args - Arguments to find a StatusOrdemdeServico
     * @example
     * // Get one StatusOrdemdeServico
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends statusOrdemdeServicoFindFirstArgs>(args?: SelectSubset<T, statusOrdemdeServicoFindFirstArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusOrdemdeServico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusOrdemdeServicoFindFirstOrThrowArgs} args - Arguments to find a StatusOrdemdeServico
     * @example
     * // Get one StatusOrdemdeServico
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends statusOrdemdeServicoFindFirstOrThrowArgs>(args?: SelectSubset<T, statusOrdemdeServicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusOrdemdeServicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusOrdemdeServicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusOrdemdeServicos
     * const statusOrdemdeServicos = await prisma.statusOrdemdeServico.findMany()
     * 
     * // Get first 10 StatusOrdemdeServicos
     * const statusOrdemdeServicos = await prisma.statusOrdemdeServico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusOrdemdeServicoWithIdOnly = await prisma.statusOrdemdeServico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends statusOrdemdeServicoFindManyArgs>(args?: SelectSubset<T, statusOrdemdeServicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusOrdemdeServico.
     * @param {statusOrdemdeServicoCreateArgs} args - Arguments to create a StatusOrdemdeServico.
     * @example
     * // Create one StatusOrdemdeServico
     * const StatusOrdemdeServico = await prisma.statusOrdemdeServico.create({
     *   data: {
     *     // ... data to create a StatusOrdemdeServico
     *   }
     * })
     * 
     */
    create<T extends statusOrdemdeServicoCreateArgs>(args: SelectSubset<T, statusOrdemdeServicoCreateArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusOrdemdeServicos.
     * @param {statusOrdemdeServicoCreateManyArgs} args - Arguments to create many StatusOrdemdeServicos.
     * @example
     * // Create many StatusOrdemdeServicos
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends statusOrdemdeServicoCreateManyArgs>(args?: SelectSubset<T, statusOrdemdeServicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusOrdemdeServicos and returns the data saved in the database.
     * @param {statusOrdemdeServicoCreateManyAndReturnArgs} args - Arguments to create many StatusOrdemdeServicos.
     * @example
     * // Create many StatusOrdemdeServicos
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusOrdemdeServicos and only return the `id`
     * const statusOrdemdeServicoWithIdOnly = await prisma.statusOrdemdeServico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends statusOrdemdeServicoCreateManyAndReturnArgs>(args?: SelectSubset<T, statusOrdemdeServicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusOrdemdeServico.
     * @param {statusOrdemdeServicoDeleteArgs} args - Arguments to delete one StatusOrdemdeServico.
     * @example
     * // Delete one StatusOrdemdeServico
     * const StatusOrdemdeServico = await prisma.statusOrdemdeServico.delete({
     *   where: {
     *     // ... filter to delete one StatusOrdemdeServico
     *   }
     * })
     * 
     */
    delete<T extends statusOrdemdeServicoDeleteArgs>(args: SelectSubset<T, statusOrdemdeServicoDeleteArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusOrdemdeServico.
     * @param {statusOrdemdeServicoUpdateArgs} args - Arguments to update one StatusOrdemdeServico.
     * @example
     * // Update one StatusOrdemdeServico
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends statusOrdemdeServicoUpdateArgs>(args: SelectSubset<T, statusOrdemdeServicoUpdateArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusOrdemdeServicos.
     * @param {statusOrdemdeServicoDeleteManyArgs} args - Arguments to filter StatusOrdemdeServicos to delete.
     * @example
     * // Delete a few StatusOrdemdeServicos
     * const { count } = await prisma.statusOrdemdeServico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends statusOrdemdeServicoDeleteManyArgs>(args?: SelectSubset<T, statusOrdemdeServicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusOrdemdeServicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusOrdemdeServicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusOrdemdeServicos
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends statusOrdemdeServicoUpdateManyArgs>(args: SelectSubset<T, statusOrdemdeServicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusOrdemdeServicos and returns the data updated in the database.
     * @param {statusOrdemdeServicoUpdateManyAndReturnArgs} args - Arguments to update many StatusOrdemdeServicos.
     * @example
     * // Update many StatusOrdemdeServicos
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusOrdemdeServicos and only return the `id`
     * const statusOrdemdeServicoWithIdOnly = await prisma.statusOrdemdeServico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends statusOrdemdeServicoUpdateManyAndReturnArgs>(args: SelectSubset<T, statusOrdemdeServicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusOrdemdeServico.
     * @param {statusOrdemdeServicoUpsertArgs} args - Arguments to update or create a StatusOrdemdeServico.
     * @example
     * // Update or create a StatusOrdemdeServico
     * const statusOrdemdeServico = await prisma.statusOrdemdeServico.upsert({
     *   create: {
     *     // ... data to create a StatusOrdemdeServico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusOrdemdeServico we want to update
     *   }
     * })
     */
    upsert<T extends statusOrdemdeServicoUpsertArgs>(args: SelectSubset<T, statusOrdemdeServicoUpsertArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusOrdemdeServicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusOrdemdeServicoCountArgs} args - Arguments to filter StatusOrdemdeServicos to count.
     * @example
     * // Count the number of StatusOrdemdeServicos
     * const count = await prisma.statusOrdemdeServico.count({
     *   where: {
     *     // ... the filter for the StatusOrdemdeServicos we want to count
     *   }
     * })
    **/
    count<T extends statusOrdemdeServicoCountArgs>(
      args?: Subset<T, statusOrdemdeServicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusOrdemdeServicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusOrdemdeServico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusOrdemdeServicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusOrdemdeServicoAggregateArgs>(args: Subset<T, StatusOrdemdeServicoAggregateArgs>): Prisma.PrismaPromise<GetStatusOrdemdeServicoAggregateType<T>>

    /**
     * Group by StatusOrdemdeServico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusOrdemdeServicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends statusOrdemdeServicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: statusOrdemdeServicoGroupByArgs['orderBy'] }
        : { orderBy?: statusOrdemdeServicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, statusOrdemdeServicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusOrdemdeServicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the statusOrdemdeServico model
   */
  readonly fields: statusOrdemdeServicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for statusOrdemdeServico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__statusOrdemdeServicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ordens<T extends statusOrdemdeServico$ordensArgs<ExtArgs> = {}>(args?: Subset<T, statusOrdemdeServico$ordensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    formstecnico<T extends statusOrdemdeServico$formstecnicoArgs<ExtArgs> = {}>(args?: Subset<T, statusOrdemdeServico$formstecnicoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the statusOrdemdeServico model
   */
  interface statusOrdemdeServicoFieldRefs {
    readonly id: FieldRef<"statusOrdemdeServico", 'String'>
    readonly name: FieldRef<"statusOrdemdeServico", 'String'>
    readonly create_at: FieldRef<"statusOrdemdeServico", 'DateTime'>
    readonly updated_at: FieldRef<"statusOrdemdeServico", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * statusOrdemdeServico findUnique
   */
  export type statusOrdemdeServicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which statusOrdemdeServico to fetch.
     */
    where: statusOrdemdeServicoWhereUniqueInput
  }

  /**
   * statusOrdemdeServico findUniqueOrThrow
   */
  export type statusOrdemdeServicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which statusOrdemdeServico to fetch.
     */
    where: statusOrdemdeServicoWhereUniqueInput
  }

  /**
   * statusOrdemdeServico findFirst
   */
  export type statusOrdemdeServicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which statusOrdemdeServico to fetch.
     */
    where?: statusOrdemdeServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusOrdemdeServicos to fetch.
     */
    orderBy?: statusOrdemdeServicoOrderByWithRelationInput | statusOrdemdeServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusOrdemdeServicos.
     */
    cursor?: statusOrdemdeServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusOrdemdeServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusOrdemdeServicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusOrdemdeServicos.
     */
    distinct?: StatusOrdemdeServicoScalarFieldEnum | StatusOrdemdeServicoScalarFieldEnum[]
  }

  /**
   * statusOrdemdeServico findFirstOrThrow
   */
  export type statusOrdemdeServicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which statusOrdemdeServico to fetch.
     */
    where?: statusOrdemdeServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusOrdemdeServicos to fetch.
     */
    orderBy?: statusOrdemdeServicoOrderByWithRelationInput | statusOrdemdeServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusOrdemdeServicos.
     */
    cursor?: statusOrdemdeServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusOrdemdeServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusOrdemdeServicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusOrdemdeServicos.
     */
    distinct?: StatusOrdemdeServicoScalarFieldEnum | StatusOrdemdeServicoScalarFieldEnum[]
  }

  /**
   * statusOrdemdeServico findMany
   */
  export type statusOrdemdeServicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which statusOrdemdeServicos to fetch.
     */
    where?: statusOrdemdeServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusOrdemdeServicos to fetch.
     */
    orderBy?: statusOrdemdeServicoOrderByWithRelationInput | statusOrdemdeServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statusOrdemdeServicos.
     */
    cursor?: statusOrdemdeServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusOrdemdeServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusOrdemdeServicos.
     */
    skip?: number
    distinct?: StatusOrdemdeServicoScalarFieldEnum | StatusOrdemdeServicoScalarFieldEnum[]
  }

  /**
   * statusOrdemdeServico create
   */
  export type statusOrdemdeServicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
    /**
     * The data needed to create a statusOrdemdeServico.
     */
    data: XOR<statusOrdemdeServicoCreateInput, statusOrdemdeServicoUncheckedCreateInput>
  }

  /**
   * statusOrdemdeServico createMany
   */
  export type statusOrdemdeServicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many statusOrdemdeServicos.
     */
    data: statusOrdemdeServicoCreateManyInput | statusOrdemdeServicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusOrdemdeServico createManyAndReturn
   */
  export type statusOrdemdeServicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * The data used to create many statusOrdemdeServicos.
     */
    data: statusOrdemdeServicoCreateManyInput | statusOrdemdeServicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusOrdemdeServico update
   */
  export type statusOrdemdeServicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
    /**
     * The data needed to update a statusOrdemdeServico.
     */
    data: XOR<statusOrdemdeServicoUpdateInput, statusOrdemdeServicoUncheckedUpdateInput>
    /**
     * Choose, which statusOrdemdeServico to update.
     */
    where: statusOrdemdeServicoWhereUniqueInput
  }

  /**
   * statusOrdemdeServico updateMany
   */
  export type statusOrdemdeServicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update statusOrdemdeServicos.
     */
    data: XOR<statusOrdemdeServicoUpdateManyMutationInput, statusOrdemdeServicoUncheckedUpdateManyInput>
    /**
     * Filter which statusOrdemdeServicos to update
     */
    where?: statusOrdemdeServicoWhereInput
    /**
     * Limit how many statusOrdemdeServicos to update.
     */
    limit?: number
  }

  /**
   * statusOrdemdeServico updateManyAndReturn
   */
  export type statusOrdemdeServicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * The data used to update statusOrdemdeServicos.
     */
    data: XOR<statusOrdemdeServicoUpdateManyMutationInput, statusOrdemdeServicoUncheckedUpdateManyInput>
    /**
     * Filter which statusOrdemdeServicos to update
     */
    where?: statusOrdemdeServicoWhereInput
    /**
     * Limit how many statusOrdemdeServicos to update.
     */
    limit?: number
  }

  /**
   * statusOrdemdeServico upsert
   */
  export type statusOrdemdeServicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
    /**
     * The filter to search for the statusOrdemdeServico to update in case it exists.
     */
    where: statusOrdemdeServicoWhereUniqueInput
    /**
     * In case the statusOrdemdeServico found by the `where` argument doesn't exist, create a new statusOrdemdeServico with this data.
     */
    create: XOR<statusOrdemdeServicoCreateInput, statusOrdemdeServicoUncheckedCreateInput>
    /**
     * In case the statusOrdemdeServico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusOrdemdeServicoUpdateInput, statusOrdemdeServicoUncheckedUpdateInput>
  }

  /**
   * statusOrdemdeServico delete
   */
  export type statusOrdemdeServicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter which statusOrdemdeServico to delete.
     */
    where: statusOrdemdeServicoWhereUniqueInput
  }

  /**
   * statusOrdemdeServico deleteMany
   */
  export type statusOrdemdeServicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusOrdemdeServicos to delete
     */
    where?: statusOrdemdeServicoWhereInput
    /**
     * Limit how many statusOrdemdeServicos to delete.
     */
    limit?: number
  }

  /**
   * statusOrdemdeServico.ordens
   */
  export type statusOrdemdeServico$ordensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    where?: OrdemdeServicoWhereInput
    orderBy?: OrdemdeServicoOrderByWithRelationInput | OrdemdeServicoOrderByWithRelationInput[]
    cursor?: OrdemdeServicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdemdeServicoScalarFieldEnum | OrdemdeServicoScalarFieldEnum[]
  }

  /**
   * statusOrdemdeServico.formstecnico
   */
  export type statusOrdemdeServico$formstecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    where?: FormTecnicoWhereInput
    orderBy?: FormTecnicoOrderByWithRelationInput | FormTecnicoOrderByWithRelationInput[]
    cursor?: FormTecnicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FormTecnicoScalarFieldEnum | FormTecnicoScalarFieldEnum[]
  }

  /**
   * statusOrdemdeServico without action
   */
  export type statusOrdemdeServicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusOrdemdeServico
     */
    select?: statusOrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusOrdemdeServico
     */
    omit?: statusOrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusOrdemdeServicoInclude<ExtArgs> | null
  }


  /**
   * Model TipodeSolicitacao
   */

  export type AggregateTipodeSolicitacao = {
    _count: TipodeSolicitacaoCountAggregateOutputType | null
    _min: TipodeSolicitacaoMinAggregateOutputType | null
    _max: TipodeSolicitacaoMaxAggregateOutputType | null
  }

  export type TipodeSolicitacaoMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type TipodeSolicitacaoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type TipodeSolicitacaoCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type TipodeSolicitacaoMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type TipodeSolicitacaoMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type TipodeSolicitacaoCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type TipodeSolicitacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipodeSolicitacao to aggregate.
     */
    where?: TipodeSolicitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipodeSolicitacaos to fetch.
     */
    orderBy?: TipodeSolicitacaoOrderByWithRelationInput | TipodeSolicitacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipodeSolicitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipodeSolicitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipodeSolicitacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipodeSolicitacaos
    **/
    _count?: true | TipodeSolicitacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipodeSolicitacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipodeSolicitacaoMaxAggregateInputType
  }

  export type GetTipodeSolicitacaoAggregateType<T extends TipodeSolicitacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateTipodeSolicitacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipodeSolicitacao[P]>
      : GetScalarType<T[P], AggregateTipodeSolicitacao[P]>
  }




  export type TipodeSolicitacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipodeSolicitacaoWhereInput
    orderBy?: TipodeSolicitacaoOrderByWithAggregationInput | TipodeSolicitacaoOrderByWithAggregationInput[]
    by: TipodeSolicitacaoScalarFieldEnum[] | TipodeSolicitacaoScalarFieldEnum
    having?: TipodeSolicitacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipodeSolicitacaoCountAggregateInputType | true
    _min?: TipodeSolicitacaoMinAggregateInputType
    _max?: TipodeSolicitacaoMaxAggregateInputType
  }

  export type TipodeSolicitacaoGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: TipodeSolicitacaoCountAggregateOutputType | null
    _min: TipodeSolicitacaoMinAggregateOutputType | null
    _max: TipodeSolicitacaoMaxAggregateOutputType | null
  }

  type GetTipodeSolicitacaoGroupByPayload<T extends TipodeSolicitacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipodeSolicitacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipodeSolicitacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipodeSolicitacaoGroupByOutputType[P]>
            : GetScalarType<T[P], TipodeSolicitacaoGroupByOutputType[P]>
        }
      >
    >


  export type TipodeSolicitacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    ordens?: boolean | TipodeSolicitacao$ordensArgs<ExtArgs>
    _count?: boolean | TipodeSolicitacaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipodeSolicitacao"]>

  export type TipodeSolicitacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["tipodeSolicitacao"]>

  export type TipodeSolicitacaoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["tipodeSolicitacao"]>

  export type TipodeSolicitacaoSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type TipodeSolicitacaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["tipodeSolicitacao"]>
  export type TipodeSolicitacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ordens?: boolean | TipodeSolicitacao$ordensArgs<ExtArgs>
    _count?: boolean | TipodeSolicitacaoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TipodeSolicitacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TipodeSolicitacaoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TipodeSolicitacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipodeSolicitacao"
    objects: {
      ordens: Prisma.$OrdemdeServicoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["tipodeSolicitacao"]>
    composites: {}
  }

  type TipodeSolicitacaoGetPayload<S extends boolean | null | undefined | TipodeSolicitacaoDefaultArgs> = $Result.GetResult<Prisma.$TipodeSolicitacaoPayload, S>

  type TipodeSolicitacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TipodeSolicitacaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TipodeSolicitacaoCountAggregateInputType | true
    }

  export interface TipodeSolicitacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipodeSolicitacao'], meta: { name: 'TipodeSolicitacao' } }
    /**
     * Find zero or one TipodeSolicitacao that matches the filter.
     * @param {TipodeSolicitacaoFindUniqueArgs} args - Arguments to find a TipodeSolicitacao
     * @example
     * // Get one TipodeSolicitacao
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TipodeSolicitacaoFindUniqueArgs>(args: SelectSubset<T, TipodeSolicitacaoFindUniqueArgs<ExtArgs>>): Prisma__TipodeSolicitacaoClient<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TipodeSolicitacao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TipodeSolicitacaoFindUniqueOrThrowArgs} args - Arguments to find a TipodeSolicitacao
     * @example
     * // Get one TipodeSolicitacao
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TipodeSolicitacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, TipodeSolicitacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TipodeSolicitacaoClient<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TipodeSolicitacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipodeSolicitacaoFindFirstArgs} args - Arguments to find a TipodeSolicitacao
     * @example
     * // Get one TipodeSolicitacao
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TipodeSolicitacaoFindFirstArgs>(args?: SelectSubset<T, TipodeSolicitacaoFindFirstArgs<ExtArgs>>): Prisma__TipodeSolicitacaoClient<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TipodeSolicitacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipodeSolicitacaoFindFirstOrThrowArgs} args - Arguments to find a TipodeSolicitacao
     * @example
     * // Get one TipodeSolicitacao
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TipodeSolicitacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, TipodeSolicitacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TipodeSolicitacaoClient<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TipodeSolicitacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipodeSolicitacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipodeSolicitacaos
     * const tipodeSolicitacaos = await prisma.tipodeSolicitacao.findMany()
     * 
     * // Get first 10 TipodeSolicitacaos
     * const tipodeSolicitacaos = await prisma.tipodeSolicitacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipodeSolicitacaoWithIdOnly = await prisma.tipodeSolicitacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TipodeSolicitacaoFindManyArgs>(args?: SelectSubset<T, TipodeSolicitacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TipodeSolicitacao.
     * @param {TipodeSolicitacaoCreateArgs} args - Arguments to create a TipodeSolicitacao.
     * @example
     * // Create one TipodeSolicitacao
     * const TipodeSolicitacao = await prisma.tipodeSolicitacao.create({
     *   data: {
     *     // ... data to create a TipodeSolicitacao
     *   }
     * })
     * 
     */
    create<T extends TipodeSolicitacaoCreateArgs>(args: SelectSubset<T, TipodeSolicitacaoCreateArgs<ExtArgs>>): Prisma__TipodeSolicitacaoClient<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TipodeSolicitacaos.
     * @param {TipodeSolicitacaoCreateManyArgs} args - Arguments to create many TipodeSolicitacaos.
     * @example
     * // Create many TipodeSolicitacaos
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TipodeSolicitacaoCreateManyArgs>(args?: SelectSubset<T, TipodeSolicitacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TipodeSolicitacaos and returns the data saved in the database.
     * @param {TipodeSolicitacaoCreateManyAndReturnArgs} args - Arguments to create many TipodeSolicitacaos.
     * @example
     * // Create many TipodeSolicitacaos
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TipodeSolicitacaos and only return the `id`
     * const tipodeSolicitacaoWithIdOnly = await prisma.tipodeSolicitacao.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TipodeSolicitacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, TipodeSolicitacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TipodeSolicitacao.
     * @param {TipodeSolicitacaoDeleteArgs} args - Arguments to delete one TipodeSolicitacao.
     * @example
     * // Delete one TipodeSolicitacao
     * const TipodeSolicitacao = await prisma.tipodeSolicitacao.delete({
     *   where: {
     *     // ... filter to delete one TipodeSolicitacao
     *   }
     * })
     * 
     */
    delete<T extends TipodeSolicitacaoDeleteArgs>(args: SelectSubset<T, TipodeSolicitacaoDeleteArgs<ExtArgs>>): Prisma__TipodeSolicitacaoClient<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TipodeSolicitacao.
     * @param {TipodeSolicitacaoUpdateArgs} args - Arguments to update one TipodeSolicitacao.
     * @example
     * // Update one TipodeSolicitacao
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TipodeSolicitacaoUpdateArgs>(args: SelectSubset<T, TipodeSolicitacaoUpdateArgs<ExtArgs>>): Prisma__TipodeSolicitacaoClient<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TipodeSolicitacaos.
     * @param {TipodeSolicitacaoDeleteManyArgs} args - Arguments to filter TipodeSolicitacaos to delete.
     * @example
     * // Delete a few TipodeSolicitacaos
     * const { count } = await prisma.tipodeSolicitacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TipodeSolicitacaoDeleteManyArgs>(args?: SelectSubset<T, TipodeSolicitacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipodeSolicitacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipodeSolicitacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipodeSolicitacaos
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TipodeSolicitacaoUpdateManyArgs>(args: SelectSubset<T, TipodeSolicitacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipodeSolicitacaos and returns the data updated in the database.
     * @param {TipodeSolicitacaoUpdateManyAndReturnArgs} args - Arguments to update many TipodeSolicitacaos.
     * @example
     * // Update many TipodeSolicitacaos
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TipodeSolicitacaos and only return the `id`
     * const tipodeSolicitacaoWithIdOnly = await prisma.tipodeSolicitacao.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TipodeSolicitacaoUpdateManyAndReturnArgs>(args: SelectSubset<T, TipodeSolicitacaoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TipodeSolicitacao.
     * @param {TipodeSolicitacaoUpsertArgs} args - Arguments to update or create a TipodeSolicitacao.
     * @example
     * // Update or create a TipodeSolicitacao
     * const tipodeSolicitacao = await prisma.tipodeSolicitacao.upsert({
     *   create: {
     *     // ... data to create a TipodeSolicitacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipodeSolicitacao we want to update
     *   }
     * })
     */
    upsert<T extends TipodeSolicitacaoUpsertArgs>(args: SelectSubset<T, TipodeSolicitacaoUpsertArgs<ExtArgs>>): Prisma__TipodeSolicitacaoClient<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TipodeSolicitacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipodeSolicitacaoCountArgs} args - Arguments to filter TipodeSolicitacaos to count.
     * @example
     * // Count the number of TipodeSolicitacaos
     * const count = await prisma.tipodeSolicitacao.count({
     *   where: {
     *     // ... the filter for the TipodeSolicitacaos we want to count
     *   }
     * })
    **/
    count<T extends TipodeSolicitacaoCountArgs>(
      args?: Subset<T, TipodeSolicitacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipodeSolicitacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipodeSolicitacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipodeSolicitacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipodeSolicitacaoAggregateArgs>(args: Subset<T, TipodeSolicitacaoAggregateArgs>): Prisma.PrismaPromise<GetTipodeSolicitacaoAggregateType<T>>

    /**
     * Group by TipodeSolicitacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipodeSolicitacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipodeSolicitacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipodeSolicitacaoGroupByArgs['orderBy'] }
        : { orderBy?: TipodeSolicitacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipodeSolicitacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipodeSolicitacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipodeSolicitacao model
   */
  readonly fields: TipodeSolicitacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipodeSolicitacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipodeSolicitacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ordens<T extends TipodeSolicitacao$ordensArgs<ExtArgs> = {}>(args?: Subset<T, TipodeSolicitacao$ordensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TipodeSolicitacao model
   */
  interface TipodeSolicitacaoFieldRefs {
    readonly id: FieldRef<"TipodeSolicitacao", 'String'>
    readonly name: FieldRef<"TipodeSolicitacao", 'String'>
    readonly create_at: FieldRef<"TipodeSolicitacao", 'DateTime'>
    readonly updated_at: FieldRef<"TipodeSolicitacao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TipodeSolicitacao findUnique
   */
  export type TipodeSolicitacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which TipodeSolicitacao to fetch.
     */
    where: TipodeSolicitacaoWhereUniqueInput
  }

  /**
   * TipodeSolicitacao findUniqueOrThrow
   */
  export type TipodeSolicitacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which TipodeSolicitacao to fetch.
     */
    where: TipodeSolicitacaoWhereUniqueInput
  }

  /**
   * TipodeSolicitacao findFirst
   */
  export type TipodeSolicitacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which TipodeSolicitacao to fetch.
     */
    where?: TipodeSolicitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipodeSolicitacaos to fetch.
     */
    orderBy?: TipodeSolicitacaoOrderByWithRelationInput | TipodeSolicitacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipodeSolicitacaos.
     */
    cursor?: TipodeSolicitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipodeSolicitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipodeSolicitacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipodeSolicitacaos.
     */
    distinct?: TipodeSolicitacaoScalarFieldEnum | TipodeSolicitacaoScalarFieldEnum[]
  }

  /**
   * TipodeSolicitacao findFirstOrThrow
   */
  export type TipodeSolicitacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which TipodeSolicitacao to fetch.
     */
    where?: TipodeSolicitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipodeSolicitacaos to fetch.
     */
    orderBy?: TipodeSolicitacaoOrderByWithRelationInput | TipodeSolicitacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipodeSolicitacaos.
     */
    cursor?: TipodeSolicitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipodeSolicitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipodeSolicitacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipodeSolicitacaos.
     */
    distinct?: TipodeSolicitacaoScalarFieldEnum | TipodeSolicitacaoScalarFieldEnum[]
  }

  /**
   * TipodeSolicitacao findMany
   */
  export type TipodeSolicitacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which TipodeSolicitacaos to fetch.
     */
    where?: TipodeSolicitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipodeSolicitacaos to fetch.
     */
    orderBy?: TipodeSolicitacaoOrderByWithRelationInput | TipodeSolicitacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipodeSolicitacaos.
     */
    cursor?: TipodeSolicitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipodeSolicitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipodeSolicitacaos.
     */
    skip?: number
    distinct?: TipodeSolicitacaoScalarFieldEnum | TipodeSolicitacaoScalarFieldEnum[]
  }

  /**
   * TipodeSolicitacao create
   */
  export type TipodeSolicitacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a TipodeSolicitacao.
     */
    data: XOR<TipodeSolicitacaoCreateInput, TipodeSolicitacaoUncheckedCreateInput>
  }

  /**
   * TipodeSolicitacao createMany
   */
  export type TipodeSolicitacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipodeSolicitacaos.
     */
    data: TipodeSolicitacaoCreateManyInput | TipodeSolicitacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipodeSolicitacao createManyAndReturn
   */
  export type TipodeSolicitacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * The data used to create many TipodeSolicitacaos.
     */
    data: TipodeSolicitacaoCreateManyInput | TipodeSolicitacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipodeSolicitacao update
   */
  export type TipodeSolicitacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a TipodeSolicitacao.
     */
    data: XOR<TipodeSolicitacaoUpdateInput, TipodeSolicitacaoUncheckedUpdateInput>
    /**
     * Choose, which TipodeSolicitacao to update.
     */
    where: TipodeSolicitacaoWhereUniqueInput
  }

  /**
   * TipodeSolicitacao updateMany
   */
  export type TipodeSolicitacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipodeSolicitacaos.
     */
    data: XOR<TipodeSolicitacaoUpdateManyMutationInput, TipodeSolicitacaoUncheckedUpdateManyInput>
    /**
     * Filter which TipodeSolicitacaos to update
     */
    where?: TipodeSolicitacaoWhereInput
    /**
     * Limit how many TipodeSolicitacaos to update.
     */
    limit?: number
  }

  /**
   * TipodeSolicitacao updateManyAndReturn
   */
  export type TipodeSolicitacaoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * The data used to update TipodeSolicitacaos.
     */
    data: XOR<TipodeSolicitacaoUpdateManyMutationInput, TipodeSolicitacaoUncheckedUpdateManyInput>
    /**
     * Filter which TipodeSolicitacaos to update
     */
    where?: TipodeSolicitacaoWhereInput
    /**
     * Limit how many TipodeSolicitacaos to update.
     */
    limit?: number
  }

  /**
   * TipodeSolicitacao upsert
   */
  export type TipodeSolicitacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the TipodeSolicitacao to update in case it exists.
     */
    where: TipodeSolicitacaoWhereUniqueInput
    /**
     * In case the TipodeSolicitacao found by the `where` argument doesn't exist, create a new TipodeSolicitacao with this data.
     */
    create: XOR<TipodeSolicitacaoCreateInput, TipodeSolicitacaoUncheckedCreateInput>
    /**
     * In case the TipodeSolicitacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipodeSolicitacaoUpdateInput, TipodeSolicitacaoUncheckedUpdateInput>
  }

  /**
   * TipodeSolicitacao delete
   */
  export type TipodeSolicitacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
    /**
     * Filter which TipodeSolicitacao to delete.
     */
    where: TipodeSolicitacaoWhereUniqueInput
  }

  /**
   * TipodeSolicitacao deleteMany
   */
  export type TipodeSolicitacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipodeSolicitacaos to delete
     */
    where?: TipodeSolicitacaoWhereInput
    /**
     * Limit how many TipodeSolicitacaos to delete.
     */
    limit?: number
  }

  /**
   * TipodeSolicitacao.ordens
   */
  export type TipodeSolicitacao$ordensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    where?: OrdemdeServicoWhereInput
    orderBy?: OrdemdeServicoOrderByWithRelationInput | OrdemdeServicoOrderByWithRelationInput[]
    cursor?: OrdemdeServicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdemdeServicoScalarFieldEnum | OrdemdeServicoScalarFieldEnum[]
  }

  /**
   * TipodeSolicitacao without action
   */
  export type TipodeSolicitacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipodeSolicitacao
     */
    select?: TipodeSolicitacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipodeSolicitacao
     */
    omit?: TipodeSolicitacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipodeSolicitacaoInclude<ExtArgs> | null
  }


  /**
   * Model Tecnico
   */

  export type AggregateTecnico = {
    _count: TecnicoCountAggregateOutputType | null
    _min: TecnicoMinAggregateOutputType | null
    _max: TecnicoMaxAggregateOutputType | null
  }

  export type TecnicoMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type TecnicoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type TecnicoCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type TecnicoMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type TecnicoMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type TecnicoCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type TecnicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tecnico to aggregate.
     */
    where?: TecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tecnicos to fetch.
     */
    orderBy?: TecnicoOrderByWithRelationInput | TecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tecnicos
    **/
    _count?: true | TecnicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TecnicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TecnicoMaxAggregateInputType
  }

  export type GetTecnicoAggregateType<T extends TecnicoAggregateArgs> = {
        [P in keyof T & keyof AggregateTecnico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTecnico[P]>
      : GetScalarType<T[P], AggregateTecnico[P]>
  }




  export type TecnicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TecnicoWhereInput
    orderBy?: TecnicoOrderByWithAggregationInput | TecnicoOrderByWithAggregationInput[]
    by: TecnicoScalarFieldEnum[] | TecnicoScalarFieldEnum
    having?: TecnicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TecnicoCountAggregateInputType | true
    _min?: TecnicoMinAggregateInputType
    _max?: TecnicoMaxAggregateInputType
  }

  export type TecnicoGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: TecnicoCountAggregateOutputType | null
    _min: TecnicoMinAggregateOutputType | null
    _max: TecnicoMaxAggregateOutputType | null
  }

  type GetTecnicoGroupByPayload<T extends TecnicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TecnicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TecnicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TecnicoGroupByOutputType[P]>
            : GetScalarType<T[P], TecnicoGroupByOutputType[P]>
        }
      >
    >


  export type TecnicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    ordens?: boolean | Tecnico$ordensArgs<ExtArgs>
    controlesdeAssistenciatecnica?: boolean | Tecnico$controlesdeAssistenciatecnicaArgs<ExtArgs>
    controlesdeLaudoTecnico?: boolean | Tecnico$controlesdeLaudoTecnicoArgs<ExtArgs>
    documentacoesTecnicas?: boolean | Tecnico$documentacoesTecnicasArgs<ExtArgs>
    _count?: boolean | TecnicoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tecnico"]>

  export type TecnicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["tecnico"]>

  export type TecnicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["tecnico"]>

  export type TecnicoSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type TecnicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["tecnico"]>
  export type TecnicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ordens?: boolean | Tecnico$ordensArgs<ExtArgs>
    controlesdeAssistenciatecnica?: boolean | Tecnico$controlesdeAssistenciatecnicaArgs<ExtArgs>
    controlesdeLaudoTecnico?: boolean | Tecnico$controlesdeLaudoTecnicoArgs<ExtArgs>
    documentacoesTecnicas?: boolean | Tecnico$documentacoesTecnicasArgs<ExtArgs>
    _count?: boolean | TecnicoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TecnicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TecnicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TecnicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tecnico"
    objects: {
      ordens: Prisma.$OrdemdeServicoPayload<ExtArgs>[]
      controlesdeAssistenciatecnica: Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>[]
      controlesdeLaudoTecnico: Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>[]
      documentacoesTecnicas: Prisma.$documentacaoTecnicaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["tecnico"]>
    composites: {}
  }

  type TecnicoGetPayload<S extends boolean | null | undefined | TecnicoDefaultArgs> = $Result.GetResult<Prisma.$TecnicoPayload, S>

  type TecnicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TecnicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TecnicoCountAggregateInputType | true
    }

  export interface TecnicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tecnico'], meta: { name: 'Tecnico' } }
    /**
     * Find zero or one Tecnico that matches the filter.
     * @param {TecnicoFindUniqueArgs} args - Arguments to find a Tecnico
     * @example
     * // Get one Tecnico
     * const tecnico = await prisma.tecnico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TecnicoFindUniqueArgs>(args: SelectSubset<T, TecnicoFindUniqueArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tecnico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TecnicoFindUniqueOrThrowArgs} args - Arguments to find a Tecnico
     * @example
     * // Get one Tecnico
     * const tecnico = await prisma.tecnico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TecnicoFindUniqueOrThrowArgs>(args: SelectSubset<T, TecnicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tecnico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnicoFindFirstArgs} args - Arguments to find a Tecnico
     * @example
     * // Get one Tecnico
     * const tecnico = await prisma.tecnico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TecnicoFindFirstArgs>(args?: SelectSubset<T, TecnicoFindFirstArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tecnico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnicoFindFirstOrThrowArgs} args - Arguments to find a Tecnico
     * @example
     * // Get one Tecnico
     * const tecnico = await prisma.tecnico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TecnicoFindFirstOrThrowArgs>(args?: SelectSubset<T, TecnicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tecnicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tecnicos
     * const tecnicos = await prisma.tecnico.findMany()
     * 
     * // Get first 10 Tecnicos
     * const tecnicos = await prisma.tecnico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tecnicoWithIdOnly = await prisma.tecnico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TecnicoFindManyArgs>(args?: SelectSubset<T, TecnicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tecnico.
     * @param {TecnicoCreateArgs} args - Arguments to create a Tecnico.
     * @example
     * // Create one Tecnico
     * const Tecnico = await prisma.tecnico.create({
     *   data: {
     *     // ... data to create a Tecnico
     *   }
     * })
     * 
     */
    create<T extends TecnicoCreateArgs>(args: SelectSubset<T, TecnicoCreateArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tecnicos.
     * @param {TecnicoCreateManyArgs} args - Arguments to create many Tecnicos.
     * @example
     * // Create many Tecnicos
     * const tecnico = await prisma.tecnico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TecnicoCreateManyArgs>(args?: SelectSubset<T, TecnicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tecnicos and returns the data saved in the database.
     * @param {TecnicoCreateManyAndReturnArgs} args - Arguments to create many Tecnicos.
     * @example
     * // Create many Tecnicos
     * const tecnico = await prisma.tecnico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tecnicos and only return the `id`
     * const tecnicoWithIdOnly = await prisma.tecnico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TecnicoCreateManyAndReturnArgs>(args?: SelectSubset<T, TecnicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tecnico.
     * @param {TecnicoDeleteArgs} args - Arguments to delete one Tecnico.
     * @example
     * // Delete one Tecnico
     * const Tecnico = await prisma.tecnico.delete({
     *   where: {
     *     // ... filter to delete one Tecnico
     *   }
     * })
     * 
     */
    delete<T extends TecnicoDeleteArgs>(args: SelectSubset<T, TecnicoDeleteArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tecnico.
     * @param {TecnicoUpdateArgs} args - Arguments to update one Tecnico.
     * @example
     * // Update one Tecnico
     * const tecnico = await prisma.tecnico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TecnicoUpdateArgs>(args: SelectSubset<T, TecnicoUpdateArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tecnicos.
     * @param {TecnicoDeleteManyArgs} args - Arguments to filter Tecnicos to delete.
     * @example
     * // Delete a few Tecnicos
     * const { count } = await prisma.tecnico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TecnicoDeleteManyArgs>(args?: SelectSubset<T, TecnicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tecnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tecnicos
     * const tecnico = await prisma.tecnico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TecnicoUpdateManyArgs>(args: SelectSubset<T, TecnicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tecnicos and returns the data updated in the database.
     * @param {TecnicoUpdateManyAndReturnArgs} args - Arguments to update many Tecnicos.
     * @example
     * // Update many Tecnicos
     * const tecnico = await prisma.tecnico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tecnicos and only return the `id`
     * const tecnicoWithIdOnly = await prisma.tecnico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TecnicoUpdateManyAndReturnArgs>(args: SelectSubset<T, TecnicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tecnico.
     * @param {TecnicoUpsertArgs} args - Arguments to update or create a Tecnico.
     * @example
     * // Update or create a Tecnico
     * const tecnico = await prisma.tecnico.upsert({
     *   create: {
     *     // ... data to create a Tecnico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tecnico we want to update
     *   }
     * })
     */
    upsert<T extends TecnicoUpsertArgs>(args: SelectSubset<T, TecnicoUpsertArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tecnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnicoCountArgs} args - Arguments to filter Tecnicos to count.
     * @example
     * // Count the number of Tecnicos
     * const count = await prisma.tecnico.count({
     *   where: {
     *     // ... the filter for the Tecnicos we want to count
     *   }
     * })
    **/
    count<T extends TecnicoCountArgs>(
      args?: Subset<T, TecnicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TecnicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tecnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TecnicoAggregateArgs>(args: Subset<T, TecnicoAggregateArgs>): Prisma.PrismaPromise<GetTecnicoAggregateType<T>>

    /**
     * Group by Tecnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TecnicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TecnicoGroupByArgs['orderBy'] }
        : { orderBy?: TecnicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TecnicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTecnicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tecnico model
   */
  readonly fields: TecnicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tecnico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TecnicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ordens<T extends Tecnico$ordensArgs<ExtArgs> = {}>(args?: Subset<T, Tecnico$ordensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesdeAssistenciatecnica<T extends Tecnico$controlesdeAssistenciatecnicaArgs<ExtArgs> = {}>(args?: Subset<T, Tecnico$controlesdeAssistenciatecnicaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesdeLaudoTecnico<T extends Tecnico$controlesdeLaudoTecnicoArgs<ExtArgs> = {}>(args?: Subset<T, Tecnico$controlesdeLaudoTecnicoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documentacoesTecnicas<T extends Tecnico$documentacoesTecnicasArgs<ExtArgs> = {}>(args?: Subset<T, Tecnico$documentacoesTecnicasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tecnico model
   */
  interface TecnicoFieldRefs {
    readonly id: FieldRef<"Tecnico", 'String'>
    readonly name: FieldRef<"Tecnico", 'String'>
    readonly create_at: FieldRef<"Tecnico", 'DateTime'>
    readonly updated_at: FieldRef<"Tecnico", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tecnico findUnique
   */
  export type TecnicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
    /**
     * Filter, which Tecnico to fetch.
     */
    where: TecnicoWhereUniqueInput
  }

  /**
   * Tecnico findUniqueOrThrow
   */
  export type TecnicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
    /**
     * Filter, which Tecnico to fetch.
     */
    where: TecnicoWhereUniqueInput
  }

  /**
   * Tecnico findFirst
   */
  export type TecnicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
    /**
     * Filter, which Tecnico to fetch.
     */
    where?: TecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tecnicos to fetch.
     */
    orderBy?: TecnicoOrderByWithRelationInput | TecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tecnicos.
     */
    cursor?: TecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tecnicos.
     */
    distinct?: TecnicoScalarFieldEnum | TecnicoScalarFieldEnum[]
  }

  /**
   * Tecnico findFirstOrThrow
   */
  export type TecnicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
    /**
     * Filter, which Tecnico to fetch.
     */
    where?: TecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tecnicos to fetch.
     */
    orderBy?: TecnicoOrderByWithRelationInput | TecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tecnicos.
     */
    cursor?: TecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tecnicos.
     */
    distinct?: TecnicoScalarFieldEnum | TecnicoScalarFieldEnum[]
  }

  /**
   * Tecnico findMany
   */
  export type TecnicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
    /**
     * Filter, which Tecnicos to fetch.
     */
    where?: TecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tecnicos to fetch.
     */
    orderBy?: TecnicoOrderByWithRelationInput | TecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tecnicos.
     */
    cursor?: TecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tecnicos.
     */
    skip?: number
    distinct?: TecnicoScalarFieldEnum | TecnicoScalarFieldEnum[]
  }

  /**
   * Tecnico create
   */
  export type TecnicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
    /**
     * The data needed to create a Tecnico.
     */
    data: XOR<TecnicoCreateInput, TecnicoUncheckedCreateInput>
  }

  /**
   * Tecnico createMany
   */
  export type TecnicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tecnicos.
     */
    data: TecnicoCreateManyInput | TecnicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tecnico createManyAndReturn
   */
  export type TecnicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * The data used to create many Tecnicos.
     */
    data: TecnicoCreateManyInput | TecnicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tecnico update
   */
  export type TecnicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
    /**
     * The data needed to update a Tecnico.
     */
    data: XOR<TecnicoUpdateInput, TecnicoUncheckedUpdateInput>
    /**
     * Choose, which Tecnico to update.
     */
    where: TecnicoWhereUniqueInput
  }

  /**
   * Tecnico updateMany
   */
  export type TecnicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tecnicos.
     */
    data: XOR<TecnicoUpdateManyMutationInput, TecnicoUncheckedUpdateManyInput>
    /**
     * Filter which Tecnicos to update
     */
    where?: TecnicoWhereInput
    /**
     * Limit how many Tecnicos to update.
     */
    limit?: number
  }

  /**
   * Tecnico updateManyAndReturn
   */
  export type TecnicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * The data used to update Tecnicos.
     */
    data: XOR<TecnicoUpdateManyMutationInput, TecnicoUncheckedUpdateManyInput>
    /**
     * Filter which Tecnicos to update
     */
    where?: TecnicoWhereInput
    /**
     * Limit how many Tecnicos to update.
     */
    limit?: number
  }

  /**
   * Tecnico upsert
   */
  export type TecnicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
    /**
     * The filter to search for the Tecnico to update in case it exists.
     */
    where: TecnicoWhereUniqueInput
    /**
     * In case the Tecnico found by the `where` argument doesn't exist, create a new Tecnico with this data.
     */
    create: XOR<TecnicoCreateInput, TecnicoUncheckedCreateInput>
    /**
     * In case the Tecnico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TecnicoUpdateInput, TecnicoUncheckedUpdateInput>
  }

  /**
   * Tecnico delete
   */
  export type TecnicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
    /**
     * Filter which Tecnico to delete.
     */
    where: TecnicoWhereUniqueInput
  }

  /**
   * Tecnico deleteMany
   */
  export type TecnicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tecnicos to delete
     */
    where?: TecnicoWhereInput
    /**
     * Limit how many Tecnicos to delete.
     */
    limit?: number
  }

  /**
   * Tecnico.ordens
   */
  export type Tecnico$ordensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    where?: OrdemdeServicoWhereInput
    orderBy?: OrdemdeServicoOrderByWithRelationInput | OrdemdeServicoOrderByWithRelationInput[]
    cursor?: OrdemdeServicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdemdeServicoScalarFieldEnum | OrdemdeServicoScalarFieldEnum[]
  }

  /**
   * Tecnico.controlesdeAssistenciatecnica
   */
  export type Tecnico$controlesdeAssistenciatecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    where?: controleDeAssistenciaTecnicaWhereInput
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeAssistenciaTecnicaScalarFieldEnum | ControleDeAssistenciaTecnicaScalarFieldEnum[]
  }

  /**
   * Tecnico.controlesdeLaudoTecnico
   */
  export type Tecnico$controlesdeLaudoTecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    where?: controleDeLaudoTecnicoWhereInput
    orderBy?: controleDeLaudoTecnicoOrderByWithRelationInput | controleDeLaudoTecnicoOrderByWithRelationInput[]
    cursor?: controleDeLaudoTecnicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeLaudoTecnicoScalarFieldEnum | ControleDeLaudoTecnicoScalarFieldEnum[]
  }

  /**
   * Tecnico.documentacoesTecnicas
   */
  export type Tecnico$documentacoesTecnicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    where?: documentacaoTecnicaWhereInput
    orderBy?: documentacaoTecnicaOrderByWithRelationInput | documentacaoTecnicaOrderByWithRelationInput[]
    cursor?: documentacaoTecnicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentacaoTecnicaScalarFieldEnum | DocumentacaoTecnicaScalarFieldEnum[]
  }

  /**
   * Tecnico without action
   */
  export type TecnicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnico
     */
    select?: TecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnico
     */
    omit?: TecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnicoInclude<ExtArgs> | null
  }


  /**
   * Model OrdemdeServico
   */

  export type AggregateOrdemdeServico = {
    _count: OrdemdeServicoCountAggregateOutputType | null
    _min: OrdemdeServicoMinAggregateOutputType | null
    _max: OrdemdeServicoMaxAggregateOutputType | null
  }

  export type OrdemdeServicoMinAggregateOutputType = {
    id: string | null
    name: string | null
    problemaOuSolicitacao: string | null
    created_at: Date | null
    update_at: Date | null
    cliente_id: string | null
    tecnico_id: string | null
    statusOrdemdeServico_id: string | null
    tipodesolicitacao_id: string | null
    instituicaoUnidade_id: string | null
  }

  export type OrdemdeServicoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    problemaOuSolicitacao: string | null
    created_at: Date | null
    update_at: Date | null
    cliente_id: string | null
    tecnico_id: string | null
    statusOrdemdeServico_id: string | null
    tipodesolicitacao_id: string | null
    instituicaoUnidade_id: string | null
  }

  export type OrdemdeServicoCountAggregateOutputType = {
    id: number
    name: number
    problemaOuSolicitacao: number
    created_at: number
    update_at: number
    cliente_id: number
    tecnico_id: number
    statusOrdemdeServico_id: number
    tipodesolicitacao_id: number
    instituicaoUnidade_id: number
    _all: number
  }


  export type OrdemdeServicoMinAggregateInputType = {
    id?: true
    name?: true
    problemaOuSolicitacao?: true
    created_at?: true
    update_at?: true
    cliente_id?: true
    tecnico_id?: true
    statusOrdemdeServico_id?: true
    tipodesolicitacao_id?: true
    instituicaoUnidade_id?: true
  }

  export type OrdemdeServicoMaxAggregateInputType = {
    id?: true
    name?: true
    problemaOuSolicitacao?: true
    created_at?: true
    update_at?: true
    cliente_id?: true
    tecnico_id?: true
    statusOrdemdeServico_id?: true
    tipodesolicitacao_id?: true
    instituicaoUnidade_id?: true
  }

  export type OrdemdeServicoCountAggregateInputType = {
    id?: true
    name?: true
    problemaOuSolicitacao?: true
    created_at?: true
    update_at?: true
    cliente_id?: true
    tecnico_id?: true
    statusOrdemdeServico_id?: true
    tipodesolicitacao_id?: true
    instituicaoUnidade_id?: true
    _all?: true
  }

  export type OrdemdeServicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrdemdeServico to aggregate.
     */
    where?: OrdemdeServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdemdeServicos to fetch.
     */
    orderBy?: OrdemdeServicoOrderByWithRelationInput | OrdemdeServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrdemdeServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdemdeServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdemdeServicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrdemdeServicos
    **/
    _count?: true | OrdemdeServicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdemdeServicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdemdeServicoMaxAggregateInputType
  }

  export type GetOrdemdeServicoAggregateType<T extends OrdemdeServicoAggregateArgs> = {
        [P in keyof T & keyof AggregateOrdemdeServico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrdemdeServico[P]>
      : GetScalarType<T[P], AggregateOrdemdeServico[P]>
  }




  export type OrdemdeServicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdemdeServicoWhereInput
    orderBy?: OrdemdeServicoOrderByWithAggregationInput | OrdemdeServicoOrderByWithAggregationInput[]
    by: OrdemdeServicoScalarFieldEnum[] | OrdemdeServicoScalarFieldEnum
    having?: OrdemdeServicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdemdeServicoCountAggregateInputType | true
    _min?: OrdemdeServicoMinAggregateInputType
    _max?: OrdemdeServicoMaxAggregateInputType
  }

  export type OrdemdeServicoGroupByOutputType = {
    id: string
    name: string
    problemaOuSolicitacao: string
    created_at: Date | null
    update_at: Date | null
    cliente_id: string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
    _count: OrdemdeServicoCountAggregateOutputType | null
    _min: OrdemdeServicoMinAggregateOutputType | null
    _max: OrdemdeServicoMaxAggregateOutputType | null
  }

  type GetOrdemdeServicoGroupByPayload<T extends OrdemdeServicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdemdeServicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdemdeServicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdemdeServicoGroupByOutputType[P]>
            : GetScalarType<T[P], OrdemdeServicoGroupByOutputType[P]>
        }
      >
    >


  export type OrdemdeServicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    problemaOuSolicitacao?: boolean
    created_at?: boolean
    update_at?: boolean
    cliente_id?: boolean
    tecnico_id?: boolean
    statusOrdemdeServico_id?: boolean
    tipodesolicitacao_id?: boolean
    instituicaoUnidade_id?: boolean
    cliente?: boolean | OrdemdeServico$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    tipodesolicitacao?: boolean | TipodeSolicitacaoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    formtecnico?: boolean | OrdemdeServico$formtecnicoArgs<ExtArgs>
  }, ExtArgs["result"]["ordemdeServico"]>

  export type OrdemdeServicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    problemaOuSolicitacao?: boolean
    created_at?: boolean
    update_at?: boolean
    cliente_id?: boolean
    tecnico_id?: boolean
    statusOrdemdeServico_id?: boolean
    tipodesolicitacao_id?: boolean
    instituicaoUnidade_id?: boolean
    cliente?: boolean | OrdemdeServico$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    tipodesolicitacao?: boolean | TipodeSolicitacaoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ordemdeServico"]>

  export type OrdemdeServicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    problemaOuSolicitacao?: boolean
    created_at?: boolean
    update_at?: boolean
    cliente_id?: boolean
    tecnico_id?: boolean
    statusOrdemdeServico_id?: boolean
    tipodesolicitacao_id?: boolean
    instituicaoUnidade_id?: boolean
    cliente?: boolean | OrdemdeServico$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    tipodesolicitacao?: boolean | TipodeSolicitacaoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ordemdeServico"]>

  export type OrdemdeServicoSelectScalar = {
    id?: boolean
    name?: boolean
    problemaOuSolicitacao?: boolean
    created_at?: boolean
    update_at?: boolean
    cliente_id?: boolean
    tecnico_id?: boolean
    statusOrdemdeServico_id?: boolean
    tipodesolicitacao_id?: boolean
    instituicaoUnidade_id?: boolean
  }

  export type OrdemdeServicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "problemaOuSolicitacao" | "created_at" | "update_at" | "cliente_id" | "tecnico_id" | "statusOrdemdeServico_id" | "tipodesolicitacao_id" | "instituicaoUnidade_id", ExtArgs["result"]["ordemdeServico"]>
  export type OrdemdeServicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | OrdemdeServico$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    tipodesolicitacao?: boolean | TipodeSolicitacaoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    formtecnico?: boolean | OrdemdeServico$formtecnicoArgs<ExtArgs>
  }
  export type OrdemdeServicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | OrdemdeServico$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    tipodesolicitacao?: boolean | TipodeSolicitacaoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
  }
  export type OrdemdeServicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | OrdemdeServico$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    tipodesolicitacao?: boolean | TipodeSolicitacaoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
  }

  export type $OrdemdeServicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrdemdeServico"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs> | null
      tecnico: Prisma.$TecnicoPayload<ExtArgs>
      statusOrdemdeServico: Prisma.$statusOrdemdeServicoPayload<ExtArgs>
      tipodesolicitacao: Prisma.$TipodeSolicitacaoPayload<ExtArgs>
      instituicaoUnidade: Prisma.$InstituicaoUnidadePayload<ExtArgs>
      formtecnico: Prisma.$FormTecnicoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      problemaOuSolicitacao: string
      created_at: Date | null
      update_at: Date | null
      cliente_id: string | null
      tecnico_id: string
      statusOrdemdeServico_id: string
      tipodesolicitacao_id: string
      instituicaoUnidade_id: string
    }, ExtArgs["result"]["ordemdeServico"]>
    composites: {}
  }

  type OrdemdeServicoGetPayload<S extends boolean | null | undefined | OrdemdeServicoDefaultArgs> = $Result.GetResult<Prisma.$OrdemdeServicoPayload, S>

  type OrdemdeServicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrdemdeServicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrdemdeServicoCountAggregateInputType | true
    }

  export interface OrdemdeServicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrdemdeServico'], meta: { name: 'OrdemdeServico' } }
    /**
     * Find zero or one OrdemdeServico that matches the filter.
     * @param {OrdemdeServicoFindUniqueArgs} args - Arguments to find a OrdemdeServico
     * @example
     * // Get one OrdemdeServico
     * const ordemdeServico = await prisma.ordemdeServico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrdemdeServicoFindUniqueArgs>(args: SelectSubset<T, OrdemdeServicoFindUniqueArgs<ExtArgs>>): Prisma__OrdemdeServicoClient<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrdemdeServico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrdemdeServicoFindUniqueOrThrowArgs} args - Arguments to find a OrdemdeServico
     * @example
     * // Get one OrdemdeServico
     * const ordemdeServico = await prisma.ordemdeServico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrdemdeServicoFindUniqueOrThrowArgs>(args: SelectSubset<T, OrdemdeServicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrdemdeServicoClient<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrdemdeServico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdemdeServicoFindFirstArgs} args - Arguments to find a OrdemdeServico
     * @example
     * // Get one OrdemdeServico
     * const ordemdeServico = await prisma.ordemdeServico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrdemdeServicoFindFirstArgs>(args?: SelectSubset<T, OrdemdeServicoFindFirstArgs<ExtArgs>>): Prisma__OrdemdeServicoClient<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrdemdeServico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdemdeServicoFindFirstOrThrowArgs} args - Arguments to find a OrdemdeServico
     * @example
     * // Get one OrdemdeServico
     * const ordemdeServico = await prisma.ordemdeServico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrdemdeServicoFindFirstOrThrowArgs>(args?: SelectSubset<T, OrdemdeServicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrdemdeServicoClient<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrdemdeServicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdemdeServicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrdemdeServicos
     * const ordemdeServicos = await prisma.ordemdeServico.findMany()
     * 
     * // Get first 10 OrdemdeServicos
     * const ordemdeServicos = await prisma.ordemdeServico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordemdeServicoWithIdOnly = await prisma.ordemdeServico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrdemdeServicoFindManyArgs>(args?: SelectSubset<T, OrdemdeServicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrdemdeServico.
     * @param {OrdemdeServicoCreateArgs} args - Arguments to create a OrdemdeServico.
     * @example
     * // Create one OrdemdeServico
     * const OrdemdeServico = await prisma.ordemdeServico.create({
     *   data: {
     *     // ... data to create a OrdemdeServico
     *   }
     * })
     * 
     */
    create<T extends OrdemdeServicoCreateArgs>(args: SelectSubset<T, OrdemdeServicoCreateArgs<ExtArgs>>): Prisma__OrdemdeServicoClient<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrdemdeServicos.
     * @param {OrdemdeServicoCreateManyArgs} args - Arguments to create many OrdemdeServicos.
     * @example
     * // Create many OrdemdeServicos
     * const ordemdeServico = await prisma.ordemdeServico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrdemdeServicoCreateManyArgs>(args?: SelectSubset<T, OrdemdeServicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrdemdeServicos and returns the data saved in the database.
     * @param {OrdemdeServicoCreateManyAndReturnArgs} args - Arguments to create many OrdemdeServicos.
     * @example
     * // Create many OrdemdeServicos
     * const ordemdeServico = await prisma.ordemdeServico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrdemdeServicos and only return the `id`
     * const ordemdeServicoWithIdOnly = await prisma.ordemdeServico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrdemdeServicoCreateManyAndReturnArgs>(args?: SelectSubset<T, OrdemdeServicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrdemdeServico.
     * @param {OrdemdeServicoDeleteArgs} args - Arguments to delete one OrdemdeServico.
     * @example
     * // Delete one OrdemdeServico
     * const OrdemdeServico = await prisma.ordemdeServico.delete({
     *   where: {
     *     // ... filter to delete one OrdemdeServico
     *   }
     * })
     * 
     */
    delete<T extends OrdemdeServicoDeleteArgs>(args: SelectSubset<T, OrdemdeServicoDeleteArgs<ExtArgs>>): Prisma__OrdemdeServicoClient<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrdemdeServico.
     * @param {OrdemdeServicoUpdateArgs} args - Arguments to update one OrdemdeServico.
     * @example
     * // Update one OrdemdeServico
     * const ordemdeServico = await prisma.ordemdeServico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrdemdeServicoUpdateArgs>(args: SelectSubset<T, OrdemdeServicoUpdateArgs<ExtArgs>>): Prisma__OrdemdeServicoClient<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrdemdeServicos.
     * @param {OrdemdeServicoDeleteManyArgs} args - Arguments to filter OrdemdeServicos to delete.
     * @example
     * // Delete a few OrdemdeServicos
     * const { count } = await prisma.ordemdeServico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrdemdeServicoDeleteManyArgs>(args?: SelectSubset<T, OrdemdeServicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrdemdeServicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdemdeServicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrdemdeServicos
     * const ordemdeServico = await prisma.ordemdeServico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrdemdeServicoUpdateManyArgs>(args: SelectSubset<T, OrdemdeServicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrdemdeServicos and returns the data updated in the database.
     * @param {OrdemdeServicoUpdateManyAndReturnArgs} args - Arguments to update many OrdemdeServicos.
     * @example
     * // Update many OrdemdeServicos
     * const ordemdeServico = await prisma.ordemdeServico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrdemdeServicos and only return the `id`
     * const ordemdeServicoWithIdOnly = await prisma.ordemdeServico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrdemdeServicoUpdateManyAndReturnArgs>(args: SelectSubset<T, OrdemdeServicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrdemdeServico.
     * @param {OrdemdeServicoUpsertArgs} args - Arguments to update or create a OrdemdeServico.
     * @example
     * // Update or create a OrdemdeServico
     * const ordemdeServico = await prisma.ordemdeServico.upsert({
     *   create: {
     *     // ... data to create a OrdemdeServico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrdemdeServico we want to update
     *   }
     * })
     */
    upsert<T extends OrdemdeServicoUpsertArgs>(args: SelectSubset<T, OrdemdeServicoUpsertArgs<ExtArgs>>): Prisma__OrdemdeServicoClient<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrdemdeServicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdemdeServicoCountArgs} args - Arguments to filter OrdemdeServicos to count.
     * @example
     * // Count the number of OrdemdeServicos
     * const count = await prisma.ordemdeServico.count({
     *   where: {
     *     // ... the filter for the OrdemdeServicos we want to count
     *   }
     * })
    **/
    count<T extends OrdemdeServicoCountArgs>(
      args?: Subset<T, OrdemdeServicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdemdeServicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrdemdeServico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdemdeServicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdemdeServicoAggregateArgs>(args: Subset<T, OrdemdeServicoAggregateArgs>): Prisma.PrismaPromise<GetOrdemdeServicoAggregateType<T>>

    /**
     * Group by OrdemdeServico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdemdeServicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdemdeServicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdemdeServicoGroupByArgs['orderBy'] }
        : { orderBy?: OrdemdeServicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdemdeServicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdemdeServicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrdemdeServico model
   */
  readonly fields: OrdemdeServicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrdemdeServico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrdemdeServicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends OrdemdeServico$clienteArgs<ExtArgs> = {}>(args?: Subset<T, OrdemdeServico$clienteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tecnico<T extends TecnicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TecnicoDefaultArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    statusOrdemdeServico<T extends statusOrdemdeServicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, statusOrdemdeServicoDefaultArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tipodesolicitacao<T extends TipodeSolicitacaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TipodeSolicitacaoDefaultArgs<ExtArgs>>): Prisma__TipodeSolicitacaoClient<$Result.GetResult<Prisma.$TipodeSolicitacaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instituicaoUnidade<T extends InstituicaoUnidadeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidadeDefaultArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    formtecnico<T extends OrdemdeServico$formtecnicoArgs<ExtArgs> = {}>(args?: Subset<T, OrdemdeServico$formtecnicoArgs<ExtArgs>>): Prisma__FormTecnicoClient<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrdemdeServico model
   */
  interface OrdemdeServicoFieldRefs {
    readonly id: FieldRef<"OrdemdeServico", 'String'>
    readonly name: FieldRef<"OrdemdeServico", 'String'>
    readonly problemaOuSolicitacao: FieldRef<"OrdemdeServico", 'String'>
    readonly created_at: FieldRef<"OrdemdeServico", 'DateTime'>
    readonly update_at: FieldRef<"OrdemdeServico", 'DateTime'>
    readonly cliente_id: FieldRef<"OrdemdeServico", 'String'>
    readonly tecnico_id: FieldRef<"OrdemdeServico", 'String'>
    readonly statusOrdemdeServico_id: FieldRef<"OrdemdeServico", 'String'>
    readonly tipodesolicitacao_id: FieldRef<"OrdemdeServico", 'String'>
    readonly instituicaoUnidade_id: FieldRef<"OrdemdeServico", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OrdemdeServico findUnique
   */
  export type OrdemdeServicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which OrdemdeServico to fetch.
     */
    where: OrdemdeServicoWhereUniqueInput
  }

  /**
   * OrdemdeServico findUniqueOrThrow
   */
  export type OrdemdeServicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which OrdemdeServico to fetch.
     */
    where: OrdemdeServicoWhereUniqueInput
  }

  /**
   * OrdemdeServico findFirst
   */
  export type OrdemdeServicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which OrdemdeServico to fetch.
     */
    where?: OrdemdeServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdemdeServicos to fetch.
     */
    orderBy?: OrdemdeServicoOrderByWithRelationInput | OrdemdeServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrdemdeServicos.
     */
    cursor?: OrdemdeServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdemdeServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdemdeServicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrdemdeServicos.
     */
    distinct?: OrdemdeServicoScalarFieldEnum | OrdemdeServicoScalarFieldEnum[]
  }

  /**
   * OrdemdeServico findFirstOrThrow
   */
  export type OrdemdeServicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which OrdemdeServico to fetch.
     */
    where?: OrdemdeServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdemdeServicos to fetch.
     */
    orderBy?: OrdemdeServicoOrderByWithRelationInput | OrdemdeServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrdemdeServicos.
     */
    cursor?: OrdemdeServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdemdeServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdemdeServicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrdemdeServicos.
     */
    distinct?: OrdemdeServicoScalarFieldEnum | OrdemdeServicoScalarFieldEnum[]
  }

  /**
   * OrdemdeServico findMany
   */
  export type OrdemdeServicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter, which OrdemdeServicos to fetch.
     */
    where?: OrdemdeServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdemdeServicos to fetch.
     */
    orderBy?: OrdemdeServicoOrderByWithRelationInput | OrdemdeServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrdemdeServicos.
     */
    cursor?: OrdemdeServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdemdeServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdemdeServicos.
     */
    skip?: number
    distinct?: OrdemdeServicoScalarFieldEnum | OrdemdeServicoScalarFieldEnum[]
  }

  /**
   * OrdemdeServico create
   */
  export type OrdemdeServicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    /**
     * The data needed to create a OrdemdeServico.
     */
    data: XOR<OrdemdeServicoCreateInput, OrdemdeServicoUncheckedCreateInput>
  }

  /**
   * OrdemdeServico createMany
   */
  export type OrdemdeServicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrdemdeServicos.
     */
    data: OrdemdeServicoCreateManyInput | OrdemdeServicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrdemdeServico createManyAndReturn
   */
  export type OrdemdeServicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * The data used to create many OrdemdeServicos.
     */
    data: OrdemdeServicoCreateManyInput | OrdemdeServicoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrdemdeServico update
   */
  export type OrdemdeServicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    /**
     * The data needed to update a OrdemdeServico.
     */
    data: XOR<OrdemdeServicoUpdateInput, OrdemdeServicoUncheckedUpdateInput>
    /**
     * Choose, which OrdemdeServico to update.
     */
    where: OrdemdeServicoWhereUniqueInput
  }

  /**
   * OrdemdeServico updateMany
   */
  export type OrdemdeServicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrdemdeServicos.
     */
    data: XOR<OrdemdeServicoUpdateManyMutationInput, OrdemdeServicoUncheckedUpdateManyInput>
    /**
     * Filter which OrdemdeServicos to update
     */
    where?: OrdemdeServicoWhereInput
    /**
     * Limit how many OrdemdeServicos to update.
     */
    limit?: number
  }

  /**
   * OrdemdeServico updateManyAndReturn
   */
  export type OrdemdeServicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * The data used to update OrdemdeServicos.
     */
    data: XOR<OrdemdeServicoUpdateManyMutationInput, OrdemdeServicoUncheckedUpdateManyInput>
    /**
     * Filter which OrdemdeServicos to update
     */
    where?: OrdemdeServicoWhereInput
    /**
     * Limit how many OrdemdeServicos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrdemdeServico upsert
   */
  export type OrdemdeServicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    /**
     * The filter to search for the OrdemdeServico to update in case it exists.
     */
    where: OrdemdeServicoWhereUniqueInput
    /**
     * In case the OrdemdeServico found by the `where` argument doesn't exist, create a new OrdemdeServico with this data.
     */
    create: XOR<OrdemdeServicoCreateInput, OrdemdeServicoUncheckedCreateInput>
    /**
     * In case the OrdemdeServico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrdemdeServicoUpdateInput, OrdemdeServicoUncheckedUpdateInput>
  }

  /**
   * OrdemdeServico delete
   */
  export type OrdemdeServicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
    /**
     * Filter which OrdemdeServico to delete.
     */
    where: OrdemdeServicoWhereUniqueInput
  }

  /**
   * OrdemdeServico deleteMany
   */
  export type OrdemdeServicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrdemdeServicos to delete
     */
    where?: OrdemdeServicoWhereInput
    /**
     * Limit how many OrdemdeServicos to delete.
     */
    limit?: number
  }

  /**
   * OrdemdeServico.cliente
   */
  export type OrdemdeServico$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }

  /**
   * OrdemdeServico.formtecnico
   */
  export type OrdemdeServico$formtecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    where?: FormTecnicoWhereInput
  }

  /**
   * OrdemdeServico without action
   */
  export type OrdemdeServicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdemdeServico
     */
    select?: OrdemdeServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrdemdeServico
     */
    omit?: OrdemdeServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdemdeServicoInclude<ExtArgs> | null
  }


  /**
   * Model FormTecnico
   */

  export type AggregateFormTecnico = {
    _count: FormTecnicoCountAggregateOutputType | null
    _min: FormTecnicoMinAggregateOutputType | null
    _max: FormTecnicoMaxAggregateOutputType | null
  }

  export type FormTecnicoMinAggregateOutputType = {
    id: string | null
    name: string | null
    diagnostico: string | null
    solucao: string | null
    assinatura: string | null
    status_id: string | null
    statusOrdemdeServico_id: string | null
    ordemDeServico_id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type FormTecnicoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    diagnostico: string | null
    solucao: string | null
    assinatura: string | null
    status_id: string | null
    statusOrdemdeServico_id: string | null
    ordemDeServico_id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type FormTecnicoCountAggregateOutputType = {
    id: number
    name: number
    diagnostico: number
    solucao: number
    assinatura: number
    status_id: number
    statusOrdemdeServico_id: number
    ordemDeServico_id: number
    created_at: number
    update_at: number
    _all: number
  }


  export type FormTecnicoMinAggregateInputType = {
    id?: true
    name?: true
    diagnostico?: true
    solucao?: true
    assinatura?: true
    status_id?: true
    statusOrdemdeServico_id?: true
    ordemDeServico_id?: true
    created_at?: true
    update_at?: true
  }

  export type FormTecnicoMaxAggregateInputType = {
    id?: true
    name?: true
    diagnostico?: true
    solucao?: true
    assinatura?: true
    status_id?: true
    statusOrdemdeServico_id?: true
    ordemDeServico_id?: true
    created_at?: true
    update_at?: true
  }

  export type FormTecnicoCountAggregateInputType = {
    id?: true
    name?: true
    diagnostico?: true
    solucao?: true
    assinatura?: true
    status_id?: true
    statusOrdemdeServico_id?: true
    ordemDeServico_id?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type FormTecnicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormTecnico to aggregate.
     */
    where?: FormTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormTecnicos to fetch.
     */
    orderBy?: FormTecnicoOrderByWithRelationInput | FormTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormTecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FormTecnicos
    **/
    _count?: true | FormTecnicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormTecnicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormTecnicoMaxAggregateInputType
  }

  export type GetFormTecnicoAggregateType<T extends FormTecnicoAggregateArgs> = {
        [P in keyof T & keyof AggregateFormTecnico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormTecnico[P]>
      : GetScalarType<T[P], AggregateFormTecnico[P]>
  }




  export type FormTecnicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormTecnicoWhereInput
    orderBy?: FormTecnicoOrderByWithAggregationInput | FormTecnicoOrderByWithAggregationInput[]
    by: FormTecnicoScalarFieldEnum[] | FormTecnicoScalarFieldEnum
    having?: FormTecnicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormTecnicoCountAggregateInputType | true
    _min?: FormTecnicoMinAggregateInputType
    _max?: FormTecnicoMaxAggregateInputType
  }

  export type FormTecnicoGroupByOutputType = {
    id: string
    name: string
    diagnostico: string
    solucao: string
    assinatura: string
    status_id: string
    statusOrdemdeServico_id: string
    ordemDeServico_id: string
    created_at: Date | null
    update_at: Date | null
    _count: FormTecnicoCountAggregateOutputType | null
    _min: FormTecnicoMinAggregateOutputType | null
    _max: FormTecnicoMaxAggregateOutputType | null
  }

  type GetFormTecnicoGroupByPayload<T extends FormTecnicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormTecnicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormTecnicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormTecnicoGroupByOutputType[P]>
            : GetScalarType<T[P], FormTecnicoGroupByOutputType[P]>
        }
      >
    >


  export type FormTecnicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    diagnostico?: boolean
    solucao?: boolean
    assinatura?: boolean
    status_id?: boolean
    statusOrdemdeServico_id?: boolean
    ordemDeServico_id?: boolean
    created_at?: boolean
    update_at?: boolean
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    ordemDeServico?: boolean | OrdemdeServicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formTecnico"]>

  export type FormTecnicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    diagnostico?: boolean
    solucao?: boolean
    assinatura?: boolean
    status_id?: boolean
    statusOrdemdeServico_id?: boolean
    ordemDeServico_id?: boolean
    created_at?: boolean
    update_at?: boolean
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    ordemDeServico?: boolean | OrdemdeServicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formTecnico"]>

  export type FormTecnicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    diagnostico?: boolean
    solucao?: boolean
    assinatura?: boolean
    status_id?: boolean
    statusOrdemdeServico_id?: boolean
    ordemDeServico_id?: boolean
    created_at?: boolean
    update_at?: boolean
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    ordemDeServico?: boolean | OrdemdeServicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formTecnico"]>

  export type FormTecnicoSelectScalar = {
    id?: boolean
    name?: boolean
    diagnostico?: boolean
    solucao?: boolean
    assinatura?: boolean
    status_id?: boolean
    statusOrdemdeServico_id?: boolean
    ordemDeServico_id?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type FormTecnicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "diagnostico" | "solucao" | "assinatura" | "status_id" | "statusOrdemdeServico_id" | "ordemDeServico_id" | "created_at" | "update_at", ExtArgs["result"]["formTecnico"]>
  export type FormTecnicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    ordemDeServico?: boolean | OrdemdeServicoDefaultArgs<ExtArgs>
  }
  export type FormTecnicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    ordemDeServico?: boolean | OrdemdeServicoDefaultArgs<ExtArgs>
  }
  export type FormTecnicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusOrdemdeServico?: boolean | statusOrdemdeServicoDefaultArgs<ExtArgs>
    ordemDeServico?: boolean | OrdemdeServicoDefaultArgs<ExtArgs>
  }

  export type $FormTecnicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FormTecnico"
    objects: {
      statusOrdemdeServico: Prisma.$statusOrdemdeServicoPayload<ExtArgs>
      ordemDeServico: Prisma.$OrdemdeServicoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      diagnostico: string
      solucao: string
      assinatura: string
      status_id: string
      statusOrdemdeServico_id: string
      ordemDeServico_id: string
      created_at: Date | null
      update_at: Date | null
    }, ExtArgs["result"]["formTecnico"]>
    composites: {}
  }

  type FormTecnicoGetPayload<S extends boolean | null | undefined | FormTecnicoDefaultArgs> = $Result.GetResult<Prisma.$FormTecnicoPayload, S>

  type FormTecnicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FormTecnicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FormTecnicoCountAggregateInputType | true
    }

  export interface FormTecnicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormTecnico'], meta: { name: 'FormTecnico' } }
    /**
     * Find zero or one FormTecnico that matches the filter.
     * @param {FormTecnicoFindUniqueArgs} args - Arguments to find a FormTecnico
     * @example
     * // Get one FormTecnico
     * const formTecnico = await prisma.formTecnico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormTecnicoFindUniqueArgs>(args: SelectSubset<T, FormTecnicoFindUniqueArgs<ExtArgs>>): Prisma__FormTecnicoClient<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FormTecnico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FormTecnicoFindUniqueOrThrowArgs} args - Arguments to find a FormTecnico
     * @example
     * // Get one FormTecnico
     * const formTecnico = await prisma.formTecnico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormTecnicoFindUniqueOrThrowArgs>(args: SelectSubset<T, FormTecnicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormTecnicoClient<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FormTecnico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTecnicoFindFirstArgs} args - Arguments to find a FormTecnico
     * @example
     * // Get one FormTecnico
     * const formTecnico = await prisma.formTecnico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormTecnicoFindFirstArgs>(args?: SelectSubset<T, FormTecnicoFindFirstArgs<ExtArgs>>): Prisma__FormTecnicoClient<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FormTecnico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTecnicoFindFirstOrThrowArgs} args - Arguments to find a FormTecnico
     * @example
     * // Get one FormTecnico
     * const formTecnico = await prisma.formTecnico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormTecnicoFindFirstOrThrowArgs>(args?: SelectSubset<T, FormTecnicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormTecnicoClient<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FormTecnicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTecnicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FormTecnicos
     * const formTecnicos = await prisma.formTecnico.findMany()
     * 
     * // Get first 10 FormTecnicos
     * const formTecnicos = await prisma.formTecnico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formTecnicoWithIdOnly = await prisma.formTecnico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormTecnicoFindManyArgs>(args?: SelectSubset<T, FormTecnicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FormTecnico.
     * @param {FormTecnicoCreateArgs} args - Arguments to create a FormTecnico.
     * @example
     * // Create one FormTecnico
     * const FormTecnico = await prisma.formTecnico.create({
     *   data: {
     *     // ... data to create a FormTecnico
     *   }
     * })
     * 
     */
    create<T extends FormTecnicoCreateArgs>(args: SelectSubset<T, FormTecnicoCreateArgs<ExtArgs>>): Prisma__FormTecnicoClient<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FormTecnicos.
     * @param {FormTecnicoCreateManyArgs} args - Arguments to create many FormTecnicos.
     * @example
     * // Create many FormTecnicos
     * const formTecnico = await prisma.formTecnico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormTecnicoCreateManyArgs>(args?: SelectSubset<T, FormTecnicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FormTecnicos and returns the data saved in the database.
     * @param {FormTecnicoCreateManyAndReturnArgs} args - Arguments to create many FormTecnicos.
     * @example
     * // Create many FormTecnicos
     * const formTecnico = await prisma.formTecnico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FormTecnicos and only return the `id`
     * const formTecnicoWithIdOnly = await prisma.formTecnico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormTecnicoCreateManyAndReturnArgs>(args?: SelectSubset<T, FormTecnicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FormTecnico.
     * @param {FormTecnicoDeleteArgs} args - Arguments to delete one FormTecnico.
     * @example
     * // Delete one FormTecnico
     * const FormTecnico = await prisma.formTecnico.delete({
     *   where: {
     *     // ... filter to delete one FormTecnico
     *   }
     * })
     * 
     */
    delete<T extends FormTecnicoDeleteArgs>(args: SelectSubset<T, FormTecnicoDeleteArgs<ExtArgs>>): Prisma__FormTecnicoClient<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FormTecnico.
     * @param {FormTecnicoUpdateArgs} args - Arguments to update one FormTecnico.
     * @example
     * // Update one FormTecnico
     * const formTecnico = await prisma.formTecnico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormTecnicoUpdateArgs>(args: SelectSubset<T, FormTecnicoUpdateArgs<ExtArgs>>): Prisma__FormTecnicoClient<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FormTecnicos.
     * @param {FormTecnicoDeleteManyArgs} args - Arguments to filter FormTecnicos to delete.
     * @example
     * // Delete a few FormTecnicos
     * const { count } = await prisma.formTecnico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormTecnicoDeleteManyArgs>(args?: SelectSubset<T, FormTecnicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FormTecnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTecnicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FormTecnicos
     * const formTecnico = await prisma.formTecnico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormTecnicoUpdateManyArgs>(args: SelectSubset<T, FormTecnicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FormTecnicos and returns the data updated in the database.
     * @param {FormTecnicoUpdateManyAndReturnArgs} args - Arguments to update many FormTecnicos.
     * @example
     * // Update many FormTecnicos
     * const formTecnico = await prisma.formTecnico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FormTecnicos and only return the `id`
     * const formTecnicoWithIdOnly = await prisma.formTecnico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FormTecnicoUpdateManyAndReturnArgs>(args: SelectSubset<T, FormTecnicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FormTecnico.
     * @param {FormTecnicoUpsertArgs} args - Arguments to update or create a FormTecnico.
     * @example
     * // Update or create a FormTecnico
     * const formTecnico = await prisma.formTecnico.upsert({
     *   create: {
     *     // ... data to create a FormTecnico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FormTecnico we want to update
     *   }
     * })
     */
    upsert<T extends FormTecnicoUpsertArgs>(args: SelectSubset<T, FormTecnicoUpsertArgs<ExtArgs>>): Prisma__FormTecnicoClient<$Result.GetResult<Prisma.$FormTecnicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FormTecnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTecnicoCountArgs} args - Arguments to filter FormTecnicos to count.
     * @example
     * // Count the number of FormTecnicos
     * const count = await prisma.formTecnico.count({
     *   where: {
     *     // ... the filter for the FormTecnicos we want to count
     *   }
     * })
    **/
    count<T extends FormTecnicoCountArgs>(
      args?: Subset<T, FormTecnicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormTecnicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FormTecnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTecnicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormTecnicoAggregateArgs>(args: Subset<T, FormTecnicoAggregateArgs>): Prisma.PrismaPromise<GetFormTecnicoAggregateType<T>>

    /**
     * Group by FormTecnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTecnicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormTecnicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormTecnicoGroupByArgs['orderBy'] }
        : { orderBy?: FormTecnicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormTecnicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormTecnicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FormTecnico model
   */
  readonly fields: FormTecnicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FormTecnico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormTecnicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    statusOrdemdeServico<T extends statusOrdemdeServicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, statusOrdemdeServicoDefaultArgs<ExtArgs>>): Prisma__statusOrdemdeServicoClient<$Result.GetResult<Prisma.$statusOrdemdeServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ordemDeServico<T extends OrdemdeServicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrdemdeServicoDefaultArgs<ExtArgs>>): Prisma__OrdemdeServicoClient<$Result.GetResult<Prisma.$OrdemdeServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FormTecnico model
   */
  interface FormTecnicoFieldRefs {
    readonly id: FieldRef<"FormTecnico", 'String'>
    readonly name: FieldRef<"FormTecnico", 'String'>
    readonly diagnostico: FieldRef<"FormTecnico", 'String'>
    readonly solucao: FieldRef<"FormTecnico", 'String'>
    readonly assinatura: FieldRef<"FormTecnico", 'String'>
    readonly status_id: FieldRef<"FormTecnico", 'String'>
    readonly statusOrdemdeServico_id: FieldRef<"FormTecnico", 'String'>
    readonly ordemDeServico_id: FieldRef<"FormTecnico", 'String'>
    readonly created_at: FieldRef<"FormTecnico", 'DateTime'>
    readonly update_at: FieldRef<"FormTecnico", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FormTecnico findUnique
   */
  export type FormTecnicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which FormTecnico to fetch.
     */
    where: FormTecnicoWhereUniqueInput
  }

  /**
   * FormTecnico findUniqueOrThrow
   */
  export type FormTecnicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which FormTecnico to fetch.
     */
    where: FormTecnicoWhereUniqueInput
  }

  /**
   * FormTecnico findFirst
   */
  export type FormTecnicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which FormTecnico to fetch.
     */
    where?: FormTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormTecnicos to fetch.
     */
    orderBy?: FormTecnicoOrderByWithRelationInput | FormTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormTecnicos.
     */
    cursor?: FormTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormTecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormTecnicos.
     */
    distinct?: FormTecnicoScalarFieldEnum | FormTecnicoScalarFieldEnum[]
  }

  /**
   * FormTecnico findFirstOrThrow
   */
  export type FormTecnicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which FormTecnico to fetch.
     */
    where?: FormTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormTecnicos to fetch.
     */
    orderBy?: FormTecnicoOrderByWithRelationInput | FormTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormTecnicos.
     */
    cursor?: FormTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormTecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormTecnicos.
     */
    distinct?: FormTecnicoScalarFieldEnum | FormTecnicoScalarFieldEnum[]
  }

  /**
   * FormTecnico findMany
   */
  export type FormTecnicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which FormTecnicos to fetch.
     */
    where?: FormTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormTecnicos to fetch.
     */
    orderBy?: FormTecnicoOrderByWithRelationInput | FormTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FormTecnicos.
     */
    cursor?: FormTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormTecnicos.
     */
    skip?: number
    distinct?: FormTecnicoScalarFieldEnum | FormTecnicoScalarFieldEnum[]
  }

  /**
   * FormTecnico create
   */
  export type FormTecnicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    /**
     * The data needed to create a FormTecnico.
     */
    data: XOR<FormTecnicoCreateInput, FormTecnicoUncheckedCreateInput>
  }

  /**
   * FormTecnico createMany
   */
  export type FormTecnicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FormTecnicos.
     */
    data: FormTecnicoCreateManyInput | FormTecnicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FormTecnico createManyAndReturn
   */
  export type FormTecnicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * The data used to create many FormTecnicos.
     */
    data: FormTecnicoCreateManyInput | FormTecnicoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FormTecnico update
   */
  export type FormTecnicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    /**
     * The data needed to update a FormTecnico.
     */
    data: XOR<FormTecnicoUpdateInput, FormTecnicoUncheckedUpdateInput>
    /**
     * Choose, which FormTecnico to update.
     */
    where: FormTecnicoWhereUniqueInput
  }

  /**
   * FormTecnico updateMany
   */
  export type FormTecnicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FormTecnicos.
     */
    data: XOR<FormTecnicoUpdateManyMutationInput, FormTecnicoUncheckedUpdateManyInput>
    /**
     * Filter which FormTecnicos to update
     */
    where?: FormTecnicoWhereInput
    /**
     * Limit how many FormTecnicos to update.
     */
    limit?: number
  }

  /**
   * FormTecnico updateManyAndReturn
   */
  export type FormTecnicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * The data used to update FormTecnicos.
     */
    data: XOR<FormTecnicoUpdateManyMutationInput, FormTecnicoUncheckedUpdateManyInput>
    /**
     * Filter which FormTecnicos to update
     */
    where?: FormTecnicoWhereInput
    /**
     * Limit how many FormTecnicos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FormTecnico upsert
   */
  export type FormTecnicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    /**
     * The filter to search for the FormTecnico to update in case it exists.
     */
    where: FormTecnicoWhereUniqueInput
    /**
     * In case the FormTecnico found by the `where` argument doesn't exist, create a new FormTecnico with this data.
     */
    create: XOR<FormTecnicoCreateInput, FormTecnicoUncheckedCreateInput>
    /**
     * In case the FormTecnico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormTecnicoUpdateInput, FormTecnicoUncheckedUpdateInput>
  }

  /**
   * FormTecnico delete
   */
  export type FormTecnicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
    /**
     * Filter which FormTecnico to delete.
     */
    where: FormTecnicoWhereUniqueInput
  }

  /**
   * FormTecnico deleteMany
   */
  export type FormTecnicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormTecnicos to delete
     */
    where?: FormTecnicoWhereInput
    /**
     * Limit how many FormTecnicos to delete.
     */
    limit?: number
  }

  /**
   * FormTecnico without action
   */
  export type FormTecnicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTecnico
     */
    select?: FormTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTecnico
     */
    omit?: FormTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTecnicoInclude<ExtArgs> | null
  }


  /**
   * Model Equipamento
   */

  export type AggregateEquipamento = {
    _count: EquipamentoCountAggregateOutputType | null
    _min: EquipamentoMinAggregateOutputType | null
    _max: EquipamentoMaxAggregateOutputType | null
  }

  export type EquipamentoMinAggregateOutputType = {
    id: string | null
    name: string | null
    patrimonio: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type EquipamentoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    patrimonio: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type EquipamentoCountAggregateOutputType = {
    id: number
    name: number
    patrimonio: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type EquipamentoMinAggregateInputType = {
    id?: true
    name?: true
    patrimonio?: true
    create_at?: true
    updated_at?: true
  }

  export type EquipamentoMaxAggregateInputType = {
    id?: true
    name?: true
    patrimonio?: true
    create_at?: true
    updated_at?: true
  }

  export type EquipamentoCountAggregateInputType = {
    id?: true
    name?: true
    patrimonio?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type EquipamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipamento to aggregate.
     */
    where?: EquipamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipamentos to fetch.
     */
    orderBy?: EquipamentoOrderByWithRelationInput | EquipamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Equipamentos
    **/
    _count?: true | EquipamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipamentoMaxAggregateInputType
  }

  export type GetEquipamentoAggregateType<T extends EquipamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipamento[P]>
      : GetScalarType<T[P], AggregateEquipamento[P]>
  }




  export type EquipamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipamentoWhereInput
    orderBy?: EquipamentoOrderByWithAggregationInput | EquipamentoOrderByWithAggregationInput[]
    by: EquipamentoScalarFieldEnum[] | EquipamentoScalarFieldEnum
    having?: EquipamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipamentoCountAggregateInputType | true
    _min?: EquipamentoMinAggregateInputType
    _max?: EquipamentoMaxAggregateInputType
  }

  export type EquipamentoGroupByOutputType = {
    id: string
    name: string
    patrimonio: string
    create_at: Date | null
    updated_at: Date | null
    _count: EquipamentoCountAggregateOutputType | null
    _min: EquipamentoMinAggregateOutputType | null
    _max: EquipamentoMaxAggregateOutputType | null
  }

  type GetEquipamentoGroupByPayload<T extends EquipamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipamentoGroupByOutputType[P]>
            : GetScalarType<T[P], EquipamentoGroupByOutputType[P]>
        }
      >
    >


  export type EquipamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    patrimonio?: boolean
    create_at?: boolean
    updated_at?: boolean
    controlesDeAssistencia?: boolean | Equipamento$controlesDeAssistenciaArgs<ExtArgs>
    controlesdeLaudoTecnico?: boolean | Equipamento$controlesdeLaudoTecnicoArgs<ExtArgs>
    controlesDeLaboratio?: boolean | Equipamento$controlesDeLaboratioArgs<ExtArgs>
    controlesDeMaquinasPendentesLaboratorio?: boolean | Equipamento$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs>
    controlesDeMaquinasPendentesOro?: boolean | Equipamento$controlesDeMaquinasPendentesOroArgs<ExtArgs>
    _count?: boolean | EquipamentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipamento"]>

  export type EquipamentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    patrimonio?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["equipamento"]>

  export type EquipamentoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    patrimonio?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["equipamento"]>

  export type EquipamentoSelectScalar = {
    id?: boolean
    name?: boolean
    patrimonio?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type EquipamentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "patrimonio" | "create_at" | "updated_at", ExtArgs["result"]["equipamento"]>
  export type EquipamentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controlesDeAssistencia?: boolean | Equipamento$controlesDeAssistenciaArgs<ExtArgs>
    controlesdeLaudoTecnico?: boolean | Equipamento$controlesdeLaudoTecnicoArgs<ExtArgs>
    controlesDeLaboratio?: boolean | Equipamento$controlesDeLaboratioArgs<ExtArgs>
    controlesDeMaquinasPendentesLaboratorio?: boolean | Equipamento$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs>
    controlesDeMaquinasPendentesOro?: boolean | Equipamento$controlesDeMaquinasPendentesOroArgs<ExtArgs>
    _count?: boolean | EquipamentoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EquipamentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EquipamentoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EquipamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Equipamento"
    objects: {
      controlesDeAssistencia: Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>[]
      controlesdeLaudoTecnico: Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>[]
      controlesDeLaboratio: Prisma.$controleDeLaboratioPayload<ExtArgs>[]
      controlesDeMaquinasPendentesLaboratorio: Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>[]
      controlesDeMaquinasPendentesOro: Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      patrimonio: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["equipamento"]>
    composites: {}
  }

  type EquipamentoGetPayload<S extends boolean | null | undefined | EquipamentoDefaultArgs> = $Result.GetResult<Prisma.$EquipamentoPayload, S>

  type EquipamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquipamentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EquipamentoCountAggregateInputType | true
    }

  export interface EquipamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Equipamento'], meta: { name: 'Equipamento' } }
    /**
     * Find zero or one Equipamento that matches the filter.
     * @param {EquipamentoFindUniqueArgs} args - Arguments to find a Equipamento
     * @example
     * // Get one Equipamento
     * const equipamento = await prisma.equipamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquipamentoFindUniqueArgs>(args: SelectSubset<T, EquipamentoFindUniqueArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Equipamento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquipamentoFindUniqueOrThrowArgs} args - Arguments to find a Equipamento
     * @example
     * // Get one Equipamento
     * const equipamento = await prisma.equipamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquipamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, EquipamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoFindFirstArgs} args - Arguments to find a Equipamento
     * @example
     * // Get one Equipamento
     * const equipamento = await prisma.equipamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquipamentoFindFirstArgs>(args?: SelectSubset<T, EquipamentoFindFirstArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoFindFirstOrThrowArgs} args - Arguments to find a Equipamento
     * @example
     * // Get one Equipamento
     * const equipamento = await prisma.equipamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquipamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, EquipamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Equipamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipamentos
     * const equipamentos = await prisma.equipamento.findMany()
     * 
     * // Get first 10 Equipamentos
     * const equipamentos = await prisma.equipamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipamentoWithIdOnly = await prisma.equipamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EquipamentoFindManyArgs>(args?: SelectSubset<T, EquipamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Equipamento.
     * @param {EquipamentoCreateArgs} args - Arguments to create a Equipamento.
     * @example
     * // Create one Equipamento
     * const Equipamento = await prisma.equipamento.create({
     *   data: {
     *     // ... data to create a Equipamento
     *   }
     * })
     * 
     */
    create<T extends EquipamentoCreateArgs>(args: SelectSubset<T, EquipamentoCreateArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Equipamentos.
     * @param {EquipamentoCreateManyArgs} args - Arguments to create many Equipamentos.
     * @example
     * // Create many Equipamentos
     * const equipamento = await prisma.equipamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquipamentoCreateManyArgs>(args?: SelectSubset<T, EquipamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Equipamentos and returns the data saved in the database.
     * @param {EquipamentoCreateManyAndReturnArgs} args - Arguments to create many Equipamentos.
     * @example
     * // Create many Equipamentos
     * const equipamento = await prisma.equipamento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Equipamentos and only return the `id`
     * const equipamentoWithIdOnly = await prisma.equipamento.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquipamentoCreateManyAndReturnArgs>(args?: SelectSubset<T, EquipamentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Equipamento.
     * @param {EquipamentoDeleteArgs} args - Arguments to delete one Equipamento.
     * @example
     * // Delete one Equipamento
     * const Equipamento = await prisma.equipamento.delete({
     *   where: {
     *     // ... filter to delete one Equipamento
     *   }
     * })
     * 
     */
    delete<T extends EquipamentoDeleteArgs>(args: SelectSubset<T, EquipamentoDeleteArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Equipamento.
     * @param {EquipamentoUpdateArgs} args - Arguments to update one Equipamento.
     * @example
     * // Update one Equipamento
     * const equipamento = await prisma.equipamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquipamentoUpdateArgs>(args: SelectSubset<T, EquipamentoUpdateArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Equipamentos.
     * @param {EquipamentoDeleteManyArgs} args - Arguments to filter Equipamentos to delete.
     * @example
     * // Delete a few Equipamentos
     * const { count } = await prisma.equipamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquipamentoDeleteManyArgs>(args?: SelectSubset<T, EquipamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipamentos
     * const equipamento = await prisma.equipamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquipamentoUpdateManyArgs>(args: SelectSubset<T, EquipamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipamentos and returns the data updated in the database.
     * @param {EquipamentoUpdateManyAndReturnArgs} args - Arguments to update many Equipamentos.
     * @example
     * // Update many Equipamentos
     * const equipamento = await prisma.equipamento.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Equipamentos and only return the `id`
     * const equipamentoWithIdOnly = await prisma.equipamento.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquipamentoUpdateManyAndReturnArgs>(args: SelectSubset<T, EquipamentoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Equipamento.
     * @param {EquipamentoUpsertArgs} args - Arguments to update or create a Equipamento.
     * @example
     * // Update or create a Equipamento
     * const equipamento = await prisma.equipamento.upsert({
     *   create: {
     *     // ... data to create a Equipamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipamento we want to update
     *   }
     * })
     */
    upsert<T extends EquipamentoUpsertArgs>(args: SelectSubset<T, EquipamentoUpsertArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Equipamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoCountArgs} args - Arguments to filter Equipamentos to count.
     * @example
     * // Count the number of Equipamentos
     * const count = await prisma.equipamento.count({
     *   where: {
     *     // ... the filter for the Equipamentos we want to count
     *   }
     * })
    **/
    count<T extends EquipamentoCountArgs>(
      args?: Subset<T, EquipamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipamentoAggregateArgs>(args: Subset<T, EquipamentoAggregateArgs>): Prisma.PrismaPromise<GetEquipamentoAggregateType<T>>

    /**
     * Group by Equipamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipamentoGroupByArgs['orderBy'] }
        : { orderBy?: EquipamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Equipamento model
   */
  readonly fields: EquipamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Equipamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    controlesDeAssistencia<T extends Equipamento$controlesDeAssistenciaArgs<ExtArgs> = {}>(args?: Subset<T, Equipamento$controlesDeAssistenciaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesdeLaudoTecnico<T extends Equipamento$controlesdeLaudoTecnicoArgs<ExtArgs> = {}>(args?: Subset<T, Equipamento$controlesdeLaudoTecnicoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesDeLaboratio<T extends Equipamento$controlesDeLaboratioArgs<ExtArgs> = {}>(args?: Subset<T, Equipamento$controlesDeLaboratioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesDeMaquinasPendentesLaboratorio<T extends Equipamento$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs> = {}>(args?: Subset<T, Equipamento$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controlesDeMaquinasPendentesOro<T extends Equipamento$controlesDeMaquinasPendentesOroArgs<ExtArgs> = {}>(args?: Subset<T, Equipamento$controlesDeMaquinasPendentesOroArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Equipamento model
   */
  interface EquipamentoFieldRefs {
    readonly id: FieldRef<"Equipamento", 'String'>
    readonly name: FieldRef<"Equipamento", 'String'>
    readonly patrimonio: FieldRef<"Equipamento", 'String'>
    readonly create_at: FieldRef<"Equipamento", 'DateTime'>
    readonly updated_at: FieldRef<"Equipamento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Equipamento findUnique
   */
  export type EquipamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamento to fetch.
     */
    where: EquipamentoWhereUniqueInput
  }

  /**
   * Equipamento findUniqueOrThrow
   */
  export type EquipamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamento to fetch.
     */
    where: EquipamentoWhereUniqueInput
  }

  /**
   * Equipamento findFirst
   */
  export type EquipamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamento to fetch.
     */
    where?: EquipamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipamentos to fetch.
     */
    orderBy?: EquipamentoOrderByWithRelationInput | EquipamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipamentos.
     */
    cursor?: EquipamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipamentos.
     */
    distinct?: EquipamentoScalarFieldEnum | EquipamentoScalarFieldEnum[]
  }

  /**
   * Equipamento findFirstOrThrow
   */
  export type EquipamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamento to fetch.
     */
    where?: EquipamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipamentos to fetch.
     */
    orderBy?: EquipamentoOrderByWithRelationInput | EquipamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipamentos.
     */
    cursor?: EquipamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipamentos.
     */
    distinct?: EquipamentoScalarFieldEnum | EquipamentoScalarFieldEnum[]
  }

  /**
   * Equipamento findMany
   */
  export type EquipamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamentos to fetch.
     */
    where?: EquipamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipamentos to fetch.
     */
    orderBy?: EquipamentoOrderByWithRelationInput | EquipamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Equipamentos.
     */
    cursor?: EquipamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipamentos.
     */
    skip?: number
    distinct?: EquipamentoScalarFieldEnum | EquipamentoScalarFieldEnum[]
  }

  /**
   * Equipamento create
   */
  export type EquipamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Equipamento.
     */
    data: XOR<EquipamentoCreateInput, EquipamentoUncheckedCreateInput>
  }

  /**
   * Equipamento createMany
   */
  export type EquipamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Equipamentos.
     */
    data: EquipamentoCreateManyInput | EquipamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipamento createManyAndReturn
   */
  export type EquipamentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * The data used to create many Equipamentos.
     */
    data: EquipamentoCreateManyInput | EquipamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipamento update
   */
  export type EquipamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Equipamento.
     */
    data: XOR<EquipamentoUpdateInput, EquipamentoUncheckedUpdateInput>
    /**
     * Choose, which Equipamento to update.
     */
    where: EquipamentoWhereUniqueInput
  }

  /**
   * Equipamento updateMany
   */
  export type EquipamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Equipamentos.
     */
    data: XOR<EquipamentoUpdateManyMutationInput, EquipamentoUncheckedUpdateManyInput>
    /**
     * Filter which Equipamentos to update
     */
    where?: EquipamentoWhereInput
    /**
     * Limit how many Equipamentos to update.
     */
    limit?: number
  }

  /**
   * Equipamento updateManyAndReturn
   */
  export type EquipamentoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * The data used to update Equipamentos.
     */
    data: XOR<EquipamentoUpdateManyMutationInput, EquipamentoUncheckedUpdateManyInput>
    /**
     * Filter which Equipamentos to update
     */
    where?: EquipamentoWhereInput
    /**
     * Limit how many Equipamentos to update.
     */
    limit?: number
  }

  /**
   * Equipamento upsert
   */
  export type EquipamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Equipamento to update in case it exists.
     */
    where: EquipamentoWhereUniqueInput
    /**
     * In case the Equipamento found by the `where` argument doesn't exist, create a new Equipamento with this data.
     */
    create: XOR<EquipamentoCreateInput, EquipamentoUncheckedCreateInput>
    /**
     * In case the Equipamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipamentoUpdateInput, EquipamentoUncheckedUpdateInput>
  }

  /**
   * Equipamento delete
   */
  export type EquipamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter which Equipamento to delete.
     */
    where: EquipamentoWhereUniqueInput
  }

  /**
   * Equipamento deleteMany
   */
  export type EquipamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipamentos to delete
     */
    where?: EquipamentoWhereInput
    /**
     * Limit how many Equipamentos to delete.
     */
    limit?: number
  }

  /**
   * Equipamento.controlesDeAssistencia
   */
  export type Equipamento$controlesDeAssistenciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    where?: controleDeAssistenciaTecnicaWhereInput
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeAssistenciaTecnicaScalarFieldEnum | ControleDeAssistenciaTecnicaScalarFieldEnum[]
  }

  /**
   * Equipamento.controlesdeLaudoTecnico
   */
  export type Equipamento$controlesdeLaudoTecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    where?: controleDeLaudoTecnicoWhereInput
    orderBy?: controleDeLaudoTecnicoOrderByWithRelationInput | controleDeLaudoTecnicoOrderByWithRelationInput[]
    cursor?: controleDeLaudoTecnicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeLaudoTecnicoScalarFieldEnum | ControleDeLaudoTecnicoScalarFieldEnum[]
  }

  /**
   * Equipamento.controlesDeLaboratio
   */
  export type Equipamento$controlesDeLaboratioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    where?: controleDeLaboratioWhereInput
    orderBy?: controleDeLaboratioOrderByWithRelationInput | controleDeLaboratioOrderByWithRelationInput[]
    cursor?: controleDeLaboratioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeLaboratioScalarFieldEnum | ControleDeLaboratioScalarFieldEnum[]
  }

  /**
   * Equipamento.controlesDeMaquinasPendentesLaboratorio
   */
  export type Equipamento$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    orderBy?: controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput | controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput[]
    cursor?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeMaquinasPendentesLaboratorioScalarFieldEnum | ControleDeMaquinasPendentesLaboratorioScalarFieldEnum[]
  }

  /**
   * Equipamento.controlesDeMaquinasPendentesOro
   */
  export type Equipamento$controlesDeMaquinasPendentesOroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    where?: controledeMaquinasPendentesOroWhereInput
    orderBy?: controledeMaquinasPendentesOroOrderByWithRelationInput | controledeMaquinasPendentesOroOrderByWithRelationInput[]
    cursor?: controledeMaquinasPendentesOroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControledeMaquinasPendentesOroScalarFieldEnum | ControledeMaquinasPendentesOroScalarFieldEnum[]
  }

  /**
   * Equipamento without action
   */
  export type EquipamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
  }


  /**
   * Model controleDeAssistenciaTecnica
   */

  export type AggregateControleDeAssistenciaTecnica = {
    _count: ControleDeAssistenciaTecnicaCountAggregateOutputType | null
    _min: ControleDeAssistenciaTecnicaMinAggregateOutputType | null
    _max: ControleDeAssistenciaTecnicaMaxAggregateOutputType | null
  }

  export type ControleDeAssistenciaTecnicaMinAggregateOutputType = {
    id: string | null
    name: string | null
    mesAno: Date | null
    idChamado: string | null
    assistencia: string | null
    observacoes: string | null
    osDaAssistencia: string | null
    dataDeRetirada: Date | null
    equipamento_id: string | null
    statusReparo_id: string | null
    statusTeste_id: string | null
    instituicaoUnidade_id: string | null
    tecnico_id: string | null
    cliente_id: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type ControleDeAssistenciaTecnicaMaxAggregateOutputType = {
    id: string | null
    name: string | null
    mesAno: Date | null
    idChamado: string | null
    assistencia: string | null
    observacoes: string | null
    osDaAssistencia: string | null
    dataDeRetirada: Date | null
    equipamento_id: string | null
    statusReparo_id: string | null
    statusTeste_id: string | null
    instituicaoUnidade_id: string | null
    tecnico_id: string | null
    cliente_id: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type ControleDeAssistenciaTecnicaCountAggregateOutputType = {
    id: number
    name: number
    mesAno: number
    idChamado: number
    assistencia: number
    observacoes: number
    osDaAssistencia: number
    dataDeRetirada: number
    equipamento_id: number
    statusReparo_id: number
    statusTeste_id: number
    instituicaoUnidade_id: number
    tecnico_id: number
    cliente_id: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type ControleDeAssistenciaTecnicaMinAggregateInputType = {
    id?: true
    name?: true
    mesAno?: true
    idChamado?: true
    assistencia?: true
    observacoes?: true
    osDaAssistencia?: true
    dataDeRetirada?: true
    equipamento_id?: true
    statusReparo_id?: true
    statusTeste_id?: true
    instituicaoUnidade_id?: true
    tecnico_id?: true
    cliente_id?: true
    create_at?: true
    updated_at?: true
  }

  export type ControleDeAssistenciaTecnicaMaxAggregateInputType = {
    id?: true
    name?: true
    mesAno?: true
    idChamado?: true
    assistencia?: true
    observacoes?: true
    osDaAssistencia?: true
    dataDeRetirada?: true
    equipamento_id?: true
    statusReparo_id?: true
    statusTeste_id?: true
    instituicaoUnidade_id?: true
    tecnico_id?: true
    cliente_id?: true
    create_at?: true
    updated_at?: true
  }

  export type ControleDeAssistenciaTecnicaCountAggregateInputType = {
    id?: true
    name?: true
    mesAno?: true
    idChamado?: true
    assistencia?: true
    observacoes?: true
    osDaAssistencia?: true
    dataDeRetirada?: true
    equipamento_id?: true
    statusReparo_id?: true
    statusTeste_id?: true
    instituicaoUnidade_id?: true
    tecnico_id?: true
    cliente_id?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type ControleDeAssistenciaTecnicaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controleDeAssistenciaTecnica to aggregate.
     */
    where?: controleDeAssistenciaTecnicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeAssistenciaTecnicas to fetch.
     */
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeAssistenciaTecnicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeAssistenciaTecnicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned controleDeAssistenciaTecnicas
    **/
    _count?: true | ControleDeAssistenciaTecnicaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControleDeAssistenciaTecnicaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControleDeAssistenciaTecnicaMaxAggregateInputType
  }

  export type GetControleDeAssistenciaTecnicaAggregateType<T extends ControleDeAssistenciaTecnicaAggregateArgs> = {
        [P in keyof T & keyof AggregateControleDeAssistenciaTecnica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControleDeAssistenciaTecnica[P]>
      : GetScalarType<T[P], AggregateControleDeAssistenciaTecnica[P]>
  }




  export type controleDeAssistenciaTecnicaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeAssistenciaTecnicaWhereInput
    orderBy?: controleDeAssistenciaTecnicaOrderByWithAggregationInput | controleDeAssistenciaTecnicaOrderByWithAggregationInput[]
    by: ControleDeAssistenciaTecnicaScalarFieldEnum[] | ControleDeAssistenciaTecnicaScalarFieldEnum
    having?: controleDeAssistenciaTecnicaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControleDeAssistenciaTecnicaCountAggregateInputType | true
    _min?: ControleDeAssistenciaTecnicaMinAggregateInputType
    _max?: ControleDeAssistenciaTecnicaMaxAggregateInputType
  }

  export type ControleDeAssistenciaTecnicaGroupByOutputType = {
    id: string
    name: string
    mesAno: Date
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date
    equipamento_id: string
    statusReparo_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    cliente_id: string | null
    create_at: Date | null
    updated_at: Date | null
    _count: ControleDeAssistenciaTecnicaCountAggregateOutputType | null
    _min: ControleDeAssistenciaTecnicaMinAggregateOutputType | null
    _max: ControleDeAssistenciaTecnicaMaxAggregateOutputType | null
  }

  type GetControleDeAssistenciaTecnicaGroupByPayload<T extends controleDeAssistenciaTecnicaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControleDeAssistenciaTecnicaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControleDeAssistenciaTecnicaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControleDeAssistenciaTecnicaGroupByOutputType[P]>
            : GetScalarType<T[P], ControleDeAssistenciaTecnicaGroupByOutputType[P]>
        }
      >
    >


  export type controleDeAssistenciaTecnicaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mesAno?: boolean
    idChamado?: boolean
    assistencia?: boolean
    observacoes?: boolean
    osDaAssistencia?: boolean
    dataDeRetirada?: boolean
    equipamento_id?: boolean
    statusReparo_id?: boolean
    statusTeste_id?: boolean
    instituicaoUnidade_id?: boolean
    tecnico_id?: boolean
    cliente_id?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusReparo?: boolean | statusReparoDefaultArgs<ExtArgs>
    statusTeste?: boolean | StatusTesteDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    cliente?: boolean | controleDeAssistenciaTecnica$clienteArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeAssistenciaTecnica"]>

  export type controleDeAssistenciaTecnicaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mesAno?: boolean
    idChamado?: boolean
    assistencia?: boolean
    observacoes?: boolean
    osDaAssistencia?: boolean
    dataDeRetirada?: boolean
    equipamento_id?: boolean
    statusReparo_id?: boolean
    statusTeste_id?: boolean
    instituicaoUnidade_id?: boolean
    tecnico_id?: boolean
    cliente_id?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusReparo?: boolean | statusReparoDefaultArgs<ExtArgs>
    statusTeste?: boolean | StatusTesteDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    cliente?: boolean | controleDeAssistenciaTecnica$clienteArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeAssistenciaTecnica"]>

  export type controleDeAssistenciaTecnicaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mesAno?: boolean
    idChamado?: boolean
    assistencia?: boolean
    observacoes?: boolean
    osDaAssistencia?: boolean
    dataDeRetirada?: boolean
    equipamento_id?: boolean
    statusReparo_id?: boolean
    statusTeste_id?: boolean
    instituicaoUnidade_id?: boolean
    tecnico_id?: boolean
    cliente_id?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusReparo?: boolean | statusReparoDefaultArgs<ExtArgs>
    statusTeste?: boolean | StatusTesteDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    cliente?: boolean | controleDeAssistenciaTecnica$clienteArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeAssistenciaTecnica"]>

  export type controleDeAssistenciaTecnicaSelectScalar = {
    id?: boolean
    name?: boolean
    mesAno?: boolean
    idChamado?: boolean
    assistencia?: boolean
    observacoes?: boolean
    osDaAssistencia?: boolean
    dataDeRetirada?: boolean
    equipamento_id?: boolean
    statusReparo_id?: boolean
    statusTeste_id?: boolean
    instituicaoUnidade_id?: boolean
    tecnico_id?: boolean
    cliente_id?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type controleDeAssistenciaTecnicaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "mesAno" | "idChamado" | "assistencia" | "observacoes" | "osDaAssistencia" | "dataDeRetirada" | "equipamento_id" | "statusReparo_id" | "statusTeste_id" | "instituicaoUnidade_id" | "tecnico_id" | "cliente_id" | "create_at" | "updated_at", ExtArgs["result"]["controleDeAssistenciaTecnica"]>
  export type controleDeAssistenciaTecnicaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusReparo?: boolean | statusReparoDefaultArgs<ExtArgs>
    statusTeste?: boolean | StatusTesteDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    cliente?: boolean | controleDeAssistenciaTecnica$clienteArgs<ExtArgs>
  }
  export type controleDeAssistenciaTecnicaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusReparo?: boolean | statusReparoDefaultArgs<ExtArgs>
    statusTeste?: boolean | StatusTesteDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    cliente?: boolean | controleDeAssistenciaTecnica$clienteArgs<ExtArgs>
  }
  export type controleDeAssistenciaTecnicaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusReparo?: boolean | statusReparoDefaultArgs<ExtArgs>
    statusTeste?: boolean | StatusTesteDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    cliente?: boolean | controleDeAssistenciaTecnica$clienteArgs<ExtArgs>
  }

  export type $controleDeAssistenciaTecnicaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "controleDeAssistenciaTecnica"
    objects: {
      equipamento: Prisma.$EquipamentoPayload<ExtArgs>
      statusReparo: Prisma.$statusReparoPayload<ExtArgs>
      statusTeste: Prisma.$StatusTestePayload<ExtArgs>
      instituicaoUnidade: Prisma.$InstituicaoUnidadePayload<ExtArgs>
      tecnico: Prisma.$TecnicoPayload<ExtArgs>
      cliente: Prisma.$ClientePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      mesAno: Date
      idChamado: string
      assistencia: string
      observacoes: string
      osDaAssistencia: string
      dataDeRetirada: Date
      equipamento_id: string
      statusReparo_id: string
      statusTeste_id: string
      instituicaoUnidade_id: string
      tecnico_id: string
      cliente_id: string | null
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["controleDeAssistenciaTecnica"]>
    composites: {}
  }

  type controleDeAssistenciaTecnicaGetPayload<S extends boolean | null | undefined | controleDeAssistenciaTecnicaDefaultArgs> = $Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload, S>

  type controleDeAssistenciaTecnicaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<controleDeAssistenciaTecnicaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ControleDeAssistenciaTecnicaCountAggregateInputType | true
    }

  export interface controleDeAssistenciaTecnicaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['controleDeAssistenciaTecnica'], meta: { name: 'controleDeAssistenciaTecnica' } }
    /**
     * Find zero or one ControleDeAssistenciaTecnica that matches the filter.
     * @param {controleDeAssistenciaTecnicaFindUniqueArgs} args - Arguments to find a ControleDeAssistenciaTecnica
     * @example
     * // Get one ControleDeAssistenciaTecnica
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends controleDeAssistenciaTecnicaFindUniqueArgs>(args: SelectSubset<T, controleDeAssistenciaTecnicaFindUniqueArgs<ExtArgs>>): Prisma__controleDeAssistenciaTecnicaClient<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ControleDeAssistenciaTecnica that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {controleDeAssistenciaTecnicaFindUniqueOrThrowArgs} args - Arguments to find a ControleDeAssistenciaTecnica
     * @example
     * // Get one ControleDeAssistenciaTecnica
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends controleDeAssistenciaTecnicaFindUniqueOrThrowArgs>(args: SelectSubset<T, controleDeAssistenciaTecnicaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__controleDeAssistenciaTecnicaClient<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControleDeAssistenciaTecnica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeAssistenciaTecnicaFindFirstArgs} args - Arguments to find a ControleDeAssistenciaTecnica
     * @example
     * // Get one ControleDeAssistenciaTecnica
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends controleDeAssistenciaTecnicaFindFirstArgs>(args?: SelectSubset<T, controleDeAssistenciaTecnicaFindFirstArgs<ExtArgs>>): Prisma__controleDeAssistenciaTecnicaClient<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControleDeAssistenciaTecnica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeAssistenciaTecnicaFindFirstOrThrowArgs} args - Arguments to find a ControleDeAssistenciaTecnica
     * @example
     * // Get one ControleDeAssistenciaTecnica
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends controleDeAssistenciaTecnicaFindFirstOrThrowArgs>(args?: SelectSubset<T, controleDeAssistenciaTecnicaFindFirstOrThrowArgs<ExtArgs>>): Prisma__controleDeAssistenciaTecnicaClient<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ControleDeAssistenciaTecnicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeAssistenciaTecnicaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ControleDeAssistenciaTecnicas
     * const controleDeAssistenciaTecnicas = await prisma.controleDeAssistenciaTecnica.findMany()
     * 
     * // Get first 10 ControleDeAssistenciaTecnicas
     * const controleDeAssistenciaTecnicas = await prisma.controleDeAssistenciaTecnica.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controleDeAssistenciaTecnicaWithIdOnly = await prisma.controleDeAssistenciaTecnica.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends controleDeAssistenciaTecnicaFindManyArgs>(args?: SelectSubset<T, controleDeAssistenciaTecnicaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ControleDeAssistenciaTecnica.
     * @param {controleDeAssistenciaTecnicaCreateArgs} args - Arguments to create a ControleDeAssistenciaTecnica.
     * @example
     * // Create one ControleDeAssistenciaTecnica
     * const ControleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.create({
     *   data: {
     *     // ... data to create a ControleDeAssistenciaTecnica
     *   }
     * })
     * 
     */
    create<T extends controleDeAssistenciaTecnicaCreateArgs>(args: SelectSubset<T, controleDeAssistenciaTecnicaCreateArgs<ExtArgs>>): Prisma__controleDeAssistenciaTecnicaClient<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ControleDeAssistenciaTecnicas.
     * @param {controleDeAssistenciaTecnicaCreateManyArgs} args - Arguments to create many ControleDeAssistenciaTecnicas.
     * @example
     * // Create many ControleDeAssistenciaTecnicas
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends controleDeAssistenciaTecnicaCreateManyArgs>(args?: SelectSubset<T, controleDeAssistenciaTecnicaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ControleDeAssistenciaTecnicas and returns the data saved in the database.
     * @param {controleDeAssistenciaTecnicaCreateManyAndReturnArgs} args - Arguments to create many ControleDeAssistenciaTecnicas.
     * @example
     * // Create many ControleDeAssistenciaTecnicas
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ControleDeAssistenciaTecnicas and only return the `id`
     * const controleDeAssistenciaTecnicaWithIdOnly = await prisma.controleDeAssistenciaTecnica.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends controleDeAssistenciaTecnicaCreateManyAndReturnArgs>(args?: SelectSubset<T, controleDeAssistenciaTecnicaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ControleDeAssistenciaTecnica.
     * @param {controleDeAssistenciaTecnicaDeleteArgs} args - Arguments to delete one ControleDeAssistenciaTecnica.
     * @example
     * // Delete one ControleDeAssistenciaTecnica
     * const ControleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.delete({
     *   where: {
     *     // ... filter to delete one ControleDeAssistenciaTecnica
     *   }
     * })
     * 
     */
    delete<T extends controleDeAssistenciaTecnicaDeleteArgs>(args: SelectSubset<T, controleDeAssistenciaTecnicaDeleteArgs<ExtArgs>>): Prisma__controleDeAssistenciaTecnicaClient<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ControleDeAssistenciaTecnica.
     * @param {controleDeAssistenciaTecnicaUpdateArgs} args - Arguments to update one ControleDeAssistenciaTecnica.
     * @example
     * // Update one ControleDeAssistenciaTecnica
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends controleDeAssistenciaTecnicaUpdateArgs>(args: SelectSubset<T, controleDeAssistenciaTecnicaUpdateArgs<ExtArgs>>): Prisma__controleDeAssistenciaTecnicaClient<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ControleDeAssistenciaTecnicas.
     * @param {controleDeAssistenciaTecnicaDeleteManyArgs} args - Arguments to filter ControleDeAssistenciaTecnicas to delete.
     * @example
     * // Delete a few ControleDeAssistenciaTecnicas
     * const { count } = await prisma.controleDeAssistenciaTecnica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends controleDeAssistenciaTecnicaDeleteManyArgs>(args?: SelectSubset<T, controleDeAssistenciaTecnicaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControleDeAssistenciaTecnicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeAssistenciaTecnicaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ControleDeAssistenciaTecnicas
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends controleDeAssistenciaTecnicaUpdateManyArgs>(args: SelectSubset<T, controleDeAssistenciaTecnicaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControleDeAssistenciaTecnicas and returns the data updated in the database.
     * @param {controleDeAssistenciaTecnicaUpdateManyAndReturnArgs} args - Arguments to update many ControleDeAssistenciaTecnicas.
     * @example
     * // Update many ControleDeAssistenciaTecnicas
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ControleDeAssistenciaTecnicas and only return the `id`
     * const controleDeAssistenciaTecnicaWithIdOnly = await prisma.controleDeAssistenciaTecnica.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends controleDeAssistenciaTecnicaUpdateManyAndReturnArgs>(args: SelectSubset<T, controleDeAssistenciaTecnicaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ControleDeAssistenciaTecnica.
     * @param {controleDeAssistenciaTecnicaUpsertArgs} args - Arguments to update or create a ControleDeAssistenciaTecnica.
     * @example
     * // Update or create a ControleDeAssistenciaTecnica
     * const controleDeAssistenciaTecnica = await prisma.controleDeAssistenciaTecnica.upsert({
     *   create: {
     *     // ... data to create a ControleDeAssistenciaTecnica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ControleDeAssistenciaTecnica we want to update
     *   }
     * })
     */
    upsert<T extends controleDeAssistenciaTecnicaUpsertArgs>(args: SelectSubset<T, controleDeAssistenciaTecnicaUpsertArgs<ExtArgs>>): Prisma__controleDeAssistenciaTecnicaClient<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ControleDeAssistenciaTecnicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeAssistenciaTecnicaCountArgs} args - Arguments to filter ControleDeAssistenciaTecnicas to count.
     * @example
     * // Count the number of ControleDeAssistenciaTecnicas
     * const count = await prisma.controleDeAssistenciaTecnica.count({
     *   where: {
     *     // ... the filter for the ControleDeAssistenciaTecnicas we want to count
     *   }
     * })
    **/
    count<T extends controleDeAssistenciaTecnicaCountArgs>(
      args?: Subset<T, controleDeAssistenciaTecnicaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControleDeAssistenciaTecnicaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ControleDeAssistenciaTecnica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControleDeAssistenciaTecnicaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControleDeAssistenciaTecnicaAggregateArgs>(args: Subset<T, ControleDeAssistenciaTecnicaAggregateArgs>): Prisma.PrismaPromise<GetControleDeAssistenciaTecnicaAggregateType<T>>

    /**
     * Group by ControleDeAssistenciaTecnica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeAssistenciaTecnicaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends controleDeAssistenciaTecnicaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: controleDeAssistenciaTecnicaGroupByArgs['orderBy'] }
        : { orderBy?: controleDeAssistenciaTecnicaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, controleDeAssistenciaTecnicaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControleDeAssistenciaTecnicaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the controleDeAssistenciaTecnica model
   */
  readonly fields: controleDeAssistenciaTecnicaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for controleDeAssistenciaTecnica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__controleDeAssistenciaTecnicaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipamento<T extends EquipamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipamentoDefaultArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    statusReparo<T extends statusReparoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, statusReparoDefaultArgs<ExtArgs>>): Prisma__statusReparoClient<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    statusTeste<T extends StatusTesteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusTesteDefaultArgs<ExtArgs>>): Prisma__StatusTesteClient<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instituicaoUnidade<T extends InstituicaoUnidadeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidadeDefaultArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tecnico<T extends TecnicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TecnicoDefaultArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cliente<T extends controleDeAssistenciaTecnica$clienteArgs<ExtArgs> = {}>(args?: Subset<T, controleDeAssistenciaTecnica$clienteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the controleDeAssistenciaTecnica model
   */
  interface controleDeAssistenciaTecnicaFieldRefs {
    readonly id: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly name: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly mesAno: FieldRef<"controleDeAssistenciaTecnica", 'DateTime'>
    readonly idChamado: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly assistencia: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly observacoes: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly osDaAssistencia: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly dataDeRetirada: FieldRef<"controleDeAssistenciaTecnica", 'DateTime'>
    readonly equipamento_id: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly statusReparo_id: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly statusTeste_id: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly instituicaoUnidade_id: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly tecnico_id: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly cliente_id: FieldRef<"controleDeAssistenciaTecnica", 'String'>
    readonly create_at: FieldRef<"controleDeAssistenciaTecnica", 'DateTime'>
    readonly updated_at: FieldRef<"controleDeAssistenciaTecnica", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * controleDeAssistenciaTecnica findUnique
   */
  export type controleDeAssistenciaTecnicaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which controleDeAssistenciaTecnica to fetch.
     */
    where: controleDeAssistenciaTecnicaWhereUniqueInput
  }

  /**
   * controleDeAssistenciaTecnica findUniqueOrThrow
   */
  export type controleDeAssistenciaTecnicaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which controleDeAssistenciaTecnica to fetch.
     */
    where: controleDeAssistenciaTecnicaWhereUniqueInput
  }

  /**
   * controleDeAssistenciaTecnica findFirst
   */
  export type controleDeAssistenciaTecnicaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which controleDeAssistenciaTecnica to fetch.
     */
    where?: controleDeAssistenciaTecnicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeAssistenciaTecnicas to fetch.
     */
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controleDeAssistenciaTecnicas.
     */
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeAssistenciaTecnicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeAssistenciaTecnicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controleDeAssistenciaTecnicas.
     */
    distinct?: ControleDeAssistenciaTecnicaScalarFieldEnum | ControleDeAssistenciaTecnicaScalarFieldEnum[]
  }

  /**
   * controleDeAssistenciaTecnica findFirstOrThrow
   */
  export type controleDeAssistenciaTecnicaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which controleDeAssistenciaTecnica to fetch.
     */
    where?: controleDeAssistenciaTecnicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeAssistenciaTecnicas to fetch.
     */
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controleDeAssistenciaTecnicas.
     */
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeAssistenciaTecnicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeAssistenciaTecnicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controleDeAssistenciaTecnicas.
     */
    distinct?: ControleDeAssistenciaTecnicaScalarFieldEnum | ControleDeAssistenciaTecnicaScalarFieldEnum[]
  }

  /**
   * controleDeAssistenciaTecnica findMany
   */
  export type controleDeAssistenciaTecnicaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which controleDeAssistenciaTecnicas to fetch.
     */
    where?: controleDeAssistenciaTecnicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeAssistenciaTecnicas to fetch.
     */
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing controleDeAssistenciaTecnicas.
     */
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeAssistenciaTecnicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeAssistenciaTecnicas.
     */
    skip?: number
    distinct?: ControleDeAssistenciaTecnicaScalarFieldEnum | ControleDeAssistenciaTecnicaScalarFieldEnum[]
  }

  /**
   * controleDeAssistenciaTecnica create
   */
  export type controleDeAssistenciaTecnicaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    /**
     * The data needed to create a controleDeAssistenciaTecnica.
     */
    data: XOR<controleDeAssistenciaTecnicaCreateInput, controleDeAssistenciaTecnicaUncheckedCreateInput>
  }

  /**
   * controleDeAssistenciaTecnica createMany
   */
  export type controleDeAssistenciaTecnicaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many controleDeAssistenciaTecnicas.
     */
    data: controleDeAssistenciaTecnicaCreateManyInput | controleDeAssistenciaTecnicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * controleDeAssistenciaTecnica createManyAndReturn
   */
  export type controleDeAssistenciaTecnicaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * The data used to create many controleDeAssistenciaTecnicas.
     */
    data: controleDeAssistenciaTecnicaCreateManyInput | controleDeAssistenciaTecnicaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * controleDeAssistenciaTecnica update
   */
  export type controleDeAssistenciaTecnicaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    /**
     * The data needed to update a controleDeAssistenciaTecnica.
     */
    data: XOR<controleDeAssistenciaTecnicaUpdateInput, controleDeAssistenciaTecnicaUncheckedUpdateInput>
    /**
     * Choose, which controleDeAssistenciaTecnica to update.
     */
    where: controleDeAssistenciaTecnicaWhereUniqueInput
  }

  /**
   * controleDeAssistenciaTecnica updateMany
   */
  export type controleDeAssistenciaTecnicaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update controleDeAssistenciaTecnicas.
     */
    data: XOR<controleDeAssistenciaTecnicaUpdateManyMutationInput, controleDeAssistenciaTecnicaUncheckedUpdateManyInput>
    /**
     * Filter which controleDeAssistenciaTecnicas to update
     */
    where?: controleDeAssistenciaTecnicaWhereInput
    /**
     * Limit how many controleDeAssistenciaTecnicas to update.
     */
    limit?: number
  }

  /**
   * controleDeAssistenciaTecnica updateManyAndReturn
   */
  export type controleDeAssistenciaTecnicaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * The data used to update controleDeAssistenciaTecnicas.
     */
    data: XOR<controleDeAssistenciaTecnicaUpdateManyMutationInput, controleDeAssistenciaTecnicaUncheckedUpdateManyInput>
    /**
     * Filter which controleDeAssistenciaTecnicas to update
     */
    where?: controleDeAssistenciaTecnicaWhereInput
    /**
     * Limit how many controleDeAssistenciaTecnicas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * controleDeAssistenciaTecnica upsert
   */
  export type controleDeAssistenciaTecnicaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    /**
     * The filter to search for the controleDeAssistenciaTecnica to update in case it exists.
     */
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    /**
     * In case the controleDeAssistenciaTecnica found by the `where` argument doesn't exist, create a new controleDeAssistenciaTecnica with this data.
     */
    create: XOR<controleDeAssistenciaTecnicaCreateInput, controleDeAssistenciaTecnicaUncheckedCreateInput>
    /**
     * In case the controleDeAssistenciaTecnica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<controleDeAssistenciaTecnicaUpdateInput, controleDeAssistenciaTecnicaUncheckedUpdateInput>
  }

  /**
   * controleDeAssistenciaTecnica delete
   */
  export type controleDeAssistenciaTecnicaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    /**
     * Filter which controleDeAssistenciaTecnica to delete.
     */
    where: controleDeAssistenciaTecnicaWhereUniqueInput
  }

  /**
   * controleDeAssistenciaTecnica deleteMany
   */
  export type controleDeAssistenciaTecnicaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controleDeAssistenciaTecnicas to delete
     */
    where?: controleDeAssistenciaTecnicaWhereInput
    /**
     * Limit how many controleDeAssistenciaTecnicas to delete.
     */
    limit?: number
  }

  /**
   * controleDeAssistenciaTecnica.cliente
   */
  export type controleDeAssistenciaTecnica$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }

  /**
   * controleDeAssistenciaTecnica without action
   */
  export type controleDeAssistenciaTecnicaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
  }


  /**
   * Model statusReparo
   */

  export type AggregateStatusReparo = {
    _count: StatusReparoCountAggregateOutputType | null
    _min: StatusReparoMinAggregateOutputType | null
    _max: StatusReparoMaxAggregateOutputType | null
  }

  export type StatusReparoMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusReparoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusReparoCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type StatusReparoMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusReparoMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusReparoCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type StatusReparoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusReparo to aggregate.
     */
    where?: statusReparoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusReparos to fetch.
     */
    orderBy?: statusReparoOrderByWithRelationInput | statusReparoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusReparoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusReparos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusReparos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statusReparos
    **/
    _count?: true | StatusReparoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusReparoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusReparoMaxAggregateInputType
  }

  export type GetStatusReparoAggregateType<T extends StatusReparoAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusReparo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusReparo[P]>
      : GetScalarType<T[P], AggregateStatusReparo[P]>
  }




  export type statusReparoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: statusReparoWhereInput
    orderBy?: statusReparoOrderByWithAggregationInput | statusReparoOrderByWithAggregationInput[]
    by: StatusReparoScalarFieldEnum[] | StatusReparoScalarFieldEnum
    having?: statusReparoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusReparoCountAggregateInputType | true
    _min?: StatusReparoMinAggregateInputType
    _max?: StatusReparoMaxAggregateInputType
  }

  export type StatusReparoGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: StatusReparoCountAggregateOutputType | null
    _min: StatusReparoMinAggregateOutputType | null
    _max: StatusReparoMaxAggregateOutputType | null
  }

  type GetStatusReparoGroupByPayload<T extends statusReparoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusReparoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusReparoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusReparoGroupByOutputType[P]>
            : GetScalarType<T[P], StatusReparoGroupByOutputType[P]>
        }
      >
    >


  export type statusReparoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    controleDeAssistenciaTecnica?: boolean | statusReparo$controleDeAssistenciaTecnicaArgs<ExtArgs>
    _count?: boolean | StatusReparoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusReparo"]>

  export type statusReparoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusReparo"]>

  export type statusReparoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusReparo"]>

  export type statusReparoSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type statusReparoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["statusReparo"]>
  export type statusReparoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controleDeAssistenciaTecnica?: boolean | statusReparo$controleDeAssistenciaTecnicaArgs<ExtArgs>
    _count?: boolean | StatusReparoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type statusReparoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type statusReparoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $statusReparoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "statusReparo"
    objects: {
      controleDeAssistenciaTecnica: Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["statusReparo"]>
    composites: {}
  }

  type statusReparoGetPayload<S extends boolean | null | undefined | statusReparoDefaultArgs> = $Result.GetResult<Prisma.$statusReparoPayload, S>

  type statusReparoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<statusReparoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusReparoCountAggregateInputType | true
    }

  export interface statusReparoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['statusReparo'], meta: { name: 'statusReparo' } }
    /**
     * Find zero or one StatusReparo that matches the filter.
     * @param {statusReparoFindUniqueArgs} args - Arguments to find a StatusReparo
     * @example
     * // Get one StatusReparo
     * const statusReparo = await prisma.statusReparo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends statusReparoFindUniqueArgs>(args: SelectSubset<T, statusReparoFindUniqueArgs<ExtArgs>>): Prisma__statusReparoClient<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusReparo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {statusReparoFindUniqueOrThrowArgs} args - Arguments to find a StatusReparo
     * @example
     * // Get one StatusReparo
     * const statusReparo = await prisma.statusReparo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends statusReparoFindUniqueOrThrowArgs>(args: SelectSubset<T, statusReparoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__statusReparoClient<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusReparo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusReparoFindFirstArgs} args - Arguments to find a StatusReparo
     * @example
     * // Get one StatusReparo
     * const statusReparo = await prisma.statusReparo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends statusReparoFindFirstArgs>(args?: SelectSubset<T, statusReparoFindFirstArgs<ExtArgs>>): Prisma__statusReparoClient<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusReparo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusReparoFindFirstOrThrowArgs} args - Arguments to find a StatusReparo
     * @example
     * // Get one StatusReparo
     * const statusReparo = await prisma.statusReparo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends statusReparoFindFirstOrThrowArgs>(args?: SelectSubset<T, statusReparoFindFirstOrThrowArgs<ExtArgs>>): Prisma__statusReparoClient<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusReparos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusReparoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusReparos
     * const statusReparos = await prisma.statusReparo.findMany()
     * 
     * // Get first 10 StatusReparos
     * const statusReparos = await prisma.statusReparo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusReparoWithIdOnly = await prisma.statusReparo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends statusReparoFindManyArgs>(args?: SelectSubset<T, statusReparoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusReparo.
     * @param {statusReparoCreateArgs} args - Arguments to create a StatusReparo.
     * @example
     * // Create one StatusReparo
     * const StatusReparo = await prisma.statusReparo.create({
     *   data: {
     *     // ... data to create a StatusReparo
     *   }
     * })
     * 
     */
    create<T extends statusReparoCreateArgs>(args: SelectSubset<T, statusReparoCreateArgs<ExtArgs>>): Prisma__statusReparoClient<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusReparos.
     * @param {statusReparoCreateManyArgs} args - Arguments to create many StatusReparos.
     * @example
     * // Create many StatusReparos
     * const statusReparo = await prisma.statusReparo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends statusReparoCreateManyArgs>(args?: SelectSubset<T, statusReparoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusReparos and returns the data saved in the database.
     * @param {statusReparoCreateManyAndReturnArgs} args - Arguments to create many StatusReparos.
     * @example
     * // Create many StatusReparos
     * const statusReparo = await prisma.statusReparo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusReparos and only return the `id`
     * const statusReparoWithIdOnly = await prisma.statusReparo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends statusReparoCreateManyAndReturnArgs>(args?: SelectSubset<T, statusReparoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusReparo.
     * @param {statusReparoDeleteArgs} args - Arguments to delete one StatusReparo.
     * @example
     * // Delete one StatusReparo
     * const StatusReparo = await prisma.statusReparo.delete({
     *   where: {
     *     // ... filter to delete one StatusReparo
     *   }
     * })
     * 
     */
    delete<T extends statusReparoDeleteArgs>(args: SelectSubset<T, statusReparoDeleteArgs<ExtArgs>>): Prisma__statusReparoClient<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusReparo.
     * @param {statusReparoUpdateArgs} args - Arguments to update one StatusReparo.
     * @example
     * // Update one StatusReparo
     * const statusReparo = await prisma.statusReparo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends statusReparoUpdateArgs>(args: SelectSubset<T, statusReparoUpdateArgs<ExtArgs>>): Prisma__statusReparoClient<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusReparos.
     * @param {statusReparoDeleteManyArgs} args - Arguments to filter StatusReparos to delete.
     * @example
     * // Delete a few StatusReparos
     * const { count } = await prisma.statusReparo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends statusReparoDeleteManyArgs>(args?: SelectSubset<T, statusReparoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusReparos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusReparoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusReparos
     * const statusReparo = await prisma.statusReparo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends statusReparoUpdateManyArgs>(args: SelectSubset<T, statusReparoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusReparos and returns the data updated in the database.
     * @param {statusReparoUpdateManyAndReturnArgs} args - Arguments to update many StatusReparos.
     * @example
     * // Update many StatusReparos
     * const statusReparo = await prisma.statusReparo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusReparos and only return the `id`
     * const statusReparoWithIdOnly = await prisma.statusReparo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends statusReparoUpdateManyAndReturnArgs>(args: SelectSubset<T, statusReparoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusReparo.
     * @param {statusReparoUpsertArgs} args - Arguments to update or create a StatusReparo.
     * @example
     * // Update or create a StatusReparo
     * const statusReparo = await prisma.statusReparo.upsert({
     *   create: {
     *     // ... data to create a StatusReparo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusReparo we want to update
     *   }
     * })
     */
    upsert<T extends statusReparoUpsertArgs>(args: SelectSubset<T, statusReparoUpsertArgs<ExtArgs>>): Prisma__statusReparoClient<$Result.GetResult<Prisma.$statusReparoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusReparos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusReparoCountArgs} args - Arguments to filter StatusReparos to count.
     * @example
     * // Count the number of StatusReparos
     * const count = await prisma.statusReparo.count({
     *   where: {
     *     // ... the filter for the StatusReparos we want to count
     *   }
     * })
    **/
    count<T extends statusReparoCountArgs>(
      args?: Subset<T, statusReparoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusReparoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusReparo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusReparoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusReparoAggregateArgs>(args: Subset<T, StatusReparoAggregateArgs>): Prisma.PrismaPromise<GetStatusReparoAggregateType<T>>

    /**
     * Group by StatusReparo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusReparoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends statusReparoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: statusReparoGroupByArgs['orderBy'] }
        : { orderBy?: statusReparoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, statusReparoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusReparoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the statusReparo model
   */
  readonly fields: statusReparoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for statusReparo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__statusReparoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    controleDeAssistenciaTecnica<T extends statusReparo$controleDeAssistenciaTecnicaArgs<ExtArgs> = {}>(args?: Subset<T, statusReparo$controleDeAssistenciaTecnicaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the statusReparo model
   */
  interface statusReparoFieldRefs {
    readonly id: FieldRef<"statusReparo", 'String'>
    readonly name: FieldRef<"statusReparo", 'String'>
    readonly create_at: FieldRef<"statusReparo", 'DateTime'>
    readonly updated_at: FieldRef<"statusReparo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * statusReparo findUnique
   */
  export type statusReparoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
    /**
     * Filter, which statusReparo to fetch.
     */
    where: statusReparoWhereUniqueInput
  }

  /**
   * statusReparo findUniqueOrThrow
   */
  export type statusReparoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
    /**
     * Filter, which statusReparo to fetch.
     */
    where: statusReparoWhereUniqueInput
  }

  /**
   * statusReparo findFirst
   */
  export type statusReparoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
    /**
     * Filter, which statusReparo to fetch.
     */
    where?: statusReparoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusReparos to fetch.
     */
    orderBy?: statusReparoOrderByWithRelationInput | statusReparoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusReparos.
     */
    cursor?: statusReparoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusReparos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusReparos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusReparos.
     */
    distinct?: StatusReparoScalarFieldEnum | StatusReparoScalarFieldEnum[]
  }

  /**
   * statusReparo findFirstOrThrow
   */
  export type statusReparoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
    /**
     * Filter, which statusReparo to fetch.
     */
    where?: statusReparoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusReparos to fetch.
     */
    orderBy?: statusReparoOrderByWithRelationInput | statusReparoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusReparos.
     */
    cursor?: statusReparoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusReparos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusReparos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusReparos.
     */
    distinct?: StatusReparoScalarFieldEnum | StatusReparoScalarFieldEnum[]
  }

  /**
   * statusReparo findMany
   */
  export type statusReparoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
    /**
     * Filter, which statusReparos to fetch.
     */
    where?: statusReparoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusReparos to fetch.
     */
    orderBy?: statusReparoOrderByWithRelationInput | statusReparoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statusReparos.
     */
    cursor?: statusReparoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusReparos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusReparos.
     */
    skip?: number
    distinct?: StatusReparoScalarFieldEnum | StatusReparoScalarFieldEnum[]
  }

  /**
   * statusReparo create
   */
  export type statusReparoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
    /**
     * The data needed to create a statusReparo.
     */
    data: XOR<statusReparoCreateInput, statusReparoUncheckedCreateInput>
  }

  /**
   * statusReparo createMany
   */
  export type statusReparoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many statusReparos.
     */
    data: statusReparoCreateManyInput | statusReparoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusReparo createManyAndReturn
   */
  export type statusReparoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * The data used to create many statusReparos.
     */
    data: statusReparoCreateManyInput | statusReparoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusReparo update
   */
  export type statusReparoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
    /**
     * The data needed to update a statusReparo.
     */
    data: XOR<statusReparoUpdateInput, statusReparoUncheckedUpdateInput>
    /**
     * Choose, which statusReparo to update.
     */
    where: statusReparoWhereUniqueInput
  }

  /**
   * statusReparo updateMany
   */
  export type statusReparoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update statusReparos.
     */
    data: XOR<statusReparoUpdateManyMutationInput, statusReparoUncheckedUpdateManyInput>
    /**
     * Filter which statusReparos to update
     */
    where?: statusReparoWhereInput
    /**
     * Limit how many statusReparos to update.
     */
    limit?: number
  }

  /**
   * statusReparo updateManyAndReturn
   */
  export type statusReparoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * The data used to update statusReparos.
     */
    data: XOR<statusReparoUpdateManyMutationInput, statusReparoUncheckedUpdateManyInput>
    /**
     * Filter which statusReparos to update
     */
    where?: statusReparoWhereInput
    /**
     * Limit how many statusReparos to update.
     */
    limit?: number
  }

  /**
   * statusReparo upsert
   */
  export type statusReparoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
    /**
     * The filter to search for the statusReparo to update in case it exists.
     */
    where: statusReparoWhereUniqueInput
    /**
     * In case the statusReparo found by the `where` argument doesn't exist, create a new statusReparo with this data.
     */
    create: XOR<statusReparoCreateInput, statusReparoUncheckedCreateInput>
    /**
     * In case the statusReparo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusReparoUpdateInput, statusReparoUncheckedUpdateInput>
  }

  /**
   * statusReparo delete
   */
  export type statusReparoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
    /**
     * Filter which statusReparo to delete.
     */
    where: statusReparoWhereUniqueInput
  }

  /**
   * statusReparo deleteMany
   */
  export type statusReparoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusReparos to delete
     */
    where?: statusReparoWhereInput
    /**
     * Limit how many statusReparos to delete.
     */
    limit?: number
  }

  /**
   * statusReparo.controleDeAssistenciaTecnica
   */
  export type statusReparo$controleDeAssistenciaTecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    where?: controleDeAssistenciaTecnicaWhereInput
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeAssistenciaTecnicaScalarFieldEnum | ControleDeAssistenciaTecnicaScalarFieldEnum[]
  }

  /**
   * statusReparo without action
   */
  export type statusReparoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusReparo
     */
    select?: statusReparoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusReparo
     */
    omit?: statusReparoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusReparoInclude<ExtArgs> | null
  }


  /**
   * Model StatusTeste
   */

  export type AggregateStatusTeste = {
    _count: StatusTesteCountAggregateOutputType | null
    _min: StatusTesteMinAggregateOutputType | null
    _max: StatusTesteMaxAggregateOutputType | null
  }

  export type StatusTesteMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusTesteMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusTesteCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type StatusTesteMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusTesteMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusTesteCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type StatusTesteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusTeste to aggregate.
     */
    where?: StatusTesteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusTestes to fetch.
     */
    orderBy?: StatusTesteOrderByWithRelationInput | StatusTesteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusTesteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusTestes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusTestes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusTestes
    **/
    _count?: true | StatusTesteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusTesteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusTesteMaxAggregateInputType
  }

  export type GetStatusTesteAggregateType<T extends StatusTesteAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusTeste]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusTeste[P]>
      : GetScalarType<T[P], AggregateStatusTeste[P]>
  }




  export type StatusTesteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusTesteWhereInput
    orderBy?: StatusTesteOrderByWithAggregationInput | StatusTesteOrderByWithAggregationInput[]
    by: StatusTesteScalarFieldEnum[] | StatusTesteScalarFieldEnum
    having?: StatusTesteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusTesteCountAggregateInputType | true
    _min?: StatusTesteMinAggregateInputType
    _max?: StatusTesteMaxAggregateInputType
  }

  export type StatusTesteGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: StatusTesteCountAggregateOutputType | null
    _min: StatusTesteMinAggregateOutputType | null
    _max: StatusTesteMaxAggregateOutputType | null
  }

  type GetStatusTesteGroupByPayload<T extends StatusTesteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusTesteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusTesteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusTesteGroupByOutputType[P]>
            : GetScalarType<T[P], StatusTesteGroupByOutputType[P]>
        }
      >
    >


  export type StatusTesteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    controleDeAssistenciaTecnica?: boolean | StatusTeste$controleDeAssistenciaTecnicaArgs<ExtArgs>
    _count?: boolean | StatusTesteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusTeste"]>

  export type StatusTesteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusTeste"]>

  export type StatusTesteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusTeste"]>

  export type StatusTesteSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type StatusTesteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["statusTeste"]>
  export type StatusTesteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controleDeAssistenciaTecnica?: boolean | StatusTeste$controleDeAssistenciaTecnicaArgs<ExtArgs>
    _count?: boolean | StatusTesteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StatusTesteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StatusTesteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StatusTestePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusTeste"
    objects: {
      controleDeAssistenciaTecnica: Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["statusTeste"]>
    composites: {}
  }

  type StatusTesteGetPayload<S extends boolean | null | undefined | StatusTesteDefaultArgs> = $Result.GetResult<Prisma.$StatusTestePayload, S>

  type StatusTesteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusTesteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusTesteCountAggregateInputType | true
    }

  export interface StatusTesteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusTeste'], meta: { name: 'StatusTeste' } }
    /**
     * Find zero or one StatusTeste that matches the filter.
     * @param {StatusTesteFindUniqueArgs} args - Arguments to find a StatusTeste
     * @example
     * // Get one StatusTeste
     * const statusTeste = await prisma.statusTeste.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusTesteFindUniqueArgs>(args: SelectSubset<T, StatusTesteFindUniqueArgs<ExtArgs>>): Prisma__StatusTesteClient<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusTeste that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusTesteFindUniqueOrThrowArgs} args - Arguments to find a StatusTeste
     * @example
     * // Get one StatusTeste
     * const statusTeste = await prisma.statusTeste.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusTesteFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusTesteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusTesteClient<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusTeste that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusTesteFindFirstArgs} args - Arguments to find a StatusTeste
     * @example
     * // Get one StatusTeste
     * const statusTeste = await prisma.statusTeste.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusTesteFindFirstArgs>(args?: SelectSubset<T, StatusTesteFindFirstArgs<ExtArgs>>): Prisma__StatusTesteClient<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusTeste that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusTesteFindFirstOrThrowArgs} args - Arguments to find a StatusTeste
     * @example
     * // Get one StatusTeste
     * const statusTeste = await prisma.statusTeste.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusTesteFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusTesteFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusTesteClient<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusTestes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusTesteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusTestes
     * const statusTestes = await prisma.statusTeste.findMany()
     * 
     * // Get first 10 StatusTestes
     * const statusTestes = await prisma.statusTeste.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusTesteWithIdOnly = await prisma.statusTeste.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusTesteFindManyArgs>(args?: SelectSubset<T, StatusTesteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusTeste.
     * @param {StatusTesteCreateArgs} args - Arguments to create a StatusTeste.
     * @example
     * // Create one StatusTeste
     * const StatusTeste = await prisma.statusTeste.create({
     *   data: {
     *     // ... data to create a StatusTeste
     *   }
     * })
     * 
     */
    create<T extends StatusTesteCreateArgs>(args: SelectSubset<T, StatusTesteCreateArgs<ExtArgs>>): Prisma__StatusTesteClient<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusTestes.
     * @param {StatusTesteCreateManyArgs} args - Arguments to create many StatusTestes.
     * @example
     * // Create many StatusTestes
     * const statusTeste = await prisma.statusTeste.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusTesteCreateManyArgs>(args?: SelectSubset<T, StatusTesteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusTestes and returns the data saved in the database.
     * @param {StatusTesteCreateManyAndReturnArgs} args - Arguments to create many StatusTestes.
     * @example
     * // Create many StatusTestes
     * const statusTeste = await prisma.statusTeste.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusTestes and only return the `id`
     * const statusTesteWithIdOnly = await prisma.statusTeste.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StatusTesteCreateManyAndReturnArgs>(args?: SelectSubset<T, StatusTesteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusTeste.
     * @param {StatusTesteDeleteArgs} args - Arguments to delete one StatusTeste.
     * @example
     * // Delete one StatusTeste
     * const StatusTeste = await prisma.statusTeste.delete({
     *   where: {
     *     // ... filter to delete one StatusTeste
     *   }
     * })
     * 
     */
    delete<T extends StatusTesteDeleteArgs>(args: SelectSubset<T, StatusTesteDeleteArgs<ExtArgs>>): Prisma__StatusTesteClient<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusTeste.
     * @param {StatusTesteUpdateArgs} args - Arguments to update one StatusTeste.
     * @example
     * // Update one StatusTeste
     * const statusTeste = await prisma.statusTeste.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusTesteUpdateArgs>(args: SelectSubset<T, StatusTesteUpdateArgs<ExtArgs>>): Prisma__StatusTesteClient<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusTestes.
     * @param {StatusTesteDeleteManyArgs} args - Arguments to filter StatusTestes to delete.
     * @example
     * // Delete a few StatusTestes
     * const { count } = await prisma.statusTeste.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusTesteDeleteManyArgs>(args?: SelectSubset<T, StatusTesteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusTestes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusTesteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusTestes
     * const statusTeste = await prisma.statusTeste.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusTesteUpdateManyArgs>(args: SelectSubset<T, StatusTesteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusTestes and returns the data updated in the database.
     * @param {StatusTesteUpdateManyAndReturnArgs} args - Arguments to update many StatusTestes.
     * @example
     * // Update many StatusTestes
     * const statusTeste = await prisma.statusTeste.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusTestes and only return the `id`
     * const statusTesteWithIdOnly = await prisma.statusTeste.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StatusTesteUpdateManyAndReturnArgs>(args: SelectSubset<T, StatusTesteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusTeste.
     * @param {StatusTesteUpsertArgs} args - Arguments to update or create a StatusTeste.
     * @example
     * // Update or create a StatusTeste
     * const statusTeste = await prisma.statusTeste.upsert({
     *   create: {
     *     // ... data to create a StatusTeste
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusTeste we want to update
     *   }
     * })
     */
    upsert<T extends StatusTesteUpsertArgs>(args: SelectSubset<T, StatusTesteUpsertArgs<ExtArgs>>): Prisma__StatusTesteClient<$Result.GetResult<Prisma.$StatusTestePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusTestes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusTesteCountArgs} args - Arguments to filter StatusTestes to count.
     * @example
     * // Count the number of StatusTestes
     * const count = await prisma.statusTeste.count({
     *   where: {
     *     // ... the filter for the StatusTestes we want to count
     *   }
     * })
    **/
    count<T extends StatusTesteCountArgs>(
      args?: Subset<T, StatusTesteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusTesteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusTeste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusTesteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusTesteAggregateArgs>(args: Subset<T, StatusTesteAggregateArgs>): Prisma.PrismaPromise<GetStatusTesteAggregateType<T>>

    /**
     * Group by StatusTeste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusTesteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusTesteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusTesteGroupByArgs['orderBy'] }
        : { orderBy?: StatusTesteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusTesteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusTesteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusTeste model
   */
  readonly fields: StatusTesteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusTeste.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusTesteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    controleDeAssistenciaTecnica<T extends StatusTeste$controleDeAssistenciaTecnicaArgs<ExtArgs> = {}>(args?: Subset<T, StatusTeste$controleDeAssistenciaTecnicaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeAssistenciaTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StatusTeste model
   */
  interface StatusTesteFieldRefs {
    readonly id: FieldRef<"StatusTeste", 'String'>
    readonly name: FieldRef<"StatusTeste", 'String'>
    readonly create_at: FieldRef<"StatusTeste", 'DateTime'>
    readonly updated_at: FieldRef<"StatusTeste", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StatusTeste findUnique
   */
  export type StatusTesteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
    /**
     * Filter, which StatusTeste to fetch.
     */
    where: StatusTesteWhereUniqueInput
  }

  /**
   * StatusTeste findUniqueOrThrow
   */
  export type StatusTesteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
    /**
     * Filter, which StatusTeste to fetch.
     */
    where: StatusTesteWhereUniqueInput
  }

  /**
   * StatusTeste findFirst
   */
  export type StatusTesteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
    /**
     * Filter, which StatusTeste to fetch.
     */
    where?: StatusTesteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusTestes to fetch.
     */
    orderBy?: StatusTesteOrderByWithRelationInput | StatusTesteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusTestes.
     */
    cursor?: StatusTesteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusTestes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusTestes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusTestes.
     */
    distinct?: StatusTesteScalarFieldEnum | StatusTesteScalarFieldEnum[]
  }

  /**
   * StatusTeste findFirstOrThrow
   */
  export type StatusTesteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
    /**
     * Filter, which StatusTeste to fetch.
     */
    where?: StatusTesteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusTestes to fetch.
     */
    orderBy?: StatusTesteOrderByWithRelationInput | StatusTesteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusTestes.
     */
    cursor?: StatusTesteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusTestes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusTestes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusTestes.
     */
    distinct?: StatusTesteScalarFieldEnum | StatusTesteScalarFieldEnum[]
  }

  /**
   * StatusTeste findMany
   */
  export type StatusTesteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
    /**
     * Filter, which StatusTestes to fetch.
     */
    where?: StatusTesteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusTestes to fetch.
     */
    orderBy?: StatusTesteOrderByWithRelationInput | StatusTesteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusTestes.
     */
    cursor?: StatusTesteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusTestes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusTestes.
     */
    skip?: number
    distinct?: StatusTesteScalarFieldEnum | StatusTesteScalarFieldEnum[]
  }

  /**
   * StatusTeste create
   */
  export type StatusTesteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusTeste.
     */
    data: XOR<StatusTesteCreateInput, StatusTesteUncheckedCreateInput>
  }

  /**
   * StatusTeste createMany
   */
  export type StatusTesteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusTestes.
     */
    data: StatusTesteCreateManyInput | StatusTesteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusTeste createManyAndReturn
   */
  export type StatusTesteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * The data used to create many StatusTestes.
     */
    data: StatusTesteCreateManyInput | StatusTesteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusTeste update
   */
  export type StatusTesteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusTeste.
     */
    data: XOR<StatusTesteUpdateInput, StatusTesteUncheckedUpdateInput>
    /**
     * Choose, which StatusTeste to update.
     */
    where: StatusTesteWhereUniqueInput
  }

  /**
   * StatusTeste updateMany
   */
  export type StatusTesteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusTestes.
     */
    data: XOR<StatusTesteUpdateManyMutationInput, StatusTesteUncheckedUpdateManyInput>
    /**
     * Filter which StatusTestes to update
     */
    where?: StatusTesteWhereInput
    /**
     * Limit how many StatusTestes to update.
     */
    limit?: number
  }

  /**
   * StatusTeste updateManyAndReturn
   */
  export type StatusTesteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * The data used to update StatusTestes.
     */
    data: XOR<StatusTesteUpdateManyMutationInput, StatusTesteUncheckedUpdateManyInput>
    /**
     * Filter which StatusTestes to update
     */
    where?: StatusTesteWhereInput
    /**
     * Limit how many StatusTestes to update.
     */
    limit?: number
  }

  /**
   * StatusTeste upsert
   */
  export type StatusTesteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusTeste to update in case it exists.
     */
    where: StatusTesteWhereUniqueInput
    /**
     * In case the StatusTeste found by the `where` argument doesn't exist, create a new StatusTeste with this data.
     */
    create: XOR<StatusTesteCreateInput, StatusTesteUncheckedCreateInput>
    /**
     * In case the StatusTeste was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusTesteUpdateInput, StatusTesteUncheckedUpdateInput>
  }

  /**
   * StatusTeste delete
   */
  export type StatusTesteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
    /**
     * Filter which StatusTeste to delete.
     */
    where: StatusTesteWhereUniqueInput
  }

  /**
   * StatusTeste deleteMany
   */
  export type StatusTesteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusTestes to delete
     */
    where?: StatusTesteWhereInput
    /**
     * Limit how many StatusTestes to delete.
     */
    limit?: number
  }

  /**
   * StatusTeste.controleDeAssistenciaTecnica
   */
  export type StatusTeste$controleDeAssistenciaTecnicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeAssistenciaTecnica
     */
    select?: controleDeAssistenciaTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeAssistenciaTecnica
     */
    omit?: controleDeAssistenciaTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeAssistenciaTecnicaInclude<ExtArgs> | null
    where?: controleDeAssistenciaTecnicaWhereInput
    orderBy?: controleDeAssistenciaTecnicaOrderByWithRelationInput | controleDeAssistenciaTecnicaOrderByWithRelationInput[]
    cursor?: controleDeAssistenciaTecnicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeAssistenciaTecnicaScalarFieldEnum | ControleDeAssistenciaTecnicaScalarFieldEnum[]
  }

  /**
   * StatusTeste without action
   */
  export type StatusTesteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusTeste
     */
    select?: StatusTesteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusTeste
     */
    omit?: StatusTesteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusTesteInclude<ExtArgs> | null
  }


  /**
   * Model controleDeLaudoTecnico
   */

  export type AggregateControleDeLaudoTecnico = {
    _count: ControleDeLaudoTecnicoCountAggregateOutputType | null
    _min: ControleDeLaudoTecnicoMinAggregateOutputType | null
    _max: ControleDeLaudoTecnicoMaxAggregateOutputType | null
  }

  export type ControleDeLaudoTecnicoMinAggregateOutputType = {
    id: string | null
    descricaodoProblema: string | null
    mesAno: Date | null
    osLab: string | null
    instituicaoUnidade_id: string | null
    equipamento_id: string | null
    tecnico_id: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type ControleDeLaudoTecnicoMaxAggregateOutputType = {
    id: string | null
    descricaodoProblema: string | null
    mesAno: Date | null
    osLab: string | null
    instituicaoUnidade_id: string | null
    equipamento_id: string | null
    tecnico_id: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type ControleDeLaudoTecnicoCountAggregateOutputType = {
    id: number
    descricaodoProblema: number
    mesAno: number
    osLab: number
    instituicaoUnidade_id: number
    equipamento_id: number
    tecnico_id: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type ControleDeLaudoTecnicoMinAggregateInputType = {
    id?: true
    descricaodoProblema?: true
    mesAno?: true
    osLab?: true
    instituicaoUnidade_id?: true
    equipamento_id?: true
    tecnico_id?: true
    create_at?: true
    updated_at?: true
  }

  export type ControleDeLaudoTecnicoMaxAggregateInputType = {
    id?: true
    descricaodoProblema?: true
    mesAno?: true
    osLab?: true
    instituicaoUnidade_id?: true
    equipamento_id?: true
    tecnico_id?: true
    create_at?: true
    updated_at?: true
  }

  export type ControleDeLaudoTecnicoCountAggregateInputType = {
    id?: true
    descricaodoProblema?: true
    mesAno?: true
    osLab?: true
    instituicaoUnidade_id?: true
    equipamento_id?: true
    tecnico_id?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type ControleDeLaudoTecnicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controleDeLaudoTecnico to aggregate.
     */
    where?: controleDeLaudoTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeLaudoTecnicos to fetch.
     */
    orderBy?: controleDeLaudoTecnicoOrderByWithRelationInput | controleDeLaudoTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: controleDeLaudoTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeLaudoTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeLaudoTecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned controleDeLaudoTecnicos
    **/
    _count?: true | ControleDeLaudoTecnicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControleDeLaudoTecnicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControleDeLaudoTecnicoMaxAggregateInputType
  }

  export type GetControleDeLaudoTecnicoAggregateType<T extends ControleDeLaudoTecnicoAggregateArgs> = {
        [P in keyof T & keyof AggregateControleDeLaudoTecnico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControleDeLaudoTecnico[P]>
      : GetScalarType<T[P], AggregateControleDeLaudoTecnico[P]>
  }




  export type controleDeLaudoTecnicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeLaudoTecnicoWhereInput
    orderBy?: controleDeLaudoTecnicoOrderByWithAggregationInput | controleDeLaudoTecnicoOrderByWithAggregationInput[]
    by: ControleDeLaudoTecnicoScalarFieldEnum[] | ControleDeLaudoTecnicoScalarFieldEnum
    having?: controleDeLaudoTecnicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControleDeLaudoTecnicoCountAggregateInputType | true
    _min?: ControleDeLaudoTecnicoMinAggregateInputType
    _max?: ControleDeLaudoTecnicoMaxAggregateInputType
  }

  export type ControleDeLaudoTecnicoGroupByOutputType = {
    id: string
    descricaodoProblema: string
    mesAno: Date
    osLab: string
    instituicaoUnidade_id: string
    equipamento_id: string
    tecnico_id: string
    create_at: Date | null
    updated_at: Date | null
    _count: ControleDeLaudoTecnicoCountAggregateOutputType | null
    _min: ControleDeLaudoTecnicoMinAggregateOutputType | null
    _max: ControleDeLaudoTecnicoMaxAggregateOutputType | null
  }

  type GetControleDeLaudoTecnicoGroupByPayload<T extends controleDeLaudoTecnicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControleDeLaudoTecnicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControleDeLaudoTecnicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControleDeLaudoTecnicoGroupByOutputType[P]>
            : GetScalarType<T[P], ControleDeLaudoTecnicoGroupByOutputType[P]>
        }
      >
    >


  export type controleDeLaudoTecnicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricaodoProblema?: boolean
    mesAno?: boolean
    osLab?: boolean
    instituicaoUnidade_id?: boolean
    equipamento_id?: boolean
    tecnico_id?: boolean
    create_at?: boolean
    updated_at?: boolean
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeLaudoTecnico"]>

  export type controleDeLaudoTecnicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricaodoProblema?: boolean
    mesAno?: boolean
    osLab?: boolean
    instituicaoUnidade_id?: boolean
    equipamento_id?: boolean
    tecnico_id?: boolean
    create_at?: boolean
    updated_at?: boolean
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeLaudoTecnico"]>

  export type controleDeLaudoTecnicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricaodoProblema?: boolean
    mesAno?: boolean
    osLab?: boolean
    instituicaoUnidade_id?: boolean
    equipamento_id?: boolean
    tecnico_id?: boolean
    create_at?: boolean
    updated_at?: boolean
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeLaudoTecnico"]>

  export type controleDeLaudoTecnicoSelectScalar = {
    id?: boolean
    descricaodoProblema?: boolean
    mesAno?: boolean
    osLab?: boolean
    instituicaoUnidade_id?: boolean
    equipamento_id?: boolean
    tecnico_id?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type controleDeLaudoTecnicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "descricaodoProblema" | "mesAno" | "osLab" | "instituicaoUnidade_id" | "equipamento_id" | "tecnico_id" | "create_at" | "updated_at", ExtArgs["result"]["controleDeLaudoTecnico"]>
  export type controleDeLaudoTecnicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
  }
  export type controleDeLaudoTecnicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
  }
  export type controleDeLaudoTecnicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
  }

  export type $controleDeLaudoTecnicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "controleDeLaudoTecnico"
    objects: {
      instituicaoUnidade: Prisma.$InstituicaoUnidadePayload<ExtArgs>
      equipamento: Prisma.$EquipamentoPayload<ExtArgs>
      tecnico: Prisma.$TecnicoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      descricaodoProblema: string
      mesAno: Date
      osLab: string
      instituicaoUnidade_id: string
      equipamento_id: string
      tecnico_id: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["controleDeLaudoTecnico"]>
    composites: {}
  }

  type controleDeLaudoTecnicoGetPayload<S extends boolean | null | undefined | controleDeLaudoTecnicoDefaultArgs> = $Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload, S>

  type controleDeLaudoTecnicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<controleDeLaudoTecnicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ControleDeLaudoTecnicoCountAggregateInputType | true
    }

  export interface controleDeLaudoTecnicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['controleDeLaudoTecnico'], meta: { name: 'controleDeLaudoTecnico' } }
    /**
     * Find zero or one ControleDeLaudoTecnico that matches the filter.
     * @param {controleDeLaudoTecnicoFindUniqueArgs} args - Arguments to find a ControleDeLaudoTecnico
     * @example
     * // Get one ControleDeLaudoTecnico
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends controleDeLaudoTecnicoFindUniqueArgs>(args: SelectSubset<T, controleDeLaudoTecnicoFindUniqueArgs<ExtArgs>>): Prisma__controleDeLaudoTecnicoClient<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ControleDeLaudoTecnico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {controleDeLaudoTecnicoFindUniqueOrThrowArgs} args - Arguments to find a ControleDeLaudoTecnico
     * @example
     * // Get one ControleDeLaudoTecnico
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends controleDeLaudoTecnicoFindUniqueOrThrowArgs>(args: SelectSubset<T, controleDeLaudoTecnicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__controleDeLaudoTecnicoClient<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControleDeLaudoTecnico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaudoTecnicoFindFirstArgs} args - Arguments to find a ControleDeLaudoTecnico
     * @example
     * // Get one ControleDeLaudoTecnico
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends controleDeLaudoTecnicoFindFirstArgs>(args?: SelectSubset<T, controleDeLaudoTecnicoFindFirstArgs<ExtArgs>>): Prisma__controleDeLaudoTecnicoClient<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControleDeLaudoTecnico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaudoTecnicoFindFirstOrThrowArgs} args - Arguments to find a ControleDeLaudoTecnico
     * @example
     * // Get one ControleDeLaudoTecnico
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends controleDeLaudoTecnicoFindFirstOrThrowArgs>(args?: SelectSubset<T, controleDeLaudoTecnicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__controleDeLaudoTecnicoClient<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ControleDeLaudoTecnicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaudoTecnicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ControleDeLaudoTecnicos
     * const controleDeLaudoTecnicos = await prisma.controleDeLaudoTecnico.findMany()
     * 
     * // Get first 10 ControleDeLaudoTecnicos
     * const controleDeLaudoTecnicos = await prisma.controleDeLaudoTecnico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controleDeLaudoTecnicoWithIdOnly = await prisma.controleDeLaudoTecnico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends controleDeLaudoTecnicoFindManyArgs>(args?: SelectSubset<T, controleDeLaudoTecnicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ControleDeLaudoTecnico.
     * @param {controleDeLaudoTecnicoCreateArgs} args - Arguments to create a ControleDeLaudoTecnico.
     * @example
     * // Create one ControleDeLaudoTecnico
     * const ControleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.create({
     *   data: {
     *     // ... data to create a ControleDeLaudoTecnico
     *   }
     * })
     * 
     */
    create<T extends controleDeLaudoTecnicoCreateArgs>(args: SelectSubset<T, controleDeLaudoTecnicoCreateArgs<ExtArgs>>): Prisma__controleDeLaudoTecnicoClient<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ControleDeLaudoTecnicos.
     * @param {controleDeLaudoTecnicoCreateManyArgs} args - Arguments to create many ControleDeLaudoTecnicos.
     * @example
     * // Create many ControleDeLaudoTecnicos
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends controleDeLaudoTecnicoCreateManyArgs>(args?: SelectSubset<T, controleDeLaudoTecnicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ControleDeLaudoTecnicos and returns the data saved in the database.
     * @param {controleDeLaudoTecnicoCreateManyAndReturnArgs} args - Arguments to create many ControleDeLaudoTecnicos.
     * @example
     * // Create many ControleDeLaudoTecnicos
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ControleDeLaudoTecnicos and only return the `id`
     * const controleDeLaudoTecnicoWithIdOnly = await prisma.controleDeLaudoTecnico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends controleDeLaudoTecnicoCreateManyAndReturnArgs>(args?: SelectSubset<T, controleDeLaudoTecnicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ControleDeLaudoTecnico.
     * @param {controleDeLaudoTecnicoDeleteArgs} args - Arguments to delete one ControleDeLaudoTecnico.
     * @example
     * // Delete one ControleDeLaudoTecnico
     * const ControleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.delete({
     *   where: {
     *     // ... filter to delete one ControleDeLaudoTecnico
     *   }
     * })
     * 
     */
    delete<T extends controleDeLaudoTecnicoDeleteArgs>(args: SelectSubset<T, controleDeLaudoTecnicoDeleteArgs<ExtArgs>>): Prisma__controleDeLaudoTecnicoClient<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ControleDeLaudoTecnico.
     * @param {controleDeLaudoTecnicoUpdateArgs} args - Arguments to update one ControleDeLaudoTecnico.
     * @example
     * // Update one ControleDeLaudoTecnico
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends controleDeLaudoTecnicoUpdateArgs>(args: SelectSubset<T, controleDeLaudoTecnicoUpdateArgs<ExtArgs>>): Prisma__controleDeLaudoTecnicoClient<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ControleDeLaudoTecnicos.
     * @param {controleDeLaudoTecnicoDeleteManyArgs} args - Arguments to filter ControleDeLaudoTecnicos to delete.
     * @example
     * // Delete a few ControleDeLaudoTecnicos
     * const { count } = await prisma.controleDeLaudoTecnico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends controleDeLaudoTecnicoDeleteManyArgs>(args?: SelectSubset<T, controleDeLaudoTecnicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControleDeLaudoTecnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaudoTecnicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ControleDeLaudoTecnicos
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends controleDeLaudoTecnicoUpdateManyArgs>(args: SelectSubset<T, controleDeLaudoTecnicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControleDeLaudoTecnicos and returns the data updated in the database.
     * @param {controleDeLaudoTecnicoUpdateManyAndReturnArgs} args - Arguments to update many ControleDeLaudoTecnicos.
     * @example
     * // Update many ControleDeLaudoTecnicos
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ControleDeLaudoTecnicos and only return the `id`
     * const controleDeLaudoTecnicoWithIdOnly = await prisma.controleDeLaudoTecnico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends controleDeLaudoTecnicoUpdateManyAndReturnArgs>(args: SelectSubset<T, controleDeLaudoTecnicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ControleDeLaudoTecnico.
     * @param {controleDeLaudoTecnicoUpsertArgs} args - Arguments to update or create a ControleDeLaudoTecnico.
     * @example
     * // Update or create a ControleDeLaudoTecnico
     * const controleDeLaudoTecnico = await prisma.controleDeLaudoTecnico.upsert({
     *   create: {
     *     // ... data to create a ControleDeLaudoTecnico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ControleDeLaudoTecnico we want to update
     *   }
     * })
     */
    upsert<T extends controleDeLaudoTecnicoUpsertArgs>(args: SelectSubset<T, controleDeLaudoTecnicoUpsertArgs<ExtArgs>>): Prisma__controleDeLaudoTecnicoClient<$Result.GetResult<Prisma.$controleDeLaudoTecnicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ControleDeLaudoTecnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaudoTecnicoCountArgs} args - Arguments to filter ControleDeLaudoTecnicos to count.
     * @example
     * // Count the number of ControleDeLaudoTecnicos
     * const count = await prisma.controleDeLaudoTecnico.count({
     *   where: {
     *     // ... the filter for the ControleDeLaudoTecnicos we want to count
     *   }
     * })
    **/
    count<T extends controleDeLaudoTecnicoCountArgs>(
      args?: Subset<T, controleDeLaudoTecnicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControleDeLaudoTecnicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ControleDeLaudoTecnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControleDeLaudoTecnicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControleDeLaudoTecnicoAggregateArgs>(args: Subset<T, ControleDeLaudoTecnicoAggregateArgs>): Prisma.PrismaPromise<GetControleDeLaudoTecnicoAggregateType<T>>

    /**
     * Group by ControleDeLaudoTecnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaudoTecnicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends controleDeLaudoTecnicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: controleDeLaudoTecnicoGroupByArgs['orderBy'] }
        : { orderBy?: controleDeLaudoTecnicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, controleDeLaudoTecnicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControleDeLaudoTecnicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the controleDeLaudoTecnico model
   */
  readonly fields: controleDeLaudoTecnicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for controleDeLaudoTecnico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__controleDeLaudoTecnicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instituicaoUnidade<T extends InstituicaoUnidadeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidadeDefaultArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    equipamento<T extends EquipamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipamentoDefaultArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tecnico<T extends TecnicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TecnicoDefaultArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the controleDeLaudoTecnico model
   */
  interface controleDeLaudoTecnicoFieldRefs {
    readonly id: FieldRef<"controleDeLaudoTecnico", 'String'>
    readonly descricaodoProblema: FieldRef<"controleDeLaudoTecnico", 'String'>
    readonly mesAno: FieldRef<"controleDeLaudoTecnico", 'DateTime'>
    readonly osLab: FieldRef<"controleDeLaudoTecnico", 'String'>
    readonly instituicaoUnidade_id: FieldRef<"controleDeLaudoTecnico", 'String'>
    readonly equipamento_id: FieldRef<"controleDeLaudoTecnico", 'String'>
    readonly tecnico_id: FieldRef<"controleDeLaudoTecnico", 'String'>
    readonly create_at: FieldRef<"controleDeLaudoTecnico", 'DateTime'>
    readonly updated_at: FieldRef<"controleDeLaudoTecnico", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * controleDeLaudoTecnico findUnique
   */
  export type controleDeLaudoTecnicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaudoTecnico to fetch.
     */
    where: controleDeLaudoTecnicoWhereUniqueInput
  }

  /**
   * controleDeLaudoTecnico findUniqueOrThrow
   */
  export type controleDeLaudoTecnicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaudoTecnico to fetch.
     */
    where: controleDeLaudoTecnicoWhereUniqueInput
  }

  /**
   * controleDeLaudoTecnico findFirst
   */
  export type controleDeLaudoTecnicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaudoTecnico to fetch.
     */
    where?: controleDeLaudoTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeLaudoTecnicos to fetch.
     */
    orderBy?: controleDeLaudoTecnicoOrderByWithRelationInput | controleDeLaudoTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controleDeLaudoTecnicos.
     */
    cursor?: controleDeLaudoTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeLaudoTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeLaudoTecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controleDeLaudoTecnicos.
     */
    distinct?: ControleDeLaudoTecnicoScalarFieldEnum | ControleDeLaudoTecnicoScalarFieldEnum[]
  }

  /**
   * controleDeLaudoTecnico findFirstOrThrow
   */
  export type controleDeLaudoTecnicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaudoTecnico to fetch.
     */
    where?: controleDeLaudoTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeLaudoTecnicos to fetch.
     */
    orderBy?: controleDeLaudoTecnicoOrderByWithRelationInput | controleDeLaudoTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controleDeLaudoTecnicos.
     */
    cursor?: controleDeLaudoTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeLaudoTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeLaudoTecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controleDeLaudoTecnicos.
     */
    distinct?: ControleDeLaudoTecnicoScalarFieldEnum | ControleDeLaudoTecnicoScalarFieldEnum[]
  }

  /**
   * controleDeLaudoTecnico findMany
   */
  export type controleDeLaudoTecnicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaudoTecnicos to fetch.
     */
    where?: controleDeLaudoTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeLaudoTecnicos to fetch.
     */
    orderBy?: controleDeLaudoTecnicoOrderByWithRelationInput | controleDeLaudoTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing controleDeLaudoTecnicos.
     */
    cursor?: controleDeLaudoTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeLaudoTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeLaudoTecnicos.
     */
    skip?: number
    distinct?: ControleDeLaudoTecnicoScalarFieldEnum | ControleDeLaudoTecnicoScalarFieldEnum[]
  }

  /**
   * controleDeLaudoTecnico create
   */
  export type controleDeLaudoTecnicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    /**
     * The data needed to create a controleDeLaudoTecnico.
     */
    data: XOR<controleDeLaudoTecnicoCreateInput, controleDeLaudoTecnicoUncheckedCreateInput>
  }

  /**
   * controleDeLaudoTecnico createMany
   */
  export type controleDeLaudoTecnicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many controleDeLaudoTecnicos.
     */
    data: controleDeLaudoTecnicoCreateManyInput | controleDeLaudoTecnicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * controleDeLaudoTecnico createManyAndReturn
   */
  export type controleDeLaudoTecnicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * The data used to create many controleDeLaudoTecnicos.
     */
    data: controleDeLaudoTecnicoCreateManyInput | controleDeLaudoTecnicoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * controleDeLaudoTecnico update
   */
  export type controleDeLaudoTecnicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    /**
     * The data needed to update a controleDeLaudoTecnico.
     */
    data: XOR<controleDeLaudoTecnicoUpdateInput, controleDeLaudoTecnicoUncheckedUpdateInput>
    /**
     * Choose, which controleDeLaudoTecnico to update.
     */
    where: controleDeLaudoTecnicoWhereUniqueInput
  }

  /**
   * controleDeLaudoTecnico updateMany
   */
  export type controleDeLaudoTecnicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update controleDeLaudoTecnicos.
     */
    data: XOR<controleDeLaudoTecnicoUpdateManyMutationInput, controleDeLaudoTecnicoUncheckedUpdateManyInput>
    /**
     * Filter which controleDeLaudoTecnicos to update
     */
    where?: controleDeLaudoTecnicoWhereInput
    /**
     * Limit how many controleDeLaudoTecnicos to update.
     */
    limit?: number
  }

  /**
   * controleDeLaudoTecnico updateManyAndReturn
   */
  export type controleDeLaudoTecnicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * The data used to update controleDeLaudoTecnicos.
     */
    data: XOR<controleDeLaudoTecnicoUpdateManyMutationInput, controleDeLaudoTecnicoUncheckedUpdateManyInput>
    /**
     * Filter which controleDeLaudoTecnicos to update
     */
    where?: controleDeLaudoTecnicoWhereInput
    /**
     * Limit how many controleDeLaudoTecnicos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * controleDeLaudoTecnico upsert
   */
  export type controleDeLaudoTecnicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    /**
     * The filter to search for the controleDeLaudoTecnico to update in case it exists.
     */
    where: controleDeLaudoTecnicoWhereUniqueInput
    /**
     * In case the controleDeLaudoTecnico found by the `where` argument doesn't exist, create a new controleDeLaudoTecnico with this data.
     */
    create: XOR<controleDeLaudoTecnicoCreateInput, controleDeLaudoTecnicoUncheckedCreateInput>
    /**
     * In case the controleDeLaudoTecnico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<controleDeLaudoTecnicoUpdateInput, controleDeLaudoTecnicoUncheckedUpdateInput>
  }

  /**
   * controleDeLaudoTecnico delete
   */
  export type controleDeLaudoTecnicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
    /**
     * Filter which controleDeLaudoTecnico to delete.
     */
    where: controleDeLaudoTecnicoWhereUniqueInput
  }

  /**
   * controleDeLaudoTecnico deleteMany
   */
  export type controleDeLaudoTecnicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controleDeLaudoTecnicos to delete
     */
    where?: controleDeLaudoTecnicoWhereInput
    /**
     * Limit how many controleDeLaudoTecnicos to delete.
     */
    limit?: number
  }

  /**
   * controleDeLaudoTecnico without action
   */
  export type controleDeLaudoTecnicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaudoTecnico
     */
    select?: controleDeLaudoTecnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaudoTecnico
     */
    omit?: controleDeLaudoTecnicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaudoTecnicoInclude<ExtArgs> | null
  }


  /**
   * Model controleDeLaboratio
   */

  export type AggregateControleDeLaboratio = {
    _count: ControleDeLaboratioCountAggregateOutputType | null
    _min: ControleDeLaboratioMinAggregateOutputType | null
    _max: ControleDeLaboratioMaxAggregateOutputType | null
  }

  export type ControleDeLaboratioMinAggregateOutputType = {
    id: string | null
    nomedoEquipamento: string | null
    marca: string | null
    defeito: string | null
    osDeAbertura: string | null
    osDeDevolucao: string | null
    data_de_Chegada: Date | null
    data_de_Finalizacao: Date | null
    statusControledeLaboratorio_id: string | null
    instituicao_id: string | null
    cliente_id: string | null
    equipamento_id: string | null
  }

  export type ControleDeLaboratioMaxAggregateOutputType = {
    id: string | null
    nomedoEquipamento: string | null
    marca: string | null
    defeito: string | null
    osDeAbertura: string | null
    osDeDevolucao: string | null
    data_de_Chegada: Date | null
    data_de_Finalizacao: Date | null
    statusControledeLaboratorio_id: string | null
    instituicao_id: string | null
    cliente_id: string | null
    equipamento_id: string | null
  }

  export type ControleDeLaboratioCountAggregateOutputType = {
    id: number
    nomedoEquipamento: number
    marca: number
    defeito: number
    osDeAbertura: number
    osDeDevolucao: number
    data_de_Chegada: number
    data_de_Finalizacao: number
    statusControledeLaboratorio_id: number
    instituicao_id: number
    cliente_id: number
    equipamento_id: number
    _all: number
  }


  export type ControleDeLaboratioMinAggregateInputType = {
    id?: true
    nomedoEquipamento?: true
    marca?: true
    defeito?: true
    osDeAbertura?: true
    osDeDevolucao?: true
    data_de_Chegada?: true
    data_de_Finalizacao?: true
    statusControledeLaboratorio_id?: true
    instituicao_id?: true
    cliente_id?: true
    equipamento_id?: true
  }

  export type ControleDeLaboratioMaxAggregateInputType = {
    id?: true
    nomedoEquipamento?: true
    marca?: true
    defeito?: true
    osDeAbertura?: true
    osDeDevolucao?: true
    data_de_Chegada?: true
    data_de_Finalizacao?: true
    statusControledeLaboratorio_id?: true
    instituicao_id?: true
    cliente_id?: true
    equipamento_id?: true
  }

  export type ControleDeLaboratioCountAggregateInputType = {
    id?: true
    nomedoEquipamento?: true
    marca?: true
    defeito?: true
    osDeAbertura?: true
    osDeDevolucao?: true
    data_de_Chegada?: true
    data_de_Finalizacao?: true
    statusControledeLaboratorio_id?: true
    instituicao_id?: true
    cliente_id?: true
    equipamento_id?: true
    _all?: true
  }

  export type ControleDeLaboratioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controleDeLaboratio to aggregate.
     */
    where?: controleDeLaboratioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeLaboratios to fetch.
     */
    orderBy?: controleDeLaboratioOrderByWithRelationInput | controleDeLaboratioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: controleDeLaboratioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeLaboratios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeLaboratios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned controleDeLaboratios
    **/
    _count?: true | ControleDeLaboratioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControleDeLaboratioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControleDeLaboratioMaxAggregateInputType
  }

  export type GetControleDeLaboratioAggregateType<T extends ControleDeLaboratioAggregateArgs> = {
        [P in keyof T & keyof AggregateControleDeLaboratio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControleDeLaboratio[P]>
      : GetScalarType<T[P], AggregateControleDeLaboratio[P]>
  }




  export type controleDeLaboratioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeLaboratioWhereInput
    orderBy?: controleDeLaboratioOrderByWithAggregationInput | controleDeLaboratioOrderByWithAggregationInput[]
    by: ControleDeLaboratioScalarFieldEnum[] | ControleDeLaboratioScalarFieldEnum
    having?: controleDeLaboratioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControleDeLaboratioCountAggregateInputType | true
    _min?: ControleDeLaboratioMinAggregateInputType
    _max?: ControleDeLaboratioMaxAggregateInputType
  }

  export type ControleDeLaboratioGroupByOutputType = {
    id: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date
    data_de_Finalizacao: Date
    statusControledeLaboratorio_id: string
    instituicao_id: string
    cliente_id: string
    equipamento_id: string
    _count: ControleDeLaboratioCountAggregateOutputType | null
    _min: ControleDeLaboratioMinAggregateOutputType | null
    _max: ControleDeLaboratioMaxAggregateOutputType | null
  }

  type GetControleDeLaboratioGroupByPayload<T extends controleDeLaboratioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControleDeLaboratioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControleDeLaboratioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControleDeLaboratioGroupByOutputType[P]>
            : GetScalarType<T[P], ControleDeLaboratioGroupByOutputType[P]>
        }
      >
    >


  export type controleDeLaboratioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomedoEquipamento?: boolean
    marca?: boolean
    defeito?: boolean
    osDeAbertura?: boolean
    osDeDevolucao?: boolean
    data_de_Chegada?: boolean
    data_de_Finalizacao?: boolean
    statusControledeLaboratorio_id?: boolean
    instituicao_id?: boolean
    cliente_id?: boolean
    equipamento_id?: boolean
    statusControledeLaboratorio?: boolean | statusControledeLaboratorioDefaultArgs<ExtArgs>
    instituicao?: boolean | controleDeLaboratio$instituicaoArgs<ExtArgs>
    cliente?: boolean | controleDeLaboratio$clienteArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeLaboratio"]>

  export type controleDeLaboratioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomedoEquipamento?: boolean
    marca?: boolean
    defeito?: boolean
    osDeAbertura?: boolean
    osDeDevolucao?: boolean
    data_de_Chegada?: boolean
    data_de_Finalizacao?: boolean
    statusControledeLaboratorio_id?: boolean
    instituicao_id?: boolean
    cliente_id?: boolean
    equipamento_id?: boolean
    statusControledeLaboratorio?: boolean | statusControledeLaboratorioDefaultArgs<ExtArgs>
    instituicao?: boolean | controleDeLaboratio$instituicaoArgs<ExtArgs>
    cliente?: boolean | controleDeLaboratio$clienteArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeLaboratio"]>

  export type controleDeLaboratioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomedoEquipamento?: boolean
    marca?: boolean
    defeito?: boolean
    osDeAbertura?: boolean
    osDeDevolucao?: boolean
    data_de_Chegada?: boolean
    data_de_Finalizacao?: boolean
    statusControledeLaboratorio_id?: boolean
    instituicao_id?: boolean
    cliente_id?: boolean
    equipamento_id?: boolean
    statusControledeLaboratorio?: boolean | statusControledeLaboratorioDefaultArgs<ExtArgs>
    instituicao?: boolean | controleDeLaboratio$instituicaoArgs<ExtArgs>
    cliente?: boolean | controleDeLaboratio$clienteArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeLaboratio"]>

  export type controleDeLaboratioSelectScalar = {
    id?: boolean
    nomedoEquipamento?: boolean
    marca?: boolean
    defeito?: boolean
    osDeAbertura?: boolean
    osDeDevolucao?: boolean
    data_de_Chegada?: boolean
    data_de_Finalizacao?: boolean
    statusControledeLaboratorio_id?: boolean
    instituicao_id?: boolean
    cliente_id?: boolean
    equipamento_id?: boolean
  }

  export type controleDeLaboratioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nomedoEquipamento" | "marca" | "defeito" | "osDeAbertura" | "osDeDevolucao" | "data_de_Chegada" | "data_de_Finalizacao" | "statusControledeLaboratorio_id" | "instituicao_id" | "cliente_id" | "equipamento_id", ExtArgs["result"]["controleDeLaboratio"]>
  export type controleDeLaboratioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusControledeLaboratorio?: boolean | statusControledeLaboratorioDefaultArgs<ExtArgs>
    instituicao?: boolean | controleDeLaboratio$instituicaoArgs<ExtArgs>
    cliente?: boolean | controleDeLaboratio$clienteArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
  }
  export type controleDeLaboratioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusControledeLaboratorio?: boolean | statusControledeLaboratorioDefaultArgs<ExtArgs>
    instituicao?: boolean | controleDeLaboratio$instituicaoArgs<ExtArgs>
    cliente?: boolean | controleDeLaboratio$clienteArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
  }
  export type controleDeLaboratioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusControledeLaboratorio?: boolean | statusControledeLaboratorioDefaultArgs<ExtArgs>
    instituicao?: boolean | controleDeLaboratio$instituicaoArgs<ExtArgs>
    cliente?: boolean | controleDeLaboratio$clienteArgs<ExtArgs>
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
  }

  export type $controleDeLaboratioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "controleDeLaboratio"
    objects: {
      statusControledeLaboratorio: Prisma.$statusControledeLaboratorioPayload<ExtArgs>
      instituicao: Prisma.$InstituicaoUnidadePayload<ExtArgs> | null
      cliente: Prisma.$ClientePayload<ExtArgs> | null
      equipamento: Prisma.$EquipamentoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nomedoEquipamento: string
      marca: string
      defeito: string
      osDeAbertura: string
      osDeDevolucao: string
      data_de_Chegada: Date
      data_de_Finalizacao: Date
      statusControledeLaboratorio_id: string
      instituicao_id: string
      cliente_id: string
      equipamento_id: string
    }, ExtArgs["result"]["controleDeLaboratio"]>
    composites: {}
  }

  type controleDeLaboratioGetPayload<S extends boolean | null | undefined | controleDeLaboratioDefaultArgs> = $Result.GetResult<Prisma.$controleDeLaboratioPayload, S>

  type controleDeLaboratioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<controleDeLaboratioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ControleDeLaboratioCountAggregateInputType | true
    }

  export interface controleDeLaboratioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['controleDeLaboratio'], meta: { name: 'controleDeLaboratio' } }
    /**
     * Find zero or one ControleDeLaboratio that matches the filter.
     * @param {controleDeLaboratioFindUniqueArgs} args - Arguments to find a ControleDeLaboratio
     * @example
     * // Get one ControleDeLaboratio
     * const controleDeLaboratio = await prisma.controleDeLaboratio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends controleDeLaboratioFindUniqueArgs>(args: SelectSubset<T, controleDeLaboratioFindUniqueArgs<ExtArgs>>): Prisma__controleDeLaboratioClient<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ControleDeLaboratio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {controleDeLaboratioFindUniqueOrThrowArgs} args - Arguments to find a ControleDeLaboratio
     * @example
     * // Get one ControleDeLaboratio
     * const controleDeLaboratio = await prisma.controleDeLaboratio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends controleDeLaboratioFindUniqueOrThrowArgs>(args: SelectSubset<T, controleDeLaboratioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__controleDeLaboratioClient<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControleDeLaboratio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaboratioFindFirstArgs} args - Arguments to find a ControleDeLaboratio
     * @example
     * // Get one ControleDeLaboratio
     * const controleDeLaboratio = await prisma.controleDeLaboratio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends controleDeLaboratioFindFirstArgs>(args?: SelectSubset<T, controleDeLaboratioFindFirstArgs<ExtArgs>>): Prisma__controleDeLaboratioClient<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControleDeLaboratio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaboratioFindFirstOrThrowArgs} args - Arguments to find a ControleDeLaboratio
     * @example
     * // Get one ControleDeLaboratio
     * const controleDeLaboratio = await prisma.controleDeLaboratio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends controleDeLaboratioFindFirstOrThrowArgs>(args?: SelectSubset<T, controleDeLaboratioFindFirstOrThrowArgs<ExtArgs>>): Prisma__controleDeLaboratioClient<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ControleDeLaboratios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaboratioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ControleDeLaboratios
     * const controleDeLaboratios = await prisma.controleDeLaboratio.findMany()
     * 
     * // Get first 10 ControleDeLaboratios
     * const controleDeLaboratios = await prisma.controleDeLaboratio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controleDeLaboratioWithIdOnly = await prisma.controleDeLaboratio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends controleDeLaboratioFindManyArgs>(args?: SelectSubset<T, controleDeLaboratioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ControleDeLaboratio.
     * @param {controleDeLaboratioCreateArgs} args - Arguments to create a ControleDeLaboratio.
     * @example
     * // Create one ControleDeLaboratio
     * const ControleDeLaboratio = await prisma.controleDeLaboratio.create({
     *   data: {
     *     // ... data to create a ControleDeLaboratio
     *   }
     * })
     * 
     */
    create<T extends controleDeLaboratioCreateArgs>(args: SelectSubset<T, controleDeLaboratioCreateArgs<ExtArgs>>): Prisma__controleDeLaboratioClient<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ControleDeLaboratios.
     * @param {controleDeLaboratioCreateManyArgs} args - Arguments to create many ControleDeLaboratios.
     * @example
     * // Create many ControleDeLaboratios
     * const controleDeLaboratio = await prisma.controleDeLaboratio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends controleDeLaboratioCreateManyArgs>(args?: SelectSubset<T, controleDeLaboratioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ControleDeLaboratios and returns the data saved in the database.
     * @param {controleDeLaboratioCreateManyAndReturnArgs} args - Arguments to create many ControleDeLaboratios.
     * @example
     * // Create many ControleDeLaboratios
     * const controleDeLaboratio = await prisma.controleDeLaboratio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ControleDeLaboratios and only return the `id`
     * const controleDeLaboratioWithIdOnly = await prisma.controleDeLaboratio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends controleDeLaboratioCreateManyAndReturnArgs>(args?: SelectSubset<T, controleDeLaboratioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ControleDeLaboratio.
     * @param {controleDeLaboratioDeleteArgs} args - Arguments to delete one ControleDeLaboratio.
     * @example
     * // Delete one ControleDeLaboratio
     * const ControleDeLaboratio = await prisma.controleDeLaboratio.delete({
     *   where: {
     *     // ... filter to delete one ControleDeLaboratio
     *   }
     * })
     * 
     */
    delete<T extends controleDeLaboratioDeleteArgs>(args: SelectSubset<T, controleDeLaboratioDeleteArgs<ExtArgs>>): Prisma__controleDeLaboratioClient<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ControleDeLaboratio.
     * @param {controleDeLaboratioUpdateArgs} args - Arguments to update one ControleDeLaboratio.
     * @example
     * // Update one ControleDeLaboratio
     * const controleDeLaboratio = await prisma.controleDeLaboratio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends controleDeLaboratioUpdateArgs>(args: SelectSubset<T, controleDeLaboratioUpdateArgs<ExtArgs>>): Prisma__controleDeLaboratioClient<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ControleDeLaboratios.
     * @param {controleDeLaboratioDeleteManyArgs} args - Arguments to filter ControleDeLaboratios to delete.
     * @example
     * // Delete a few ControleDeLaboratios
     * const { count } = await prisma.controleDeLaboratio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends controleDeLaboratioDeleteManyArgs>(args?: SelectSubset<T, controleDeLaboratioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControleDeLaboratios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaboratioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ControleDeLaboratios
     * const controleDeLaboratio = await prisma.controleDeLaboratio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends controleDeLaboratioUpdateManyArgs>(args: SelectSubset<T, controleDeLaboratioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControleDeLaboratios and returns the data updated in the database.
     * @param {controleDeLaboratioUpdateManyAndReturnArgs} args - Arguments to update many ControleDeLaboratios.
     * @example
     * // Update many ControleDeLaboratios
     * const controleDeLaboratio = await prisma.controleDeLaboratio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ControleDeLaboratios and only return the `id`
     * const controleDeLaboratioWithIdOnly = await prisma.controleDeLaboratio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends controleDeLaboratioUpdateManyAndReturnArgs>(args: SelectSubset<T, controleDeLaboratioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ControleDeLaboratio.
     * @param {controleDeLaboratioUpsertArgs} args - Arguments to update or create a ControleDeLaboratio.
     * @example
     * // Update or create a ControleDeLaboratio
     * const controleDeLaboratio = await prisma.controleDeLaboratio.upsert({
     *   create: {
     *     // ... data to create a ControleDeLaboratio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ControleDeLaboratio we want to update
     *   }
     * })
     */
    upsert<T extends controleDeLaboratioUpsertArgs>(args: SelectSubset<T, controleDeLaboratioUpsertArgs<ExtArgs>>): Prisma__controleDeLaboratioClient<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ControleDeLaboratios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaboratioCountArgs} args - Arguments to filter ControleDeLaboratios to count.
     * @example
     * // Count the number of ControleDeLaboratios
     * const count = await prisma.controleDeLaboratio.count({
     *   where: {
     *     // ... the filter for the ControleDeLaboratios we want to count
     *   }
     * })
    **/
    count<T extends controleDeLaboratioCountArgs>(
      args?: Subset<T, controleDeLaboratioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControleDeLaboratioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ControleDeLaboratio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControleDeLaboratioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControleDeLaboratioAggregateArgs>(args: Subset<T, ControleDeLaboratioAggregateArgs>): Prisma.PrismaPromise<GetControleDeLaboratioAggregateType<T>>

    /**
     * Group by ControleDeLaboratio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeLaboratioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends controleDeLaboratioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: controleDeLaboratioGroupByArgs['orderBy'] }
        : { orderBy?: controleDeLaboratioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, controleDeLaboratioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControleDeLaboratioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the controleDeLaboratio model
   */
  readonly fields: controleDeLaboratioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for controleDeLaboratio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__controleDeLaboratioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    statusControledeLaboratorio<T extends statusControledeLaboratorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, statusControledeLaboratorioDefaultArgs<ExtArgs>>): Prisma__statusControledeLaboratorioClient<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instituicao<T extends controleDeLaboratio$instituicaoArgs<ExtArgs> = {}>(args?: Subset<T, controleDeLaboratio$instituicaoArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    cliente<T extends controleDeLaboratio$clienteArgs<ExtArgs> = {}>(args?: Subset<T, controleDeLaboratio$clienteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    equipamento<T extends EquipamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipamentoDefaultArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the controleDeLaboratio model
   */
  interface controleDeLaboratioFieldRefs {
    readonly id: FieldRef<"controleDeLaboratio", 'String'>
    readonly nomedoEquipamento: FieldRef<"controleDeLaboratio", 'String'>
    readonly marca: FieldRef<"controleDeLaboratio", 'String'>
    readonly defeito: FieldRef<"controleDeLaboratio", 'String'>
    readonly osDeAbertura: FieldRef<"controleDeLaboratio", 'String'>
    readonly osDeDevolucao: FieldRef<"controleDeLaboratio", 'String'>
    readonly data_de_Chegada: FieldRef<"controleDeLaboratio", 'DateTime'>
    readonly data_de_Finalizacao: FieldRef<"controleDeLaboratio", 'DateTime'>
    readonly statusControledeLaboratorio_id: FieldRef<"controleDeLaboratio", 'String'>
    readonly instituicao_id: FieldRef<"controleDeLaboratio", 'String'>
    readonly cliente_id: FieldRef<"controleDeLaboratio", 'String'>
    readonly equipamento_id: FieldRef<"controleDeLaboratio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * controleDeLaboratio findUnique
   */
  export type controleDeLaboratioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaboratio to fetch.
     */
    where: controleDeLaboratioWhereUniqueInput
  }

  /**
   * controleDeLaboratio findUniqueOrThrow
   */
  export type controleDeLaboratioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaboratio to fetch.
     */
    where: controleDeLaboratioWhereUniqueInput
  }

  /**
   * controleDeLaboratio findFirst
   */
  export type controleDeLaboratioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaboratio to fetch.
     */
    where?: controleDeLaboratioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeLaboratios to fetch.
     */
    orderBy?: controleDeLaboratioOrderByWithRelationInput | controleDeLaboratioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controleDeLaboratios.
     */
    cursor?: controleDeLaboratioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeLaboratios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeLaboratios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controleDeLaboratios.
     */
    distinct?: ControleDeLaboratioScalarFieldEnum | ControleDeLaboratioScalarFieldEnum[]
  }

  /**
   * controleDeLaboratio findFirstOrThrow
   */
  export type controleDeLaboratioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaboratio to fetch.
     */
    where?: controleDeLaboratioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeLaboratios to fetch.
     */
    orderBy?: controleDeLaboratioOrderByWithRelationInput | controleDeLaboratioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controleDeLaboratios.
     */
    cursor?: controleDeLaboratioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeLaboratios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeLaboratios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controleDeLaboratios.
     */
    distinct?: ControleDeLaboratioScalarFieldEnum | ControleDeLaboratioScalarFieldEnum[]
  }

  /**
   * controleDeLaboratio findMany
   */
  export type controleDeLaboratioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeLaboratios to fetch.
     */
    where?: controleDeLaboratioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeLaboratios to fetch.
     */
    orderBy?: controleDeLaboratioOrderByWithRelationInput | controleDeLaboratioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing controleDeLaboratios.
     */
    cursor?: controleDeLaboratioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeLaboratios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeLaboratios.
     */
    skip?: number
    distinct?: ControleDeLaboratioScalarFieldEnum | ControleDeLaboratioScalarFieldEnum[]
  }

  /**
   * controleDeLaboratio create
   */
  export type controleDeLaboratioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    /**
     * The data needed to create a controleDeLaboratio.
     */
    data: XOR<controleDeLaboratioCreateInput, controleDeLaboratioUncheckedCreateInput>
  }

  /**
   * controleDeLaboratio createMany
   */
  export type controleDeLaboratioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many controleDeLaboratios.
     */
    data: controleDeLaboratioCreateManyInput | controleDeLaboratioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * controleDeLaboratio createManyAndReturn
   */
  export type controleDeLaboratioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * The data used to create many controleDeLaboratios.
     */
    data: controleDeLaboratioCreateManyInput | controleDeLaboratioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * controleDeLaboratio update
   */
  export type controleDeLaboratioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    /**
     * The data needed to update a controleDeLaboratio.
     */
    data: XOR<controleDeLaboratioUpdateInput, controleDeLaboratioUncheckedUpdateInput>
    /**
     * Choose, which controleDeLaboratio to update.
     */
    where: controleDeLaboratioWhereUniqueInput
  }

  /**
   * controleDeLaboratio updateMany
   */
  export type controleDeLaboratioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update controleDeLaboratios.
     */
    data: XOR<controleDeLaboratioUpdateManyMutationInput, controleDeLaboratioUncheckedUpdateManyInput>
    /**
     * Filter which controleDeLaboratios to update
     */
    where?: controleDeLaboratioWhereInput
    /**
     * Limit how many controleDeLaboratios to update.
     */
    limit?: number
  }

  /**
   * controleDeLaboratio updateManyAndReturn
   */
  export type controleDeLaboratioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * The data used to update controleDeLaboratios.
     */
    data: XOR<controleDeLaboratioUpdateManyMutationInput, controleDeLaboratioUncheckedUpdateManyInput>
    /**
     * Filter which controleDeLaboratios to update
     */
    where?: controleDeLaboratioWhereInput
    /**
     * Limit how many controleDeLaboratios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * controleDeLaboratio upsert
   */
  export type controleDeLaboratioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    /**
     * The filter to search for the controleDeLaboratio to update in case it exists.
     */
    where: controleDeLaboratioWhereUniqueInput
    /**
     * In case the controleDeLaboratio found by the `where` argument doesn't exist, create a new controleDeLaboratio with this data.
     */
    create: XOR<controleDeLaboratioCreateInput, controleDeLaboratioUncheckedCreateInput>
    /**
     * In case the controleDeLaboratio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<controleDeLaboratioUpdateInput, controleDeLaboratioUncheckedUpdateInput>
  }

  /**
   * controleDeLaboratio delete
   */
  export type controleDeLaboratioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    /**
     * Filter which controleDeLaboratio to delete.
     */
    where: controleDeLaboratioWhereUniqueInput
  }

  /**
   * controleDeLaboratio deleteMany
   */
  export type controleDeLaboratioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controleDeLaboratios to delete
     */
    where?: controleDeLaboratioWhereInput
    /**
     * Limit how many controleDeLaboratios to delete.
     */
    limit?: number
  }

  /**
   * controleDeLaboratio.instituicao
   */
  export type controleDeLaboratio$instituicaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    where?: InstituicaoUnidadeWhereInput
  }

  /**
   * controleDeLaboratio.cliente
   */
  export type controleDeLaboratio$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }

  /**
   * controleDeLaboratio without action
   */
  export type controleDeLaboratioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
  }


  /**
   * Model statusControledeLaboratorio
   */

  export type AggregateStatusControledeLaboratorio = {
    _count: StatusControledeLaboratorioCountAggregateOutputType | null
    _min: StatusControledeLaboratorioMinAggregateOutputType | null
    _max: StatusControledeLaboratorioMaxAggregateOutputType | null
  }

  export type StatusControledeLaboratorioMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusControledeLaboratorioMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusControledeLaboratorioCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type StatusControledeLaboratorioMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusControledeLaboratorioMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusControledeLaboratorioCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type StatusControledeLaboratorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusControledeLaboratorio to aggregate.
     */
    where?: statusControledeLaboratorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusControledeLaboratorios to fetch.
     */
    orderBy?: statusControledeLaboratorioOrderByWithRelationInput | statusControledeLaboratorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusControledeLaboratorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusControledeLaboratorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusControledeLaboratorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statusControledeLaboratorios
    **/
    _count?: true | StatusControledeLaboratorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusControledeLaboratorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusControledeLaboratorioMaxAggregateInputType
  }

  export type GetStatusControledeLaboratorioAggregateType<T extends StatusControledeLaboratorioAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusControledeLaboratorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusControledeLaboratorio[P]>
      : GetScalarType<T[P], AggregateStatusControledeLaboratorio[P]>
  }




  export type statusControledeLaboratorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: statusControledeLaboratorioWhereInput
    orderBy?: statusControledeLaboratorioOrderByWithAggregationInput | statusControledeLaboratorioOrderByWithAggregationInput[]
    by: StatusControledeLaboratorioScalarFieldEnum[] | StatusControledeLaboratorioScalarFieldEnum
    having?: statusControledeLaboratorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusControledeLaboratorioCountAggregateInputType | true
    _min?: StatusControledeLaboratorioMinAggregateInputType
    _max?: StatusControledeLaboratorioMaxAggregateInputType
  }

  export type StatusControledeLaboratorioGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: StatusControledeLaboratorioCountAggregateOutputType | null
    _min: StatusControledeLaboratorioMinAggregateOutputType | null
    _max: StatusControledeLaboratorioMaxAggregateOutputType | null
  }

  type GetStatusControledeLaboratorioGroupByPayload<T extends statusControledeLaboratorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusControledeLaboratorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusControledeLaboratorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusControledeLaboratorioGroupByOutputType[P]>
            : GetScalarType<T[P], StatusControledeLaboratorioGroupByOutputType[P]>
        }
      >
    >


  export type statusControledeLaboratorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    controlesDeLaboratio?: boolean | statusControledeLaboratorio$controlesDeLaboratioArgs<ExtArgs>
    _count?: boolean | StatusControledeLaboratorioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusControledeLaboratorio"]>

  export type statusControledeLaboratorioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusControledeLaboratorio"]>

  export type statusControledeLaboratorioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusControledeLaboratorio"]>

  export type statusControledeLaboratorioSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type statusControledeLaboratorioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["statusControledeLaboratorio"]>
  export type statusControledeLaboratorioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controlesDeLaboratio?: boolean | statusControledeLaboratorio$controlesDeLaboratioArgs<ExtArgs>
    _count?: boolean | StatusControledeLaboratorioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type statusControledeLaboratorioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type statusControledeLaboratorioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $statusControledeLaboratorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "statusControledeLaboratorio"
    objects: {
      controlesDeLaboratio: Prisma.$controleDeLaboratioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["statusControledeLaboratorio"]>
    composites: {}
  }

  type statusControledeLaboratorioGetPayload<S extends boolean | null | undefined | statusControledeLaboratorioDefaultArgs> = $Result.GetResult<Prisma.$statusControledeLaboratorioPayload, S>

  type statusControledeLaboratorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<statusControledeLaboratorioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusControledeLaboratorioCountAggregateInputType | true
    }

  export interface statusControledeLaboratorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['statusControledeLaboratorio'], meta: { name: 'statusControledeLaboratorio' } }
    /**
     * Find zero or one StatusControledeLaboratorio that matches the filter.
     * @param {statusControledeLaboratorioFindUniqueArgs} args - Arguments to find a StatusControledeLaboratorio
     * @example
     * // Get one StatusControledeLaboratorio
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends statusControledeLaboratorioFindUniqueArgs>(args: SelectSubset<T, statusControledeLaboratorioFindUniqueArgs<ExtArgs>>): Prisma__statusControledeLaboratorioClient<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusControledeLaboratorio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {statusControledeLaboratorioFindUniqueOrThrowArgs} args - Arguments to find a StatusControledeLaboratorio
     * @example
     * // Get one StatusControledeLaboratorio
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends statusControledeLaboratorioFindUniqueOrThrowArgs>(args: SelectSubset<T, statusControledeLaboratorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__statusControledeLaboratorioClient<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusControledeLaboratorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusControledeLaboratorioFindFirstArgs} args - Arguments to find a StatusControledeLaboratorio
     * @example
     * // Get one StatusControledeLaboratorio
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends statusControledeLaboratorioFindFirstArgs>(args?: SelectSubset<T, statusControledeLaboratorioFindFirstArgs<ExtArgs>>): Prisma__statusControledeLaboratorioClient<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusControledeLaboratorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusControledeLaboratorioFindFirstOrThrowArgs} args - Arguments to find a StatusControledeLaboratorio
     * @example
     * // Get one StatusControledeLaboratorio
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends statusControledeLaboratorioFindFirstOrThrowArgs>(args?: SelectSubset<T, statusControledeLaboratorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__statusControledeLaboratorioClient<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusControledeLaboratorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusControledeLaboratorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusControledeLaboratorios
     * const statusControledeLaboratorios = await prisma.statusControledeLaboratorio.findMany()
     * 
     * // Get first 10 StatusControledeLaboratorios
     * const statusControledeLaboratorios = await prisma.statusControledeLaboratorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusControledeLaboratorioWithIdOnly = await prisma.statusControledeLaboratorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends statusControledeLaboratorioFindManyArgs>(args?: SelectSubset<T, statusControledeLaboratorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusControledeLaboratorio.
     * @param {statusControledeLaboratorioCreateArgs} args - Arguments to create a StatusControledeLaboratorio.
     * @example
     * // Create one StatusControledeLaboratorio
     * const StatusControledeLaboratorio = await prisma.statusControledeLaboratorio.create({
     *   data: {
     *     // ... data to create a StatusControledeLaboratorio
     *   }
     * })
     * 
     */
    create<T extends statusControledeLaboratorioCreateArgs>(args: SelectSubset<T, statusControledeLaboratorioCreateArgs<ExtArgs>>): Prisma__statusControledeLaboratorioClient<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusControledeLaboratorios.
     * @param {statusControledeLaboratorioCreateManyArgs} args - Arguments to create many StatusControledeLaboratorios.
     * @example
     * // Create many StatusControledeLaboratorios
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends statusControledeLaboratorioCreateManyArgs>(args?: SelectSubset<T, statusControledeLaboratorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusControledeLaboratorios and returns the data saved in the database.
     * @param {statusControledeLaboratorioCreateManyAndReturnArgs} args - Arguments to create many StatusControledeLaboratorios.
     * @example
     * // Create many StatusControledeLaboratorios
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusControledeLaboratorios and only return the `id`
     * const statusControledeLaboratorioWithIdOnly = await prisma.statusControledeLaboratorio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends statusControledeLaboratorioCreateManyAndReturnArgs>(args?: SelectSubset<T, statusControledeLaboratorioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusControledeLaboratorio.
     * @param {statusControledeLaboratorioDeleteArgs} args - Arguments to delete one StatusControledeLaboratorio.
     * @example
     * // Delete one StatusControledeLaboratorio
     * const StatusControledeLaboratorio = await prisma.statusControledeLaboratorio.delete({
     *   where: {
     *     // ... filter to delete one StatusControledeLaboratorio
     *   }
     * })
     * 
     */
    delete<T extends statusControledeLaboratorioDeleteArgs>(args: SelectSubset<T, statusControledeLaboratorioDeleteArgs<ExtArgs>>): Prisma__statusControledeLaboratorioClient<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusControledeLaboratorio.
     * @param {statusControledeLaboratorioUpdateArgs} args - Arguments to update one StatusControledeLaboratorio.
     * @example
     * // Update one StatusControledeLaboratorio
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends statusControledeLaboratorioUpdateArgs>(args: SelectSubset<T, statusControledeLaboratorioUpdateArgs<ExtArgs>>): Prisma__statusControledeLaboratorioClient<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusControledeLaboratorios.
     * @param {statusControledeLaboratorioDeleteManyArgs} args - Arguments to filter StatusControledeLaboratorios to delete.
     * @example
     * // Delete a few StatusControledeLaboratorios
     * const { count } = await prisma.statusControledeLaboratorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends statusControledeLaboratorioDeleteManyArgs>(args?: SelectSubset<T, statusControledeLaboratorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusControledeLaboratorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusControledeLaboratorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusControledeLaboratorios
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends statusControledeLaboratorioUpdateManyArgs>(args: SelectSubset<T, statusControledeLaboratorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusControledeLaboratorios and returns the data updated in the database.
     * @param {statusControledeLaboratorioUpdateManyAndReturnArgs} args - Arguments to update many StatusControledeLaboratorios.
     * @example
     * // Update many StatusControledeLaboratorios
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusControledeLaboratorios and only return the `id`
     * const statusControledeLaboratorioWithIdOnly = await prisma.statusControledeLaboratorio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends statusControledeLaboratorioUpdateManyAndReturnArgs>(args: SelectSubset<T, statusControledeLaboratorioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusControledeLaboratorio.
     * @param {statusControledeLaboratorioUpsertArgs} args - Arguments to update or create a StatusControledeLaboratorio.
     * @example
     * // Update or create a StatusControledeLaboratorio
     * const statusControledeLaboratorio = await prisma.statusControledeLaboratorio.upsert({
     *   create: {
     *     // ... data to create a StatusControledeLaboratorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusControledeLaboratorio we want to update
     *   }
     * })
     */
    upsert<T extends statusControledeLaboratorioUpsertArgs>(args: SelectSubset<T, statusControledeLaboratorioUpsertArgs<ExtArgs>>): Prisma__statusControledeLaboratorioClient<$Result.GetResult<Prisma.$statusControledeLaboratorioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusControledeLaboratorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusControledeLaboratorioCountArgs} args - Arguments to filter StatusControledeLaboratorios to count.
     * @example
     * // Count the number of StatusControledeLaboratorios
     * const count = await prisma.statusControledeLaboratorio.count({
     *   where: {
     *     // ... the filter for the StatusControledeLaboratorios we want to count
     *   }
     * })
    **/
    count<T extends statusControledeLaboratorioCountArgs>(
      args?: Subset<T, statusControledeLaboratorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusControledeLaboratorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusControledeLaboratorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusControledeLaboratorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusControledeLaboratorioAggregateArgs>(args: Subset<T, StatusControledeLaboratorioAggregateArgs>): Prisma.PrismaPromise<GetStatusControledeLaboratorioAggregateType<T>>

    /**
     * Group by StatusControledeLaboratorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusControledeLaboratorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends statusControledeLaboratorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: statusControledeLaboratorioGroupByArgs['orderBy'] }
        : { orderBy?: statusControledeLaboratorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, statusControledeLaboratorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusControledeLaboratorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the statusControledeLaboratorio model
   */
  readonly fields: statusControledeLaboratorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for statusControledeLaboratorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__statusControledeLaboratorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    controlesDeLaboratio<T extends statusControledeLaboratorio$controlesDeLaboratioArgs<ExtArgs> = {}>(args?: Subset<T, statusControledeLaboratorio$controlesDeLaboratioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeLaboratioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the statusControledeLaboratorio model
   */
  interface statusControledeLaboratorioFieldRefs {
    readonly id: FieldRef<"statusControledeLaboratorio", 'String'>
    readonly name: FieldRef<"statusControledeLaboratorio", 'String'>
    readonly create_at: FieldRef<"statusControledeLaboratorio", 'DateTime'>
    readonly updated_at: FieldRef<"statusControledeLaboratorio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * statusControledeLaboratorio findUnique
   */
  export type statusControledeLaboratorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which statusControledeLaboratorio to fetch.
     */
    where: statusControledeLaboratorioWhereUniqueInput
  }

  /**
   * statusControledeLaboratorio findUniqueOrThrow
   */
  export type statusControledeLaboratorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which statusControledeLaboratorio to fetch.
     */
    where: statusControledeLaboratorioWhereUniqueInput
  }

  /**
   * statusControledeLaboratorio findFirst
   */
  export type statusControledeLaboratorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which statusControledeLaboratorio to fetch.
     */
    where?: statusControledeLaboratorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusControledeLaboratorios to fetch.
     */
    orderBy?: statusControledeLaboratorioOrderByWithRelationInput | statusControledeLaboratorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusControledeLaboratorios.
     */
    cursor?: statusControledeLaboratorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusControledeLaboratorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusControledeLaboratorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusControledeLaboratorios.
     */
    distinct?: StatusControledeLaboratorioScalarFieldEnum | StatusControledeLaboratorioScalarFieldEnum[]
  }

  /**
   * statusControledeLaboratorio findFirstOrThrow
   */
  export type statusControledeLaboratorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which statusControledeLaboratorio to fetch.
     */
    where?: statusControledeLaboratorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusControledeLaboratorios to fetch.
     */
    orderBy?: statusControledeLaboratorioOrderByWithRelationInput | statusControledeLaboratorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusControledeLaboratorios.
     */
    cursor?: statusControledeLaboratorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusControledeLaboratorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusControledeLaboratorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusControledeLaboratorios.
     */
    distinct?: StatusControledeLaboratorioScalarFieldEnum | StatusControledeLaboratorioScalarFieldEnum[]
  }

  /**
   * statusControledeLaboratorio findMany
   */
  export type statusControledeLaboratorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which statusControledeLaboratorios to fetch.
     */
    where?: statusControledeLaboratorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusControledeLaboratorios to fetch.
     */
    orderBy?: statusControledeLaboratorioOrderByWithRelationInput | statusControledeLaboratorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statusControledeLaboratorios.
     */
    cursor?: statusControledeLaboratorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusControledeLaboratorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusControledeLaboratorios.
     */
    skip?: number
    distinct?: StatusControledeLaboratorioScalarFieldEnum | StatusControledeLaboratorioScalarFieldEnum[]
  }

  /**
   * statusControledeLaboratorio create
   */
  export type statusControledeLaboratorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
    /**
     * The data needed to create a statusControledeLaboratorio.
     */
    data: XOR<statusControledeLaboratorioCreateInput, statusControledeLaboratorioUncheckedCreateInput>
  }

  /**
   * statusControledeLaboratorio createMany
   */
  export type statusControledeLaboratorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many statusControledeLaboratorios.
     */
    data: statusControledeLaboratorioCreateManyInput | statusControledeLaboratorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusControledeLaboratorio createManyAndReturn
   */
  export type statusControledeLaboratorioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * The data used to create many statusControledeLaboratorios.
     */
    data: statusControledeLaboratorioCreateManyInput | statusControledeLaboratorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusControledeLaboratorio update
   */
  export type statusControledeLaboratorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
    /**
     * The data needed to update a statusControledeLaboratorio.
     */
    data: XOR<statusControledeLaboratorioUpdateInput, statusControledeLaboratorioUncheckedUpdateInput>
    /**
     * Choose, which statusControledeLaboratorio to update.
     */
    where: statusControledeLaboratorioWhereUniqueInput
  }

  /**
   * statusControledeLaboratorio updateMany
   */
  export type statusControledeLaboratorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update statusControledeLaboratorios.
     */
    data: XOR<statusControledeLaboratorioUpdateManyMutationInput, statusControledeLaboratorioUncheckedUpdateManyInput>
    /**
     * Filter which statusControledeLaboratorios to update
     */
    where?: statusControledeLaboratorioWhereInput
    /**
     * Limit how many statusControledeLaboratorios to update.
     */
    limit?: number
  }

  /**
   * statusControledeLaboratorio updateManyAndReturn
   */
  export type statusControledeLaboratorioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * The data used to update statusControledeLaboratorios.
     */
    data: XOR<statusControledeLaboratorioUpdateManyMutationInput, statusControledeLaboratorioUncheckedUpdateManyInput>
    /**
     * Filter which statusControledeLaboratorios to update
     */
    where?: statusControledeLaboratorioWhereInput
    /**
     * Limit how many statusControledeLaboratorios to update.
     */
    limit?: number
  }

  /**
   * statusControledeLaboratorio upsert
   */
  export type statusControledeLaboratorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
    /**
     * The filter to search for the statusControledeLaboratorio to update in case it exists.
     */
    where: statusControledeLaboratorioWhereUniqueInput
    /**
     * In case the statusControledeLaboratorio found by the `where` argument doesn't exist, create a new statusControledeLaboratorio with this data.
     */
    create: XOR<statusControledeLaboratorioCreateInput, statusControledeLaboratorioUncheckedCreateInput>
    /**
     * In case the statusControledeLaboratorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusControledeLaboratorioUpdateInput, statusControledeLaboratorioUncheckedUpdateInput>
  }

  /**
   * statusControledeLaboratorio delete
   */
  export type statusControledeLaboratorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
    /**
     * Filter which statusControledeLaboratorio to delete.
     */
    where: statusControledeLaboratorioWhereUniqueInput
  }

  /**
   * statusControledeLaboratorio deleteMany
   */
  export type statusControledeLaboratorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusControledeLaboratorios to delete
     */
    where?: statusControledeLaboratorioWhereInput
    /**
     * Limit how many statusControledeLaboratorios to delete.
     */
    limit?: number
  }

  /**
   * statusControledeLaboratorio.controlesDeLaboratio
   */
  export type statusControledeLaboratorio$controlesDeLaboratioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeLaboratio
     */
    select?: controleDeLaboratioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeLaboratio
     */
    omit?: controleDeLaboratioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeLaboratioInclude<ExtArgs> | null
    where?: controleDeLaboratioWhereInput
    orderBy?: controleDeLaboratioOrderByWithRelationInput | controleDeLaboratioOrderByWithRelationInput[]
    cursor?: controleDeLaboratioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeLaboratioScalarFieldEnum | ControleDeLaboratioScalarFieldEnum[]
  }

  /**
   * statusControledeLaboratorio without action
   */
  export type statusControledeLaboratorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusControledeLaboratorio
     */
    select?: statusControledeLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusControledeLaboratorio
     */
    omit?: statusControledeLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusControledeLaboratorioInclude<ExtArgs> | null
  }


  /**
   * Model controleDeMaquinasPendentesLaboratorio
   */

  export type AggregateControleDeMaquinasPendentesLaboratorio = {
    _count: ControleDeMaquinasPendentesLaboratorioCountAggregateOutputType | null
    _min: ControleDeMaquinasPendentesLaboratorioMinAggregateOutputType | null
    _max: ControleDeMaquinasPendentesLaboratorioMaxAggregateOutputType | null
  }

  export type ControleDeMaquinasPendentesLaboratorioMinAggregateOutputType = {
    id: string | null
    numeroDeSerie: string | null
    ssd: string | null
    idDaOs: string | null
    obs: string | null
    create_at: Date | null
    updated_at: Date | null
    equipamento_id: string | null
    statusMaquinasPendentesLab_id: string | null
  }

  export type ControleDeMaquinasPendentesLaboratorioMaxAggregateOutputType = {
    id: string | null
    numeroDeSerie: string | null
    ssd: string | null
    idDaOs: string | null
    obs: string | null
    create_at: Date | null
    updated_at: Date | null
    equipamento_id: string | null
    statusMaquinasPendentesLab_id: string | null
  }

  export type ControleDeMaquinasPendentesLaboratorioCountAggregateOutputType = {
    id: number
    numeroDeSerie: number
    ssd: number
    idDaOs: number
    obs: number
    create_at: number
    updated_at: number
    equipamento_id: number
    statusMaquinasPendentesLab_id: number
    _all: number
  }


  export type ControleDeMaquinasPendentesLaboratorioMinAggregateInputType = {
    id?: true
    numeroDeSerie?: true
    ssd?: true
    idDaOs?: true
    obs?: true
    create_at?: true
    updated_at?: true
    equipamento_id?: true
    statusMaquinasPendentesLab_id?: true
  }

  export type ControleDeMaquinasPendentesLaboratorioMaxAggregateInputType = {
    id?: true
    numeroDeSerie?: true
    ssd?: true
    idDaOs?: true
    obs?: true
    create_at?: true
    updated_at?: true
    equipamento_id?: true
    statusMaquinasPendentesLab_id?: true
  }

  export type ControleDeMaquinasPendentesLaboratorioCountAggregateInputType = {
    id?: true
    numeroDeSerie?: true
    ssd?: true
    idDaOs?: true
    obs?: true
    create_at?: true
    updated_at?: true
    equipamento_id?: true
    statusMaquinasPendentesLab_id?: true
    _all?: true
  }

  export type ControleDeMaquinasPendentesLaboratorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controleDeMaquinasPendentesLaboratorio to aggregate.
     */
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeMaquinasPendentesLaboratorios to fetch.
     */
    orderBy?: controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput | controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeMaquinasPendentesLaboratorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeMaquinasPendentesLaboratorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned controleDeMaquinasPendentesLaboratorios
    **/
    _count?: true | ControleDeMaquinasPendentesLaboratorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControleDeMaquinasPendentesLaboratorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControleDeMaquinasPendentesLaboratorioMaxAggregateInputType
  }

  export type GetControleDeMaquinasPendentesLaboratorioAggregateType<T extends ControleDeMaquinasPendentesLaboratorioAggregateArgs> = {
        [P in keyof T & keyof AggregateControleDeMaquinasPendentesLaboratorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControleDeMaquinasPendentesLaboratorio[P]>
      : GetScalarType<T[P], AggregateControleDeMaquinasPendentesLaboratorio[P]>
  }




  export type controleDeMaquinasPendentesLaboratorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    orderBy?: controleDeMaquinasPendentesLaboratorioOrderByWithAggregationInput | controleDeMaquinasPendentesLaboratorioOrderByWithAggregationInput[]
    by: ControleDeMaquinasPendentesLaboratorioScalarFieldEnum[] | ControleDeMaquinasPendentesLaboratorioScalarFieldEnum
    having?: controleDeMaquinasPendentesLaboratorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControleDeMaquinasPendentesLaboratorioCountAggregateInputType | true
    _min?: ControleDeMaquinasPendentesLaboratorioMinAggregateInputType
    _max?: ControleDeMaquinasPendentesLaboratorioMaxAggregateInputType
  }

  export type ControleDeMaquinasPendentesLaboratorioGroupByOutputType = {
    id: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at: Date | null
    updated_at: Date | null
    equipamento_id: string
    statusMaquinasPendentesLab_id: string
    _count: ControleDeMaquinasPendentesLaboratorioCountAggregateOutputType | null
    _min: ControleDeMaquinasPendentesLaboratorioMinAggregateOutputType | null
    _max: ControleDeMaquinasPendentesLaboratorioMaxAggregateOutputType | null
  }

  type GetControleDeMaquinasPendentesLaboratorioGroupByPayload<T extends controleDeMaquinasPendentesLaboratorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControleDeMaquinasPendentesLaboratorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControleDeMaquinasPendentesLaboratorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControleDeMaquinasPendentesLaboratorioGroupByOutputType[P]>
            : GetScalarType<T[P], ControleDeMaquinasPendentesLaboratorioGroupByOutputType[P]>
        }
      >
    >


  export type controleDeMaquinasPendentesLaboratorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numeroDeSerie?: boolean
    ssd?: boolean
    idDaOs?: boolean
    obs?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento_id?: boolean
    statusMaquinasPendentesLab_id?: boolean
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusMaquinasPendentesLab?: boolean | statusMaquinasPendentesLabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeMaquinasPendentesLaboratorio"]>

  export type controleDeMaquinasPendentesLaboratorioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numeroDeSerie?: boolean
    ssd?: boolean
    idDaOs?: boolean
    obs?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento_id?: boolean
    statusMaquinasPendentesLab_id?: boolean
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusMaquinasPendentesLab?: boolean | statusMaquinasPendentesLabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeMaquinasPendentesLaboratorio"]>

  export type controleDeMaquinasPendentesLaboratorioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numeroDeSerie?: boolean
    ssd?: boolean
    idDaOs?: boolean
    obs?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento_id?: boolean
    statusMaquinasPendentesLab_id?: boolean
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusMaquinasPendentesLab?: boolean | statusMaquinasPendentesLabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controleDeMaquinasPendentesLaboratorio"]>

  export type controleDeMaquinasPendentesLaboratorioSelectScalar = {
    id?: boolean
    numeroDeSerie?: boolean
    ssd?: boolean
    idDaOs?: boolean
    obs?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento_id?: boolean
    statusMaquinasPendentesLab_id?: boolean
  }

  export type controleDeMaquinasPendentesLaboratorioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "numeroDeSerie" | "ssd" | "idDaOs" | "obs" | "create_at" | "updated_at" | "equipamento_id" | "statusMaquinasPendentesLab_id", ExtArgs["result"]["controleDeMaquinasPendentesLaboratorio"]>
  export type controleDeMaquinasPendentesLaboratorioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusMaquinasPendentesLab?: boolean | statusMaquinasPendentesLabDefaultArgs<ExtArgs>
  }
  export type controleDeMaquinasPendentesLaboratorioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusMaquinasPendentesLab?: boolean | statusMaquinasPendentesLabDefaultArgs<ExtArgs>
  }
  export type controleDeMaquinasPendentesLaboratorioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    statusMaquinasPendentesLab?: boolean | statusMaquinasPendentesLabDefaultArgs<ExtArgs>
  }

  export type $controleDeMaquinasPendentesLaboratorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "controleDeMaquinasPendentesLaboratorio"
    objects: {
      equipamento: Prisma.$EquipamentoPayload<ExtArgs>
      statusMaquinasPendentesLab: Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      numeroDeSerie: string
      ssd: string
      idDaOs: string
      obs: string
      create_at: Date | null
      updated_at: Date | null
      equipamento_id: string
      statusMaquinasPendentesLab_id: string
    }, ExtArgs["result"]["controleDeMaquinasPendentesLaboratorio"]>
    composites: {}
  }

  type controleDeMaquinasPendentesLaboratorioGetPayload<S extends boolean | null | undefined | controleDeMaquinasPendentesLaboratorioDefaultArgs> = $Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload, S>

  type controleDeMaquinasPendentesLaboratorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<controleDeMaquinasPendentesLaboratorioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ControleDeMaquinasPendentesLaboratorioCountAggregateInputType | true
    }

  export interface controleDeMaquinasPendentesLaboratorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['controleDeMaquinasPendentesLaboratorio'], meta: { name: 'controleDeMaquinasPendentesLaboratorio' } }
    /**
     * Find zero or one ControleDeMaquinasPendentesLaboratorio that matches the filter.
     * @param {controleDeMaquinasPendentesLaboratorioFindUniqueArgs} args - Arguments to find a ControleDeMaquinasPendentesLaboratorio
     * @example
     * // Get one ControleDeMaquinasPendentesLaboratorio
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends controleDeMaquinasPendentesLaboratorioFindUniqueArgs>(args: SelectSubset<T, controleDeMaquinasPendentesLaboratorioFindUniqueArgs<ExtArgs>>): Prisma__controleDeMaquinasPendentesLaboratorioClient<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ControleDeMaquinasPendentesLaboratorio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {controleDeMaquinasPendentesLaboratorioFindUniqueOrThrowArgs} args - Arguments to find a ControleDeMaquinasPendentesLaboratorio
     * @example
     * // Get one ControleDeMaquinasPendentesLaboratorio
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends controleDeMaquinasPendentesLaboratorioFindUniqueOrThrowArgs>(args: SelectSubset<T, controleDeMaquinasPendentesLaboratorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__controleDeMaquinasPendentesLaboratorioClient<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControleDeMaquinasPendentesLaboratorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeMaquinasPendentesLaboratorioFindFirstArgs} args - Arguments to find a ControleDeMaquinasPendentesLaboratorio
     * @example
     * // Get one ControleDeMaquinasPendentesLaboratorio
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends controleDeMaquinasPendentesLaboratorioFindFirstArgs>(args?: SelectSubset<T, controleDeMaquinasPendentesLaboratorioFindFirstArgs<ExtArgs>>): Prisma__controleDeMaquinasPendentesLaboratorioClient<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControleDeMaquinasPendentesLaboratorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeMaquinasPendentesLaboratorioFindFirstOrThrowArgs} args - Arguments to find a ControleDeMaquinasPendentesLaboratorio
     * @example
     * // Get one ControleDeMaquinasPendentesLaboratorio
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends controleDeMaquinasPendentesLaboratorioFindFirstOrThrowArgs>(args?: SelectSubset<T, controleDeMaquinasPendentesLaboratorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__controleDeMaquinasPendentesLaboratorioClient<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ControleDeMaquinasPendentesLaboratorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeMaquinasPendentesLaboratorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ControleDeMaquinasPendentesLaboratorios
     * const controleDeMaquinasPendentesLaboratorios = await prisma.controleDeMaquinasPendentesLaboratorio.findMany()
     * 
     * // Get first 10 ControleDeMaquinasPendentesLaboratorios
     * const controleDeMaquinasPendentesLaboratorios = await prisma.controleDeMaquinasPendentesLaboratorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controleDeMaquinasPendentesLaboratorioWithIdOnly = await prisma.controleDeMaquinasPendentesLaboratorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends controleDeMaquinasPendentesLaboratorioFindManyArgs>(args?: SelectSubset<T, controleDeMaquinasPendentesLaboratorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ControleDeMaquinasPendentesLaboratorio.
     * @param {controleDeMaquinasPendentesLaboratorioCreateArgs} args - Arguments to create a ControleDeMaquinasPendentesLaboratorio.
     * @example
     * // Create one ControleDeMaquinasPendentesLaboratorio
     * const ControleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.create({
     *   data: {
     *     // ... data to create a ControleDeMaquinasPendentesLaboratorio
     *   }
     * })
     * 
     */
    create<T extends controleDeMaquinasPendentesLaboratorioCreateArgs>(args: SelectSubset<T, controleDeMaquinasPendentesLaboratorioCreateArgs<ExtArgs>>): Prisma__controleDeMaquinasPendentesLaboratorioClient<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ControleDeMaquinasPendentesLaboratorios.
     * @param {controleDeMaquinasPendentesLaboratorioCreateManyArgs} args - Arguments to create many ControleDeMaquinasPendentesLaboratorios.
     * @example
     * // Create many ControleDeMaquinasPendentesLaboratorios
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends controleDeMaquinasPendentesLaboratorioCreateManyArgs>(args?: SelectSubset<T, controleDeMaquinasPendentesLaboratorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ControleDeMaquinasPendentesLaboratorios and returns the data saved in the database.
     * @param {controleDeMaquinasPendentesLaboratorioCreateManyAndReturnArgs} args - Arguments to create many ControleDeMaquinasPendentesLaboratorios.
     * @example
     * // Create many ControleDeMaquinasPendentesLaboratorios
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ControleDeMaquinasPendentesLaboratorios and only return the `id`
     * const controleDeMaquinasPendentesLaboratorioWithIdOnly = await prisma.controleDeMaquinasPendentesLaboratorio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends controleDeMaquinasPendentesLaboratorioCreateManyAndReturnArgs>(args?: SelectSubset<T, controleDeMaquinasPendentesLaboratorioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ControleDeMaquinasPendentesLaboratorio.
     * @param {controleDeMaquinasPendentesLaboratorioDeleteArgs} args - Arguments to delete one ControleDeMaquinasPendentesLaboratorio.
     * @example
     * // Delete one ControleDeMaquinasPendentesLaboratorio
     * const ControleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.delete({
     *   where: {
     *     // ... filter to delete one ControleDeMaquinasPendentesLaboratorio
     *   }
     * })
     * 
     */
    delete<T extends controleDeMaquinasPendentesLaboratorioDeleteArgs>(args: SelectSubset<T, controleDeMaquinasPendentesLaboratorioDeleteArgs<ExtArgs>>): Prisma__controleDeMaquinasPendentesLaboratorioClient<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ControleDeMaquinasPendentesLaboratorio.
     * @param {controleDeMaquinasPendentesLaboratorioUpdateArgs} args - Arguments to update one ControleDeMaquinasPendentesLaboratorio.
     * @example
     * // Update one ControleDeMaquinasPendentesLaboratorio
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends controleDeMaquinasPendentesLaboratorioUpdateArgs>(args: SelectSubset<T, controleDeMaquinasPendentesLaboratorioUpdateArgs<ExtArgs>>): Prisma__controleDeMaquinasPendentesLaboratorioClient<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ControleDeMaquinasPendentesLaboratorios.
     * @param {controleDeMaquinasPendentesLaboratorioDeleteManyArgs} args - Arguments to filter ControleDeMaquinasPendentesLaboratorios to delete.
     * @example
     * // Delete a few ControleDeMaquinasPendentesLaboratorios
     * const { count } = await prisma.controleDeMaquinasPendentesLaboratorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends controleDeMaquinasPendentesLaboratorioDeleteManyArgs>(args?: SelectSubset<T, controleDeMaquinasPendentesLaboratorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControleDeMaquinasPendentesLaboratorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeMaquinasPendentesLaboratorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ControleDeMaquinasPendentesLaboratorios
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends controleDeMaquinasPendentesLaboratorioUpdateManyArgs>(args: SelectSubset<T, controleDeMaquinasPendentesLaboratorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControleDeMaquinasPendentesLaboratorios and returns the data updated in the database.
     * @param {controleDeMaquinasPendentesLaboratorioUpdateManyAndReturnArgs} args - Arguments to update many ControleDeMaquinasPendentesLaboratorios.
     * @example
     * // Update many ControleDeMaquinasPendentesLaboratorios
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ControleDeMaquinasPendentesLaboratorios and only return the `id`
     * const controleDeMaquinasPendentesLaboratorioWithIdOnly = await prisma.controleDeMaquinasPendentesLaboratorio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends controleDeMaquinasPendentesLaboratorioUpdateManyAndReturnArgs>(args: SelectSubset<T, controleDeMaquinasPendentesLaboratorioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ControleDeMaquinasPendentesLaboratorio.
     * @param {controleDeMaquinasPendentesLaboratorioUpsertArgs} args - Arguments to update or create a ControleDeMaquinasPendentesLaboratorio.
     * @example
     * // Update or create a ControleDeMaquinasPendentesLaboratorio
     * const controleDeMaquinasPendentesLaboratorio = await prisma.controleDeMaquinasPendentesLaboratorio.upsert({
     *   create: {
     *     // ... data to create a ControleDeMaquinasPendentesLaboratorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ControleDeMaquinasPendentesLaboratorio we want to update
     *   }
     * })
     */
    upsert<T extends controleDeMaquinasPendentesLaboratorioUpsertArgs>(args: SelectSubset<T, controleDeMaquinasPendentesLaboratorioUpsertArgs<ExtArgs>>): Prisma__controleDeMaquinasPendentesLaboratorioClient<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ControleDeMaquinasPendentesLaboratorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeMaquinasPendentesLaboratorioCountArgs} args - Arguments to filter ControleDeMaquinasPendentesLaboratorios to count.
     * @example
     * // Count the number of ControleDeMaquinasPendentesLaboratorios
     * const count = await prisma.controleDeMaquinasPendentesLaboratorio.count({
     *   where: {
     *     // ... the filter for the ControleDeMaquinasPendentesLaboratorios we want to count
     *   }
     * })
    **/
    count<T extends controleDeMaquinasPendentesLaboratorioCountArgs>(
      args?: Subset<T, controleDeMaquinasPendentesLaboratorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControleDeMaquinasPendentesLaboratorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ControleDeMaquinasPendentesLaboratorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControleDeMaquinasPendentesLaboratorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControleDeMaquinasPendentesLaboratorioAggregateArgs>(args: Subset<T, ControleDeMaquinasPendentesLaboratorioAggregateArgs>): Prisma.PrismaPromise<GetControleDeMaquinasPendentesLaboratorioAggregateType<T>>

    /**
     * Group by ControleDeMaquinasPendentesLaboratorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controleDeMaquinasPendentesLaboratorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends controleDeMaquinasPendentesLaboratorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: controleDeMaquinasPendentesLaboratorioGroupByArgs['orderBy'] }
        : { orderBy?: controleDeMaquinasPendentesLaboratorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, controleDeMaquinasPendentesLaboratorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControleDeMaquinasPendentesLaboratorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the controleDeMaquinasPendentesLaboratorio model
   */
  readonly fields: controleDeMaquinasPendentesLaboratorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for controleDeMaquinasPendentesLaboratorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__controleDeMaquinasPendentesLaboratorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipamento<T extends EquipamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipamentoDefaultArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    statusMaquinasPendentesLab<T extends statusMaquinasPendentesLabDefaultArgs<ExtArgs> = {}>(args?: Subset<T, statusMaquinasPendentesLabDefaultArgs<ExtArgs>>): Prisma__statusMaquinasPendentesLabClient<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the controleDeMaquinasPendentesLaboratorio model
   */
  interface controleDeMaquinasPendentesLaboratorioFieldRefs {
    readonly id: FieldRef<"controleDeMaquinasPendentesLaboratorio", 'String'>
    readonly numeroDeSerie: FieldRef<"controleDeMaquinasPendentesLaboratorio", 'String'>
    readonly ssd: FieldRef<"controleDeMaquinasPendentesLaboratorio", 'String'>
    readonly idDaOs: FieldRef<"controleDeMaquinasPendentesLaboratorio", 'String'>
    readonly obs: FieldRef<"controleDeMaquinasPendentesLaboratorio", 'String'>
    readonly create_at: FieldRef<"controleDeMaquinasPendentesLaboratorio", 'DateTime'>
    readonly updated_at: FieldRef<"controleDeMaquinasPendentesLaboratorio", 'DateTime'>
    readonly equipamento_id: FieldRef<"controleDeMaquinasPendentesLaboratorio", 'String'>
    readonly statusMaquinasPendentesLab_id: FieldRef<"controleDeMaquinasPendentesLaboratorio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * controleDeMaquinasPendentesLaboratorio findUnique
   */
  export type controleDeMaquinasPendentesLaboratorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeMaquinasPendentesLaboratorio to fetch.
     */
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
  }

  /**
   * controleDeMaquinasPendentesLaboratorio findUniqueOrThrow
   */
  export type controleDeMaquinasPendentesLaboratorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeMaquinasPendentesLaboratorio to fetch.
     */
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
  }

  /**
   * controleDeMaquinasPendentesLaboratorio findFirst
   */
  export type controleDeMaquinasPendentesLaboratorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeMaquinasPendentesLaboratorio to fetch.
     */
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeMaquinasPendentesLaboratorios to fetch.
     */
    orderBy?: controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput | controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controleDeMaquinasPendentesLaboratorios.
     */
    cursor?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeMaquinasPendentesLaboratorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeMaquinasPendentesLaboratorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controleDeMaquinasPendentesLaboratorios.
     */
    distinct?: ControleDeMaquinasPendentesLaboratorioScalarFieldEnum | ControleDeMaquinasPendentesLaboratorioScalarFieldEnum[]
  }

  /**
   * controleDeMaquinasPendentesLaboratorio findFirstOrThrow
   */
  export type controleDeMaquinasPendentesLaboratorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeMaquinasPendentesLaboratorio to fetch.
     */
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeMaquinasPendentesLaboratorios to fetch.
     */
    orderBy?: controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput | controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controleDeMaquinasPendentesLaboratorios.
     */
    cursor?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeMaquinasPendentesLaboratorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeMaquinasPendentesLaboratorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controleDeMaquinasPendentesLaboratorios.
     */
    distinct?: ControleDeMaquinasPendentesLaboratorioScalarFieldEnum | ControleDeMaquinasPendentesLaboratorioScalarFieldEnum[]
  }

  /**
   * controleDeMaquinasPendentesLaboratorio findMany
   */
  export type controleDeMaquinasPendentesLaboratorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    /**
     * Filter, which controleDeMaquinasPendentesLaboratorios to fetch.
     */
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controleDeMaquinasPendentesLaboratorios to fetch.
     */
    orderBy?: controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput | controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing controleDeMaquinasPendentesLaboratorios.
     */
    cursor?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controleDeMaquinasPendentesLaboratorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controleDeMaquinasPendentesLaboratorios.
     */
    skip?: number
    distinct?: ControleDeMaquinasPendentesLaboratorioScalarFieldEnum | ControleDeMaquinasPendentesLaboratorioScalarFieldEnum[]
  }

  /**
   * controleDeMaquinasPendentesLaboratorio create
   */
  export type controleDeMaquinasPendentesLaboratorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    /**
     * The data needed to create a controleDeMaquinasPendentesLaboratorio.
     */
    data: XOR<controleDeMaquinasPendentesLaboratorioCreateInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateInput>
  }

  /**
   * controleDeMaquinasPendentesLaboratorio createMany
   */
  export type controleDeMaquinasPendentesLaboratorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many controleDeMaquinasPendentesLaboratorios.
     */
    data: controleDeMaquinasPendentesLaboratorioCreateManyInput | controleDeMaquinasPendentesLaboratorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * controleDeMaquinasPendentesLaboratorio createManyAndReturn
   */
  export type controleDeMaquinasPendentesLaboratorioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * The data used to create many controleDeMaquinasPendentesLaboratorios.
     */
    data: controleDeMaquinasPendentesLaboratorioCreateManyInput | controleDeMaquinasPendentesLaboratorioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * controleDeMaquinasPendentesLaboratorio update
   */
  export type controleDeMaquinasPendentesLaboratorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    /**
     * The data needed to update a controleDeMaquinasPendentesLaboratorio.
     */
    data: XOR<controleDeMaquinasPendentesLaboratorioUpdateInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateInput>
    /**
     * Choose, which controleDeMaquinasPendentesLaboratorio to update.
     */
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
  }

  /**
   * controleDeMaquinasPendentesLaboratorio updateMany
   */
  export type controleDeMaquinasPendentesLaboratorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update controleDeMaquinasPendentesLaboratorios.
     */
    data: XOR<controleDeMaquinasPendentesLaboratorioUpdateManyMutationInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyInput>
    /**
     * Filter which controleDeMaquinasPendentesLaboratorios to update
     */
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    /**
     * Limit how many controleDeMaquinasPendentesLaboratorios to update.
     */
    limit?: number
  }

  /**
   * controleDeMaquinasPendentesLaboratorio updateManyAndReturn
   */
  export type controleDeMaquinasPendentesLaboratorioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * The data used to update controleDeMaquinasPendentesLaboratorios.
     */
    data: XOR<controleDeMaquinasPendentesLaboratorioUpdateManyMutationInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyInput>
    /**
     * Filter which controleDeMaquinasPendentesLaboratorios to update
     */
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    /**
     * Limit how many controleDeMaquinasPendentesLaboratorios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * controleDeMaquinasPendentesLaboratorio upsert
   */
  export type controleDeMaquinasPendentesLaboratorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    /**
     * The filter to search for the controleDeMaquinasPendentesLaboratorio to update in case it exists.
     */
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    /**
     * In case the controleDeMaquinasPendentesLaboratorio found by the `where` argument doesn't exist, create a new controleDeMaquinasPendentesLaboratorio with this data.
     */
    create: XOR<controleDeMaquinasPendentesLaboratorioCreateInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateInput>
    /**
     * In case the controleDeMaquinasPendentesLaboratorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<controleDeMaquinasPendentesLaboratorioUpdateInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateInput>
  }

  /**
   * controleDeMaquinasPendentesLaboratorio delete
   */
  export type controleDeMaquinasPendentesLaboratorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    /**
     * Filter which controleDeMaquinasPendentesLaboratorio to delete.
     */
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
  }

  /**
   * controleDeMaquinasPendentesLaboratorio deleteMany
   */
  export type controleDeMaquinasPendentesLaboratorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controleDeMaquinasPendentesLaboratorios to delete
     */
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    /**
     * Limit how many controleDeMaquinasPendentesLaboratorios to delete.
     */
    limit?: number
  }

  /**
   * controleDeMaquinasPendentesLaboratorio without action
   */
  export type controleDeMaquinasPendentesLaboratorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
  }


  /**
   * Model statusMaquinasPendentesLab
   */

  export type AggregateStatusMaquinasPendentesLab = {
    _count: StatusMaquinasPendentesLabCountAggregateOutputType | null
    _min: StatusMaquinasPendentesLabMinAggregateOutputType | null
    _max: StatusMaquinasPendentesLabMaxAggregateOutputType | null
  }

  export type StatusMaquinasPendentesLabMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusMaquinasPendentesLabMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusMaquinasPendentesLabCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type StatusMaquinasPendentesLabMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusMaquinasPendentesLabMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusMaquinasPendentesLabCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type StatusMaquinasPendentesLabAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusMaquinasPendentesLab to aggregate.
     */
    where?: statusMaquinasPendentesLabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusMaquinasPendentesLabs to fetch.
     */
    orderBy?: statusMaquinasPendentesLabOrderByWithRelationInput | statusMaquinasPendentesLabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusMaquinasPendentesLabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusMaquinasPendentesLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusMaquinasPendentesLabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statusMaquinasPendentesLabs
    **/
    _count?: true | StatusMaquinasPendentesLabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMaquinasPendentesLabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaquinasPendentesLabMaxAggregateInputType
  }

  export type GetStatusMaquinasPendentesLabAggregateType<T extends StatusMaquinasPendentesLabAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusMaquinasPendentesLab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusMaquinasPendentesLab[P]>
      : GetScalarType<T[P], AggregateStatusMaquinasPendentesLab[P]>
  }




  export type statusMaquinasPendentesLabGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: statusMaquinasPendentesLabWhereInput
    orderBy?: statusMaquinasPendentesLabOrderByWithAggregationInput | statusMaquinasPendentesLabOrderByWithAggregationInput[]
    by: StatusMaquinasPendentesLabScalarFieldEnum[] | StatusMaquinasPendentesLabScalarFieldEnum
    having?: statusMaquinasPendentesLabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusMaquinasPendentesLabCountAggregateInputType | true
    _min?: StatusMaquinasPendentesLabMinAggregateInputType
    _max?: StatusMaquinasPendentesLabMaxAggregateInputType
  }

  export type StatusMaquinasPendentesLabGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: StatusMaquinasPendentesLabCountAggregateOutputType | null
    _min: StatusMaquinasPendentesLabMinAggregateOutputType | null
    _max: StatusMaquinasPendentesLabMaxAggregateOutputType | null
  }

  type GetStatusMaquinasPendentesLabGroupByPayload<T extends statusMaquinasPendentesLabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusMaquinasPendentesLabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusMaquinasPendentesLabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusMaquinasPendentesLabGroupByOutputType[P]>
            : GetScalarType<T[P], StatusMaquinasPendentesLabGroupByOutputType[P]>
        }
      >
    >


  export type statusMaquinasPendentesLabSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    controlesDeMaquinasPendentesLaboratorio?: boolean | statusMaquinasPendentesLab$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs>
    _count?: boolean | StatusMaquinasPendentesLabCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusMaquinasPendentesLab"]>

  export type statusMaquinasPendentesLabSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusMaquinasPendentesLab"]>

  export type statusMaquinasPendentesLabSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusMaquinasPendentesLab"]>

  export type statusMaquinasPendentesLabSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type statusMaquinasPendentesLabOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["statusMaquinasPendentesLab"]>
  export type statusMaquinasPendentesLabInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controlesDeMaquinasPendentesLaboratorio?: boolean | statusMaquinasPendentesLab$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs>
    _count?: boolean | StatusMaquinasPendentesLabCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type statusMaquinasPendentesLabIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type statusMaquinasPendentesLabIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $statusMaquinasPendentesLabPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "statusMaquinasPendentesLab"
    objects: {
      controlesDeMaquinasPendentesLaboratorio: Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["statusMaquinasPendentesLab"]>
    composites: {}
  }

  type statusMaquinasPendentesLabGetPayload<S extends boolean | null | undefined | statusMaquinasPendentesLabDefaultArgs> = $Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload, S>

  type statusMaquinasPendentesLabCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<statusMaquinasPendentesLabFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusMaquinasPendentesLabCountAggregateInputType | true
    }

  export interface statusMaquinasPendentesLabDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['statusMaquinasPendentesLab'], meta: { name: 'statusMaquinasPendentesLab' } }
    /**
     * Find zero or one StatusMaquinasPendentesLab that matches the filter.
     * @param {statusMaquinasPendentesLabFindUniqueArgs} args - Arguments to find a StatusMaquinasPendentesLab
     * @example
     * // Get one StatusMaquinasPendentesLab
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends statusMaquinasPendentesLabFindUniqueArgs>(args: SelectSubset<T, statusMaquinasPendentesLabFindUniqueArgs<ExtArgs>>): Prisma__statusMaquinasPendentesLabClient<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusMaquinasPendentesLab that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {statusMaquinasPendentesLabFindUniqueOrThrowArgs} args - Arguments to find a StatusMaquinasPendentesLab
     * @example
     * // Get one StatusMaquinasPendentesLab
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends statusMaquinasPendentesLabFindUniqueOrThrowArgs>(args: SelectSubset<T, statusMaquinasPendentesLabFindUniqueOrThrowArgs<ExtArgs>>): Prisma__statusMaquinasPendentesLabClient<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusMaquinasPendentesLab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesLabFindFirstArgs} args - Arguments to find a StatusMaquinasPendentesLab
     * @example
     * // Get one StatusMaquinasPendentesLab
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends statusMaquinasPendentesLabFindFirstArgs>(args?: SelectSubset<T, statusMaquinasPendentesLabFindFirstArgs<ExtArgs>>): Prisma__statusMaquinasPendentesLabClient<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusMaquinasPendentesLab that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesLabFindFirstOrThrowArgs} args - Arguments to find a StatusMaquinasPendentesLab
     * @example
     * // Get one StatusMaquinasPendentesLab
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends statusMaquinasPendentesLabFindFirstOrThrowArgs>(args?: SelectSubset<T, statusMaquinasPendentesLabFindFirstOrThrowArgs<ExtArgs>>): Prisma__statusMaquinasPendentesLabClient<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusMaquinasPendentesLabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesLabFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusMaquinasPendentesLabs
     * const statusMaquinasPendentesLabs = await prisma.statusMaquinasPendentesLab.findMany()
     * 
     * // Get first 10 StatusMaquinasPendentesLabs
     * const statusMaquinasPendentesLabs = await prisma.statusMaquinasPendentesLab.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusMaquinasPendentesLabWithIdOnly = await prisma.statusMaquinasPendentesLab.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends statusMaquinasPendentesLabFindManyArgs>(args?: SelectSubset<T, statusMaquinasPendentesLabFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusMaquinasPendentesLab.
     * @param {statusMaquinasPendentesLabCreateArgs} args - Arguments to create a StatusMaquinasPendentesLab.
     * @example
     * // Create one StatusMaquinasPendentesLab
     * const StatusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.create({
     *   data: {
     *     // ... data to create a StatusMaquinasPendentesLab
     *   }
     * })
     * 
     */
    create<T extends statusMaquinasPendentesLabCreateArgs>(args: SelectSubset<T, statusMaquinasPendentesLabCreateArgs<ExtArgs>>): Prisma__statusMaquinasPendentesLabClient<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusMaquinasPendentesLabs.
     * @param {statusMaquinasPendentesLabCreateManyArgs} args - Arguments to create many StatusMaquinasPendentesLabs.
     * @example
     * // Create many StatusMaquinasPendentesLabs
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends statusMaquinasPendentesLabCreateManyArgs>(args?: SelectSubset<T, statusMaquinasPendentesLabCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusMaquinasPendentesLabs and returns the data saved in the database.
     * @param {statusMaquinasPendentesLabCreateManyAndReturnArgs} args - Arguments to create many StatusMaquinasPendentesLabs.
     * @example
     * // Create many StatusMaquinasPendentesLabs
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusMaquinasPendentesLabs and only return the `id`
     * const statusMaquinasPendentesLabWithIdOnly = await prisma.statusMaquinasPendentesLab.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends statusMaquinasPendentesLabCreateManyAndReturnArgs>(args?: SelectSubset<T, statusMaquinasPendentesLabCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusMaquinasPendentesLab.
     * @param {statusMaquinasPendentesLabDeleteArgs} args - Arguments to delete one StatusMaquinasPendentesLab.
     * @example
     * // Delete one StatusMaquinasPendentesLab
     * const StatusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.delete({
     *   where: {
     *     // ... filter to delete one StatusMaquinasPendentesLab
     *   }
     * })
     * 
     */
    delete<T extends statusMaquinasPendentesLabDeleteArgs>(args: SelectSubset<T, statusMaquinasPendentesLabDeleteArgs<ExtArgs>>): Prisma__statusMaquinasPendentesLabClient<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusMaquinasPendentesLab.
     * @param {statusMaquinasPendentesLabUpdateArgs} args - Arguments to update one StatusMaquinasPendentesLab.
     * @example
     * // Update one StatusMaquinasPendentesLab
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends statusMaquinasPendentesLabUpdateArgs>(args: SelectSubset<T, statusMaquinasPendentesLabUpdateArgs<ExtArgs>>): Prisma__statusMaquinasPendentesLabClient<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusMaquinasPendentesLabs.
     * @param {statusMaquinasPendentesLabDeleteManyArgs} args - Arguments to filter StatusMaquinasPendentesLabs to delete.
     * @example
     * // Delete a few StatusMaquinasPendentesLabs
     * const { count } = await prisma.statusMaquinasPendentesLab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends statusMaquinasPendentesLabDeleteManyArgs>(args?: SelectSubset<T, statusMaquinasPendentesLabDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusMaquinasPendentesLabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesLabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusMaquinasPendentesLabs
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends statusMaquinasPendentesLabUpdateManyArgs>(args: SelectSubset<T, statusMaquinasPendentesLabUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusMaquinasPendentesLabs and returns the data updated in the database.
     * @param {statusMaquinasPendentesLabUpdateManyAndReturnArgs} args - Arguments to update many StatusMaquinasPendentesLabs.
     * @example
     * // Update many StatusMaquinasPendentesLabs
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusMaquinasPendentesLabs and only return the `id`
     * const statusMaquinasPendentesLabWithIdOnly = await prisma.statusMaquinasPendentesLab.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends statusMaquinasPendentesLabUpdateManyAndReturnArgs>(args: SelectSubset<T, statusMaquinasPendentesLabUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusMaquinasPendentesLab.
     * @param {statusMaquinasPendentesLabUpsertArgs} args - Arguments to update or create a StatusMaquinasPendentesLab.
     * @example
     * // Update or create a StatusMaquinasPendentesLab
     * const statusMaquinasPendentesLab = await prisma.statusMaquinasPendentesLab.upsert({
     *   create: {
     *     // ... data to create a StatusMaquinasPendentesLab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusMaquinasPendentesLab we want to update
     *   }
     * })
     */
    upsert<T extends statusMaquinasPendentesLabUpsertArgs>(args: SelectSubset<T, statusMaquinasPendentesLabUpsertArgs<ExtArgs>>): Prisma__statusMaquinasPendentesLabClient<$Result.GetResult<Prisma.$statusMaquinasPendentesLabPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusMaquinasPendentesLabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesLabCountArgs} args - Arguments to filter StatusMaquinasPendentesLabs to count.
     * @example
     * // Count the number of StatusMaquinasPendentesLabs
     * const count = await prisma.statusMaquinasPendentesLab.count({
     *   where: {
     *     // ... the filter for the StatusMaquinasPendentesLabs we want to count
     *   }
     * })
    **/
    count<T extends statusMaquinasPendentesLabCountArgs>(
      args?: Subset<T, statusMaquinasPendentesLabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusMaquinasPendentesLabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusMaquinasPendentesLab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusMaquinasPendentesLabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusMaquinasPendentesLabAggregateArgs>(args: Subset<T, StatusMaquinasPendentesLabAggregateArgs>): Prisma.PrismaPromise<GetStatusMaquinasPendentesLabAggregateType<T>>

    /**
     * Group by StatusMaquinasPendentesLab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesLabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends statusMaquinasPendentesLabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: statusMaquinasPendentesLabGroupByArgs['orderBy'] }
        : { orderBy?: statusMaquinasPendentesLabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, statusMaquinasPendentesLabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusMaquinasPendentesLabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the statusMaquinasPendentesLab model
   */
  readonly fields: statusMaquinasPendentesLabFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for statusMaquinasPendentesLab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__statusMaquinasPendentesLabClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    controlesDeMaquinasPendentesLaboratorio<T extends statusMaquinasPendentesLab$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs> = {}>(args?: Subset<T, statusMaquinasPendentesLab$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controleDeMaquinasPendentesLaboratorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the statusMaquinasPendentesLab model
   */
  interface statusMaquinasPendentesLabFieldRefs {
    readonly id: FieldRef<"statusMaquinasPendentesLab", 'String'>
    readonly name: FieldRef<"statusMaquinasPendentesLab", 'String'>
    readonly create_at: FieldRef<"statusMaquinasPendentesLab", 'DateTime'>
    readonly updated_at: FieldRef<"statusMaquinasPendentesLab", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * statusMaquinasPendentesLab findUnique
   */
  export type statusMaquinasPendentesLabFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesLab to fetch.
     */
    where: statusMaquinasPendentesLabWhereUniqueInput
  }

  /**
   * statusMaquinasPendentesLab findUniqueOrThrow
   */
  export type statusMaquinasPendentesLabFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesLab to fetch.
     */
    where: statusMaquinasPendentesLabWhereUniqueInput
  }

  /**
   * statusMaquinasPendentesLab findFirst
   */
  export type statusMaquinasPendentesLabFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesLab to fetch.
     */
    where?: statusMaquinasPendentesLabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusMaquinasPendentesLabs to fetch.
     */
    orderBy?: statusMaquinasPendentesLabOrderByWithRelationInput | statusMaquinasPendentesLabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusMaquinasPendentesLabs.
     */
    cursor?: statusMaquinasPendentesLabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusMaquinasPendentesLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusMaquinasPendentesLabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusMaquinasPendentesLabs.
     */
    distinct?: StatusMaquinasPendentesLabScalarFieldEnum | StatusMaquinasPendentesLabScalarFieldEnum[]
  }

  /**
   * statusMaquinasPendentesLab findFirstOrThrow
   */
  export type statusMaquinasPendentesLabFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesLab to fetch.
     */
    where?: statusMaquinasPendentesLabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusMaquinasPendentesLabs to fetch.
     */
    orderBy?: statusMaquinasPendentesLabOrderByWithRelationInput | statusMaquinasPendentesLabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusMaquinasPendentesLabs.
     */
    cursor?: statusMaquinasPendentesLabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusMaquinasPendentesLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusMaquinasPendentesLabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusMaquinasPendentesLabs.
     */
    distinct?: StatusMaquinasPendentesLabScalarFieldEnum | StatusMaquinasPendentesLabScalarFieldEnum[]
  }

  /**
   * statusMaquinasPendentesLab findMany
   */
  export type statusMaquinasPendentesLabFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesLabs to fetch.
     */
    where?: statusMaquinasPendentesLabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusMaquinasPendentesLabs to fetch.
     */
    orderBy?: statusMaquinasPendentesLabOrderByWithRelationInput | statusMaquinasPendentesLabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statusMaquinasPendentesLabs.
     */
    cursor?: statusMaquinasPendentesLabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusMaquinasPendentesLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusMaquinasPendentesLabs.
     */
    skip?: number
    distinct?: StatusMaquinasPendentesLabScalarFieldEnum | StatusMaquinasPendentesLabScalarFieldEnum[]
  }

  /**
   * statusMaquinasPendentesLab create
   */
  export type statusMaquinasPendentesLabCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
    /**
     * The data needed to create a statusMaquinasPendentesLab.
     */
    data: XOR<statusMaquinasPendentesLabCreateInput, statusMaquinasPendentesLabUncheckedCreateInput>
  }

  /**
   * statusMaquinasPendentesLab createMany
   */
  export type statusMaquinasPendentesLabCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many statusMaquinasPendentesLabs.
     */
    data: statusMaquinasPendentesLabCreateManyInput | statusMaquinasPendentesLabCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusMaquinasPendentesLab createManyAndReturn
   */
  export type statusMaquinasPendentesLabCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * The data used to create many statusMaquinasPendentesLabs.
     */
    data: statusMaquinasPendentesLabCreateManyInput | statusMaquinasPendentesLabCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusMaquinasPendentesLab update
   */
  export type statusMaquinasPendentesLabUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
    /**
     * The data needed to update a statusMaquinasPendentesLab.
     */
    data: XOR<statusMaquinasPendentesLabUpdateInput, statusMaquinasPendentesLabUncheckedUpdateInput>
    /**
     * Choose, which statusMaquinasPendentesLab to update.
     */
    where: statusMaquinasPendentesLabWhereUniqueInput
  }

  /**
   * statusMaquinasPendentesLab updateMany
   */
  export type statusMaquinasPendentesLabUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update statusMaquinasPendentesLabs.
     */
    data: XOR<statusMaquinasPendentesLabUpdateManyMutationInput, statusMaquinasPendentesLabUncheckedUpdateManyInput>
    /**
     * Filter which statusMaquinasPendentesLabs to update
     */
    where?: statusMaquinasPendentesLabWhereInput
    /**
     * Limit how many statusMaquinasPendentesLabs to update.
     */
    limit?: number
  }

  /**
   * statusMaquinasPendentesLab updateManyAndReturn
   */
  export type statusMaquinasPendentesLabUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * The data used to update statusMaquinasPendentesLabs.
     */
    data: XOR<statusMaquinasPendentesLabUpdateManyMutationInput, statusMaquinasPendentesLabUncheckedUpdateManyInput>
    /**
     * Filter which statusMaquinasPendentesLabs to update
     */
    where?: statusMaquinasPendentesLabWhereInput
    /**
     * Limit how many statusMaquinasPendentesLabs to update.
     */
    limit?: number
  }

  /**
   * statusMaquinasPendentesLab upsert
   */
  export type statusMaquinasPendentesLabUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
    /**
     * The filter to search for the statusMaquinasPendentesLab to update in case it exists.
     */
    where: statusMaquinasPendentesLabWhereUniqueInput
    /**
     * In case the statusMaquinasPendentesLab found by the `where` argument doesn't exist, create a new statusMaquinasPendentesLab with this data.
     */
    create: XOR<statusMaquinasPendentesLabCreateInput, statusMaquinasPendentesLabUncheckedCreateInput>
    /**
     * In case the statusMaquinasPendentesLab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusMaquinasPendentesLabUpdateInput, statusMaquinasPendentesLabUncheckedUpdateInput>
  }

  /**
   * statusMaquinasPendentesLab delete
   */
  export type statusMaquinasPendentesLabDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
    /**
     * Filter which statusMaquinasPendentesLab to delete.
     */
    where: statusMaquinasPendentesLabWhereUniqueInput
  }

  /**
   * statusMaquinasPendentesLab deleteMany
   */
  export type statusMaquinasPendentesLabDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusMaquinasPendentesLabs to delete
     */
    where?: statusMaquinasPendentesLabWhereInput
    /**
     * Limit how many statusMaquinasPendentesLabs to delete.
     */
    limit?: number
  }

  /**
   * statusMaquinasPendentesLab.controlesDeMaquinasPendentesLaboratorio
   */
  export type statusMaquinasPendentesLab$controlesDeMaquinasPendentesLaboratorioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controleDeMaquinasPendentesLaboratorio
     */
    select?: controleDeMaquinasPendentesLaboratorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controleDeMaquinasPendentesLaboratorio
     */
    omit?: controleDeMaquinasPendentesLaboratorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controleDeMaquinasPendentesLaboratorioInclude<ExtArgs> | null
    where?: controleDeMaquinasPendentesLaboratorioWhereInput
    orderBy?: controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput | controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput[]
    cursor?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControleDeMaquinasPendentesLaboratorioScalarFieldEnum | ControleDeMaquinasPendentesLaboratorioScalarFieldEnum[]
  }

  /**
   * statusMaquinasPendentesLab without action
   */
  export type statusMaquinasPendentesLabDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesLab
     */
    select?: statusMaquinasPendentesLabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesLab
     */
    omit?: statusMaquinasPendentesLabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesLabInclude<ExtArgs> | null
  }


  /**
   * Model controledeMaquinasPendentesOro
   */

  export type AggregateControledeMaquinasPendentesOro = {
    _count: ControledeMaquinasPendentesOroCountAggregateOutputType | null
    _min: ControledeMaquinasPendentesOroMinAggregateOutputType | null
    _max: ControledeMaquinasPendentesOroMaxAggregateOutputType | null
  }

  export type ControledeMaquinasPendentesOroMinAggregateOutputType = {
    id: string | null
    datadaInstalacao: Date | null
    osInstalacao: string | null
    osRetirada: string | null
    create_at: Date | null
    updated_at: Date | null
    equipamento_id: string | null
    instituicaoUnidade_id: string | null
    statusMaquinasPendentesOro_id: string | null
  }

  export type ControledeMaquinasPendentesOroMaxAggregateOutputType = {
    id: string | null
    datadaInstalacao: Date | null
    osInstalacao: string | null
    osRetirada: string | null
    create_at: Date | null
    updated_at: Date | null
    equipamento_id: string | null
    instituicaoUnidade_id: string | null
    statusMaquinasPendentesOro_id: string | null
  }

  export type ControledeMaquinasPendentesOroCountAggregateOutputType = {
    id: number
    datadaInstalacao: number
    osInstalacao: number
    osRetirada: number
    create_at: number
    updated_at: number
    equipamento_id: number
    instituicaoUnidade_id: number
    statusMaquinasPendentesOro_id: number
    _all: number
  }


  export type ControledeMaquinasPendentesOroMinAggregateInputType = {
    id?: true
    datadaInstalacao?: true
    osInstalacao?: true
    osRetirada?: true
    create_at?: true
    updated_at?: true
    equipamento_id?: true
    instituicaoUnidade_id?: true
    statusMaquinasPendentesOro_id?: true
  }

  export type ControledeMaquinasPendentesOroMaxAggregateInputType = {
    id?: true
    datadaInstalacao?: true
    osInstalacao?: true
    osRetirada?: true
    create_at?: true
    updated_at?: true
    equipamento_id?: true
    instituicaoUnidade_id?: true
    statusMaquinasPendentesOro_id?: true
  }

  export type ControledeMaquinasPendentesOroCountAggregateInputType = {
    id?: true
    datadaInstalacao?: true
    osInstalacao?: true
    osRetirada?: true
    create_at?: true
    updated_at?: true
    equipamento_id?: true
    instituicaoUnidade_id?: true
    statusMaquinasPendentesOro_id?: true
    _all?: true
  }

  export type ControledeMaquinasPendentesOroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controledeMaquinasPendentesOro to aggregate.
     */
    where?: controledeMaquinasPendentesOroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controledeMaquinasPendentesOros to fetch.
     */
    orderBy?: controledeMaquinasPendentesOroOrderByWithRelationInput | controledeMaquinasPendentesOroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: controledeMaquinasPendentesOroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controledeMaquinasPendentesOros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controledeMaquinasPendentesOros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned controledeMaquinasPendentesOros
    **/
    _count?: true | ControledeMaquinasPendentesOroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControledeMaquinasPendentesOroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControledeMaquinasPendentesOroMaxAggregateInputType
  }

  export type GetControledeMaquinasPendentesOroAggregateType<T extends ControledeMaquinasPendentesOroAggregateArgs> = {
        [P in keyof T & keyof AggregateControledeMaquinasPendentesOro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControledeMaquinasPendentesOro[P]>
      : GetScalarType<T[P], AggregateControledeMaquinasPendentesOro[P]>
  }




  export type controledeMaquinasPendentesOroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controledeMaquinasPendentesOroWhereInput
    orderBy?: controledeMaquinasPendentesOroOrderByWithAggregationInput | controledeMaquinasPendentesOroOrderByWithAggregationInput[]
    by: ControledeMaquinasPendentesOroScalarFieldEnum[] | ControledeMaquinasPendentesOroScalarFieldEnum
    having?: controledeMaquinasPendentesOroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControledeMaquinasPendentesOroCountAggregateInputType | true
    _min?: ControledeMaquinasPendentesOroMinAggregateInputType
    _max?: ControledeMaquinasPendentesOroMaxAggregateInputType
  }

  export type ControledeMaquinasPendentesOroGroupByOutputType = {
    id: string
    datadaInstalacao: Date
    osInstalacao: string
    osRetirada: string
    create_at: Date | null
    updated_at: Date | null
    equipamento_id: string
    instituicaoUnidade_id: string
    statusMaquinasPendentesOro_id: string
    _count: ControledeMaquinasPendentesOroCountAggregateOutputType | null
    _min: ControledeMaquinasPendentesOroMinAggregateOutputType | null
    _max: ControledeMaquinasPendentesOroMaxAggregateOutputType | null
  }

  type GetControledeMaquinasPendentesOroGroupByPayload<T extends controledeMaquinasPendentesOroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControledeMaquinasPendentesOroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControledeMaquinasPendentesOroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControledeMaquinasPendentesOroGroupByOutputType[P]>
            : GetScalarType<T[P], ControledeMaquinasPendentesOroGroupByOutputType[P]>
        }
      >
    >


  export type controledeMaquinasPendentesOroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    datadaInstalacao?: boolean
    osInstalacao?: boolean
    osRetirada?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento_id?: boolean
    instituicaoUnidade_id?: boolean
    statusMaquinasPendentesOro_id?: boolean
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    statusMaquinasPendentesOro?: boolean | statusMaquinasPendentesOroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controledeMaquinasPendentesOro"]>

  export type controledeMaquinasPendentesOroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    datadaInstalacao?: boolean
    osInstalacao?: boolean
    osRetirada?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento_id?: boolean
    instituicaoUnidade_id?: boolean
    statusMaquinasPendentesOro_id?: boolean
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    statusMaquinasPendentesOro?: boolean | statusMaquinasPendentesOroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controledeMaquinasPendentesOro"]>

  export type controledeMaquinasPendentesOroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    datadaInstalacao?: boolean
    osInstalacao?: boolean
    osRetirada?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento_id?: boolean
    instituicaoUnidade_id?: boolean
    statusMaquinasPendentesOro_id?: boolean
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    statusMaquinasPendentesOro?: boolean | statusMaquinasPendentesOroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controledeMaquinasPendentesOro"]>

  export type controledeMaquinasPendentesOroSelectScalar = {
    id?: boolean
    datadaInstalacao?: boolean
    osInstalacao?: boolean
    osRetirada?: boolean
    create_at?: boolean
    updated_at?: boolean
    equipamento_id?: boolean
    instituicaoUnidade_id?: boolean
    statusMaquinasPendentesOro_id?: boolean
  }

  export type controledeMaquinasPendentesOroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "datadaInstalacao" | "osInstalacao" | "osRetirada" | "create_at" | "updated_at" | "equipamento_id" | "instituicaoUnidade_id" | "statusMaquinasPendentesOro_id", ExtArgs["result"]["controledeMaquinasPendentesOro"]>
  export type controledeMaquinasPendentesOroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    statusMaquinasPendentesOro?: boolean | statusMaquinasPendentesOroDefaultArgs<ExtArgs>
  }
  export type controledeMaquinasPendentesOroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    statusMaquinasPendentesOro?: boolean | statusMaquinasPendentesOroDefaultArgs<ExtArgs>
  }
  export type controledeMaquinasPendentesOroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipamento?: boolean | EquipamentoDefaultArgs<ExtArgs>
    instituicaoUnidade?: boolean | InstituicaoUnidadeDefaultArgs<ExtArgs>
    statusMaquinasPendentesOro?: boolean | statusMaquinasPendentesOroDefaultArgs<ExtArgs>
  }

  export type $controledeMaquinasPendentesOroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "controledeMaquinasPendentesOro"
    objects: {
      equipamento: Prisma.$EquipamentoPayload<ExtArgs>
      instituicaoUnidade: Prisma.$InstituicaoUnidadePayload<ExtArgs>
      statusMaquinasPendentesOro: Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      datadaInstalacao: Date
      osInstalacao: string
      osRetirada: string
      create_at: Date | null
      updated_at: Date | null
      equipamento_id: string
      instituicaoUnidade_id: string
      statusMaquinasPendentesOro_id: string
    }, ExtArgs["result"]["controledeMaquinasPendentesOro"]>
    composites: {}
  }

  type controledeMaquinasPendentesOroGetPayload<S extends boolean | null | undefined | controledeMaquinasPendentesOroDefaultArgs> = $Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload, S>

  type controledeMaquinasPendentesOroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<controledeMaquinasPendentesOroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ControledeMaquinasPendentesOroCountAggregateInputType | true
    }

  export interface controledeMaquinasPendentesOroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['controledeMaquinasPendentesOro'], meta: { name: 'controledeMaquinasPendentesOro' } }
    /**
     * Find zero or one ControledeMaquinasPendentesOro that matches the filter.
     * @param {controledeMaquinasPendentesOroFindUniqueArgs} args - Arguments to find a ControledeMaquinasPendentesOro
     * @example
     * // Get one ControledeMaquinasPendentesOro
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends controledeMaquinasPendentesOroFindUniqueArgs>(args: SelectSubset<T, controledeMaquinasPendentesOroFindUniqueArgs<ExtArgs>>): Prisma__controledeMaquinasPendentesOroClient<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ControledeMaquinasPendentesOro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {controledeMaquinasPendentesOroFindUniqueOrThrowArgs} args - Arguments to find a ControledeMaquinasPendentesOro
     * @example
     * // Get one ControledeMaquinasPendentesOro
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends controledeMaquinasPendentesOroFindUniqueOrThrowArgs>(args: SelectSubset<T, controledeMaquinasPendentesOroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__controledeMaquinasPendentesOroClient<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControledeMaquinasPendentesOro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controledeMaquinasPendentesOroFindFirstArgs} args - Arguments to find a ControledeMaquinasPendentesOro
     * @example
     * // Get one ControledeMaquinasPendentesOro
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends controledeMaquinasPendentesOroFindFirstArgs>(args?: SelectSubset<T, controledeMaquinasPendentesOroFindFirstArgs<ExtArgs>>): Prisma__controledeMaquinasPendentesOroClient<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ControledeMaquinasPendentesOro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controledeMaquinasPendentesOroFindFirstOrThrowArgs} args - Arguments to find a ControledeMaquinasPendentesOro
     * @example
     * // Get one ControledeMaquinasPendentesOro
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends controledeMaquinasPendentesOroFindFirstOrThrowArgs>(args?: SelectSubset<T, controledeMaquinasPendentesOroFindFirstOrThrowArgs<ExtArgs>>): Prisma__controledeMaquinasPendentesOroClient<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ControledeMaquinasPendentesOros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controledeMaquinasPendentesOroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ControledeMaquinasPendentesOros
     * const controledeMaquinasPendentesOros = await prisma.controledeMaquinasPendentesOro.findMany()
     * 
     * // Get first 10 ControledeMaquinasPendentesOros
     * const controledeMaquinasPendentesOros = await prisma.controledeMaquinasPendentesOro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controledeMaquinasPendentesOroWithIdOnly = await prisma.controledeMaquinasPendentesOro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends controledeMaquinasPendentesOroFindManyArgs>(args?: SelectSubset<T, controledeMaquinasPendentesOroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ControledeMaquinasPendentesOro.
     * @param {controledeMaquinasPendentesOroCreateArgs} args - Arguments to create a ControledeMaquinasPendentesOro.
     * @example
     * // Create one ControledeMaquinasPendentesOro
     * const ControledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.create({
     *   data: {
     *     // ... data to create a ControledeMaquinasPendentesOro
     *   }
     * })
     * 
     */
    create<T extends controledeMaquinasPendentesOroCreateArgs>(args: SelectSubset<T, controledeMaquinasPendentesOroCreateArgs<ExtArgs>>): Prisma__controledeMaquinasPendentesOroClient<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ControledeMaquinasPendentesOros.
     * @param {controledeMaquinasPendentesOroCreateManyArgs} args - Arguments to create many ControledeMaquinasPendentesOros.
     * @example
     * // Create many ControledeMaquinasPendentesOros
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends controledeMaquinasPendentesOroCreateManyArgs>(args?: SelectSubset<T, controledeMaquinasPendentesOroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ControledeMaquinasPendentesOros and returns the data saved in the database.
     * @param {controledeMaquinasPendentesOroCreateManyAndReturnArgs} args - Arguments to create many ControledeMaquinasPendentesOros.
     * @example
     * // Create many ControledeMaquinasPendentesOros
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ControledeMaquinasPendentesOros and only return the `id`
     * const controledeMaquinasPendentesOroWithIdOnly = await prisma.controledeMaquinasPendentesOro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends controledeMaquinasPendentesOroCreateManyAndReturnArgs>(args?: SelectSubset<T, controledeMaquinasPendentesOroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ControledeMaquinasPendentesOro.
     * @param {controledeMaquinasPendentesOroDeleteArgs} args - Arguments to delete one ControledeMaquinasPendentesOro.
     * @example
     * // Delete one ControledeMaquinasPendentesOro
     * const ControledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.delete({
     *   where: {
     *     // ... filter to delete one ControledeMaquinasPendentesOro
     *   }
     * })
     * 
     */
    delete<T extends controledeMaquinasPendentesOroDeleteArgs>(args: SelectSubset<T, controledeMaquinasPendentesOroDeleteArgs<ExtArgs>>): Prisma__controledeMaquinasPendentesOroClient<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ControledeMaquinasPendentesOro.
     * @param {controledeMaquinasPendentesOroUpdateArgs} args - Arguments to update one ControledeMaquinasPendentesOro.
     * @example
     * // Update one ControledeMaquinasPendentesOro
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends controledeMaquinasPendentesOroUpdateArgs>(args: SelectSubset<T, controledeMaquinasPendentesOroUpdateArgs<ExtArgs>>): Prisma__controledeMaquinasPendentesOroClient<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ControledeMaquinasPendentesOros.
     * @param {controledeMaquinasPendentesOroDeleteManyArgs} args - Arguments to filter ControledeMaquinasPendentesOros to delete.
     * @example
     * // Delete a few ControledeMaquinasPendentesOros
     * const { count } = await prisma.controledeMaquinasPendentesOro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends controledeMaquinasPendentesOroDeleteManyArgs>(args?: SelectSubset<T, controledeMaquinasPendentesOroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControledeMaquinasPendentesOros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controledeMaquinasPendentesOroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ControledeMaquinasPendentesOros
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends controledeMaquinasPendentesOroUpdateManyArgs>(args: SelectSubset<T, controledeMaquinasPendentesOroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControledeMaquinasPendentesOros and returns the data updated in the database.
     * @param {controledeMaquinasPendentesOroUpdateManyAndReturnArgs} args - Arguments to update many ControledeMaquinasPendentesOros.
     * @example
     * // Update many ControledeMaquinasPendentesOros
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ControledeMaquinasPendentesOros and only return the `id`
     * const controledeMaquinasPendentesOroWithIdOnly = await prisma.controledeMaquinasPendentesOro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends controledeMaquinasPendentesOroUpdateManyAndReturnArgs>(args: SelectSubset<T, controledeMaquinasPendentesOroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ControledeMaquinasPendentesOro.
     * @param {controledeMaquinasPendentesOroUpsertArgs} args - Arguments to update or create a ControledeMaquinasPendentesOro.
     * @example
     * // Update or create a ControledeMaquinasPendentesOro
     * const controledeMaquinasPendentesOro = await prisma.controledeMaquinasPendentesOro.upsert({
     *   create: {
     *     // ... data to create a ControledeMaquinasPendentesOro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ControledeMaquinasPendentesOro we want to update
     *   }
     * })
     */
    upsert<T extends controledeMaquinasPendentesOroUpsertArgs>(args: SelectSubset<T, controledeMaquinasPendentesOroUpsertArgs<ExtArgs>>): Prisma__controledeMaquinasPendentesOroClient<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ControledeMaquinasPendentesOros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controledeMaquinasPendentesOroCountArgs} args - Arguments to filter ControledeMaquinasPendentesOros to count.
     * @example
     * // Count the number of ControledeMaquinasPendentesOros
     * const count = await prisma.controledeMaquinasPendentesOro.count({
     *   where: {
     *     // ... the filter for the ControledeMaquinasPendentesOros we want to count
     *   }
     * })
    **/
    count<T extends controledeMaquinasPendentesOroCountArgs>(
      args?: Subset<T, controledeMaquinasPendentesOroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControledeMaquinasPendentesOroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ControledeMaquinasPendentesOro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControledeMaquinasPendentesOroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControledeMaquinasPendentesOroAggregateArgs>(args: Subset<T, ControledeMaquinasPendentesOroAggregateArgs>): Prisma.PrismaPromise<GetControledeMaquinasPendentesOroAggregateType<T>>

    /**
     * Group by ControledeMaquinasPendentesOro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controledeMaquinasPendentesOroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends controledeMaquinasPendentesOroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: controledeMaquinasPendentesOroGroupByArgs['orderBy'] }
        : { orderBy?: controledeMaquinasPendentesOroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, controledeMaquinasPendentesOroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControledeMaquinasPendentesOroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the controledeMaquinasPendentesOro model
   */
  readonly fields: controledeMaquinasPendentesOroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for controledeMaquinasPendentesOro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__controledeMaquinasPendentesOroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipamento<T extends EquipamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipamentoDefaultArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instituicaoUnidade<T extends InstituicaoUnidadeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstituicaoUnidadeDefaultArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    statusMaquinasPendentesOro<T extends statusMaquinasPendentesOroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, statusMaquinasPendentesOroDefaultArgs<ExtArgs>>): Prisma__statusMaquinasPendentesOroClient<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the controledeMaquinasPendentesOro model
   */
  interface controledeMaquinasPendentesOroFieldRefs {
    readonly id: FieldRef<"controledeMaquinasPendentesOro", 'String'>
    readonly datadaInstalacao: FieldRef<"controledeMaquinasPendentesOro", 'DateTime'>
    readonly osInstalacao: FieldRef<"controledeMaquinasPendentesOro", 'String'>
    readonly osRetirada: FieldRef<"controledeMaquinasPendentesOro", 'String'>
    readonly create_at: FieldRef<"controledeMaquinasPendentesOro", 'DateTime'>
    readonly updated_at: FieldRef<"controledeMaquinasPendentesOro", 'DateTime'>
    readonly equipamento_id: FieldRef<"controledeMaquinasPendentesOro", 'String'>
    readonly instituicaoUnidade_id: FieldRef<"controledeMaquinasPendentesOro", 'String'>
    readonly statusMaquinasPendentesOro_id: FieldRef<"controledeMaquinasPendentesOro", 'String'>
  }
    

  // Custom InputTypes
  /**
   * controledeMaquinasPendentesOro findUnique
   */
  export type controledeMaquinasPendentesOroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which controledeMaquinasPendentesOro to fetch.
     */
    where: controledeMaquinasPendentesOroWhereUniqueInput
  }

  /**
   * controledeMaquinasPendentesOro findUniqueOrThrow
   */
  export type controledeMaquinasPendentesOroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which controledeMaquinasPendentesOro to fetch.
     */
    where: controledeMaquinasPendentesOroWhereUniqueInput
  }

  /**
   * controledeMaquinasPendentesOro findFirst
   */
  export type controledeMaquinasPendentesOroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which controledeMaquinasPendentesOro to fetch.
     */
    where?: controledeMaquinasPendentesOroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controledeMaquinasPendentesOros to fetch.
     */
    orderBy?: controledeMaquinasPendentesOroOrderByWithRelationInput | controledeMaquinasPendentesOroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controledeMaquinasPendentesOros.
     */
    cursor?: controledeMaquinasPendentesOroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controledeMaquinasPendentesOros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controledeMaquinasPendentesOros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controledeMaquinasPendentesOros.
     */
    distinct?: ControledeMaquinasPendentesOroScalarFieldEnum | ControledeMaquinasPendentesOroScalarFieldEnum[]
  }

  /**
   * controledeMaquinasPendentesOro findFirstOrThrow
   */
  export type controledeMaquinasPendentesOroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which controledeMaquinasPendentesOro to fetch.
     */
    where?: controledeMaquinasPendentesOroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controledeMaquinasPendentesOros to fetch.
     */
    orderBy?: controledeMaquinasPendentesOroOrderByWithRelationInput | controledeMaquinasPendentesOroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controledeMaquinasPendentesOros.
     */
    cursor?: controledeMaquinasPendentesOroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controledeMaquinasPendentesOros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controledeMaquinasPendentesOros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controledeMaquinasPendentesOros.
     */
    distinct?: ControledeMaquinasPendentesOroScalarFieldEnum | ControledeMaquinasPendentesOroScalarFieldEnum[]
  }

  /**
   * controledeMaquinasPendentesOro findMany
   */
  export type controledeMaquinasPendentesOroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which controledeMaquinasPendentesOros to fetch.
     */
    where?: controledeMaquinasPendentesOroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controledeMaquinasPendentesOros to fetch.
     */
    orderBy?: controledeMaquinasPendentesOroOrderByWithRelationInput | controledeMaquinasPendentesOroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing controledeMaquinasPendentesOros.
     */
    cursor?: controledeMaquinasPendentesOroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controledeMaquinasPendentesOros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controledeMaquinasPendentesOros.
     */
    skip?: number
    distinct?: ControledeMaquinasPendentesOroScalarFieldEnum | ControledeMaquinasPendentesOroScalarFieldEnum[]
  }

  /**
   * controledeMaquinasPendentesOro create
   */
  export type controledeMaquinasPendentesOroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * The data needed to create a controledeMaquinasPendentesOro.
     */
    data: XOR<controledeMaquinasPendentesOroCreateInput, controledeMaquinasPendentesOroUncheckedCreateInput>
  }

  /**
   * controledeMaquinasPendentesOro createMany
   */
  export type controledeMaquinasPendentesOroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many controledeMaquinasPendentesOros.
     */
    data: controledeMaquinasPendentesOroCreateManyInput | controledeMaquinasPendentesOroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * controledeMaquinasPendentesOro createManyAndReturn
   */
  export type controledeMaquinasPendentesOroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * The data used to create many controledeMaquinasPendentesOros.
     */
    data: controledeMaquinasPendentesOroCreateManyInput | controledeMaquinasPendentesOroCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * controledeMaquinasPendentesOro update
   */
  export type controledeMaquinasPendentesOroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * The data needed to update a controledeMaquinasPendentesOro.
     */
    data: XOR<controledeMaquinasPendentesOroUpdateInput, controledeMaquinasPendentesOroUncheckedUpdateInput>
    /**
     * Choose, which controledeMaquinasPendentesOro to update.
     */
    where: controledeMaquinasPendentesOroWhereUniqueInput
  }

  /**
   * controledeMaquinasPendentesOro updateMany
   */
  export type controledeMaquinasPendentesOroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update controledeMaquinasPendentesOros.
     */
    data: XOR<controledeMaquinasPendentesOroUpdateManyMutationInput, controledeMaquinasPendentesOroUncheckedUpdateManyInput>
    /**
     * Filter which controledeMaquinasPendentesOros to update
     */
    where?: controledeMaquinasPendentesOroWhereInput
    /**
     * Limit how many controledeMaquinasPendentesOros to update.
     */
    limit?: number
  }

  /**
   * controledeMaquinasPendentesOro updateManyAndReturn
   */
  export type controledeMaquinasPendentesOroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * The data used to update controledeMaquinasPendentesOros.
     */
    data: XOR<controledeMaquinasPendentesOroUpdateManyMutationInput, controledeMaquinasPendentesOroUncheckedUpdateManyInput>
    /**
     * Filter which controledeMaquinasPendentesOros to update
     */
    where?: controledeMaquinasPendentesOroWhereInput
    /**
     * Limit how many controledeMaquinasPendentesOros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * controledeMaquinasPendentesOro upsert
   */
  export type controledeMaquinasPendentesOroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * The filter to search for the controledeMaquinasPendentesOro to update in case it exists.
     */
    where: controledeMaquinasPendentesOroWhereUniqueInput
    /**
     * In case the controledeMaquinasPendentesOro found by the `where` argument doesn't exist, create a new controledeMaquinasPendentesOro with this data.
     */
    create: XOR<controledeMaquinasPendentesOroCreateInput, controledeMaquinasPendentesOroUncheckedCreateInput>
    /**
     * In case the controledeMaquinasPendentesOro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<controledeMaquinasPendentesOroUpdateInput, controledeMaquinasPendentesOroUncheckedUpdateInput>
  }

  /**
   * controledeMaquinasPendentesOro delete
   */
  export type controledeMaquinasPendentesOroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter which controledeMaquinasPendentesOro to delete.
     */
    where: controledeMaquinasPendentesOroWhereUniqueInput
  }

  /**
   * controledeMaquinasPendentesOro deleteMany
   */
  export type controledeMaquinasPendentesOroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controledeMaquinasPendentesOros to delete
     */
    where?: controledeMaquinasPendentesOroWhereInput
    /**
     * Limit how many controledeMaquinasPendentesOros to delete.
     */
    limit?: number
  }

  /**
   * controledeMaquinasPendentesOro without action
   */
  export type controledeMaquinasPendentesOroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
  }


  /**
   * Model statusMaquinasPendentesOro
   */

  export type AggregateStatusMaquinasPendentesOro = {
    _count: StatusMaquinasPendentesOroCountAggregateOutputType | null
    _min: StatusMaquinasPendentesOroMinAggregateOutputType | null
    _max: StatusMaquinasPendentesOroMaxAggregateOutputType | null
  }

  export type StatusMaquinasPendentesOroMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusMaquinasPendentesOroMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusMaquinasPendentesOroCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type StatusMaquinasPendentesOroMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusMaquinasPendentesOroMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusMaquinasPendentesOroCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type StatusMaquinasPendentesOroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusMaquinasPendentesOro to aggregate.
     */
    where?: statusMaquinasPendentesOroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusMaquinasPendentesOros to fetch.
     */
    orderBy?: statusMaquinasPendentesOroOrderByWithRelationInput | statusMaquinasPendentesOroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusMaquinasPendentesOroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusMaquinasPendentesOros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusMaquinasPendentesOros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statusMaquinasPendentesOros
    **/
    _count?: true | StatusMaquinasPendentesOroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMaquinasPendentesOroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaquinasPendentesOroMaxAggregateInputType
  }

  export type GetStatusMaquinasPendentesOroAggregateType<T extends StatusMaquinasPendentesOroAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusMaquinasPendentesOro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusMaquinasPendentesOro[P]>
      : GetScalarType<T[P], AggregateStatusMaquinasPendentesOro[P]>
  }




  export type statusMaquinasPendentesOroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: statusMaquinasPendentesOroWhereInput
    orderBy?: statusMaquinasPendentesOroOrderByWithAggregationInput | statusMaquinasPendentesOroOrderByWithAggregationInput[]
    by: StatusMaquinasPendentesOroScalarFieldEnum[] | StatusMaquinasPendentesOroScalarFieldEnum
    having?: statusMaquinasPendentesOroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusMaquinasPendentesOroCountAggregateInputType | true
    _min?: StatusMaquinasPendentesOroMinAggregateInputType
    _max?: StatusMaquinasPendentesOroMaxAggregateInputType
  }

  export type StatusMaquinasPendentesOroGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: StatusMaquinasPendentesOroCountAggregateOutputType | null
    _min: StatusMaquinasPendentesOroMinAggregateOutputType | null
    _max: StatusMaquinasPendentesOroMaxAggregateOutputType | null
  }

  type GetStatusMaquinasPendentesOroGroupByPayload<T extends statusMaquinasPendentesOroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusMaquinasPendentesOroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusMaquinasPendentesOroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusMaquinasPendentesOroGroupByOutputType[P]>
            : GetScalarType<T[P], StatusMaquinasPendentesOroGroupByOutputType[P]>
        }
      >
    >


  export type statusMaquinasPendentesOroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    controlesDeMaquinasPendentesOro?: boolean | statusMaquinasPendentesOro$controlesDeMaquinasPendentesOroArgs<ExtArgs>
    _count?: boolean | StatusMaquinasPendentesOroCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusMaquinasPendentesOro"]>

  export type statusMaquinasPendentesOroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusMaquinasPendentesOro"]>

  export type statusMaquinasPendentesOroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusMaquinasPendentesOro"]>

  export type statusMaquinasPendentesOroSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type statusMaquinasPendentesOroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["statusMaquinasPendentesOro"]>
  export type statusMaquinasPendentesOroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controlesDeMaquinasPendentesOro?: boolean | statusMaquinasPendentesOro$controlesDeMaquinasPendentesOroArgs<ExtArgs>
    _count?: boolean | StatusMaquinasPendentesOroCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type statusMaquinasPendentesOroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type statusMaquinasPendentesOroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $statusMaquinasPendentesOroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "statusMaquinasPendentesOro"
    objects: {
      controlesDeMaquinasPendentesOro: Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["statusMaquinasPendentesOro"]>
    composites: {}
  }

  type statusMaquinasPendentesOroGetPayload<S extends boolean | null | undefined | statusMaquinasPendentesOroDefaultArgs> = $Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload, S>

  type statusMaquinasPendentesOroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<statusMaquinasPendentesOroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusMaquinasPendentesOroCountAggregateInputType | true
    }

  export interface statusMaquinasPendentesOroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['statusMaquinasPendentesOro'], meta: { name: 'statusMaquinasPendentesOro' } }
    /**
     * Find zero or one StatusMaquinasPendentesOro that matches the filter.
     * @param {statusMaquinasPendentesOroFindUniqueArgs} args - Arguments to find a StatusMaquinasPendentesOro
     * @example
     * // Get one StatusMaquinasPendentesOro
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends statusMaquinasPendentesOroFindUniqueArgs>(args: SelectSubset<T, statusMaquinasPendentesOroFindUniqueArgs<ExtArgs>>): Prisma__statusMaquinasPendentesOroClient<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusMaquinasPendentesOro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {statusMaquinasPendentesOroFindUniqueOrThrowArgs} args - Arguments to find a StatusMaquinasPendentesOro
     * @example
     * // Get one StatusMaquinasPendentesOro
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends statusMaquinasPendentesOroFindUniqueOrThrowArgs>(args: SelectSubset<T, statusMaquinasPendentesOroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__statusMaquinasPendentesOroClient<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusMaquinasPendentesOro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesOroFindFirstArgs} args - Arguments to find a StatusMaquinasPendentesOro
     * @example
     * // Get one StatusMaquinasPendentesOro
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends statusMaquinasPendentesOroFindFirstArgs>(args?: SelectSubset<T, statusMaquinasPendentesOroFindFirstArgs<ExtArgs>>): Prisma__statusMaquinasPendentesOroClient<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusMaquinasPendentesOro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesOroFindFirstOrThrowArgs} args - Arguments to find a StatusMaquinasPendentesOro
     * @example
     * // Get one StatusMaquinasPendentesOro
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends statusMaquinasPendentesOroFindFirstOrThrowArgs>(args?: SelectSubset<T, statusMaquinasPendentesOroFindFirstOrThrowArgs<ExtArgs>>): Prisma__statusMaquinasPendentesOroClient<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusMaquinasPendentesOros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesOroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusMaquinasPendentesOros
     * const statusMaquinasPendentesOros = await prisma.statusMaquinasPendentesOro.findMany()
     * 
     * // Get first 10 StatusMaquinasPendentesOros
     * const statusMaquinasPendentesOros = await prisma.statusMaquinasPendentesOro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusMaquinasPendentesOroWithIdOnly = await prisma.statusMaquinasPendentesOro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends statusMaquinasPendentesOroFindManyArgs>(args?: SelectSubset<T, statusMaquinasPendentesOroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusMaquinasPendentesOro.
     * @param {statusMaquinasPendentesOroCreateArgs} args - Arguments to create a StatusMaquinasPendentesOro.
     * @example
     * // Create one StatusMaquinasPendentesOro
     * const StatusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.create({
     *   data: {
     *     // ... data to create a StatusMaquinasPendentesOro
     *   }
     * })
     * 
     */
    create<T extends statusMaquinasPendentesOroCreateArgs>(args: SelectSubset<T, statusMaquinasPendentesOroCreateArgs<ExtArgs>>): Prisma__statusMaquinasPendentesOroClient<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusMaquinasPendentesOros.
     * @param {statusMaquinasPendentesOroCreateManyArgs} args - Arguments to create many StatusMaquinasPendentesOros.
     * @example
     * // Create many StatusMaquinasPendentesOros
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends statusMaquinasPendentesOroCreateManyArgs>(args?: SelectSubset<T, statusMaquinasPendentesOroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusMaquinasPendentesOros and returns the data saved in the database.
     * @param {statusMaquinasPendentesOroCreateManyAndReturnArgs} args - Arguments to create many StatusMaquinasPendentesOros.
     * @example
     * // Create many StatusMaquinasPendentesOros
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusMaquinasPendentesOros and only return the `id`
     * const statusMaquinasPendentesOroWithIdOnly = await prisma.statusMaquinasPendentesOro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends statusMaquinasPendentesOroCreateManyAndReturnArgs>(args?: SelectSubset<T, statusMaquinasPendentesOroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusMaquinasPendentesOro.
     * @param {statusMaquinasPendentesOroDeleteArgs} args - Arguments to delete one StatusMaquinasPendentesOro.
     * @example
     * // Delete one StatusMaquinasPendentesOro
     * const StatusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.delete({
     *   where: {
     *     // ... filter to delete one StatusMaquinasPendentesOro
     *   }
     * })
     * 
     */
    delete<T extends statusMaquinasPendentesOroDeleteArgs>(args: SelectSubset<T, statusMaquinasPendentesOroDeleteArgs<ExtArgs>>): Prisma__statusMaquinasPendentesOroClient<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusMaquinasPendentesOro.
     * @param {statusMaquinasPendentesOroUpdateArgs} args - Arguments to update one StatusMaquinasPendentesOro.
     * @example
     * // Update one StatusMaquinasPendentesOro
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends statusMaquinasPendentesOroUpdateArgs>(args: SelectSubset<T, statusMaquinasPendentesOroUpdateArgs<ExtArgs>>): Prisma__statusMaquinasPendentesOroClient<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusMaquinasPendentesOros.
     * @param {statusMaquinasPendentesOroDeleteManyArgs} args - Arguments to filter StatusMaquinasPendentesOros to delete.
     * @example
     * // Delete a few StatusMaquinasPendentesOros
     * const { count } = await prisma.statusMaquinasPendentesOro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends statusMaquinasPendentesOroDeleteManyArgs>(args?: SelectSubset<T, statusMaquinasPendentesOroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusMaquinasPendentesOros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesOroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusMaquinasPendentesOros
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends statusMaquinasPendentesOroUpdateManyArgs>(args: SelectSubset<T, statusMaquinasPendentesOroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusMaquinasPendentesOros and returns the data updated in the database.
     * @param {statusMaquinasPendentesOroUpdateManyAndReturnArgs} args - Arguments to update many StatusMaquinasPendentesOros.
     * @example
     * // Update many StatusMaquinasPendentesOros
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusMaquinasPendentesOros and only return the `id`
     * const statusMaquinasPendentesOroWithIdOnly = await prisma.statusMaquinasPendentesOro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends statusMaquinasPendentesOroUpdateManyAndReturnArgs>(args: SelectSubset<T, statusMaquinasPendentesOroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusMaquinasPendentesOro.
     * @param {statusMaquinasPendentesOroUpsertArgs} args - Arguments to update or create a StatusMaquinasPendentesOro.
     * @example
     * // Update or create a StatusMaquinasPendentesOro
     * const statusMaquinasPendentesOro = await prisma.statusMaquinasPendentesOro.upsert({
     *   create: {
     *     // ... data to create a StatusMaquinasPendentesOro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusMaquinasPendentesOro we want to update
     *   }
     * })
     */
    upsert<T extends statusMaquinasPendentesOroUpsertArgs>(args: SelectSubset<T, statusMaquinasPendentesOroUpsertArgs<ExtArgs>>): Prisma__statusMaquinasPendentesOroClient<$Result.GetResult<Prisma.$statusMaquinasPendentesOroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusMaquinasPendentesOros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesOroCountArgs} args - Arguments to filter StatusMaquinasPendentesOros to count.
     * @example
     * // Count the number of StatusMaquinasPendentesOros
     * const count = await prisma.statusMaquinasPendentesOro.count({
     *   where: {
     *     // ... the filter for the StatusMaquinasPendentesOros we want to count
     *   }
     * })
    **/
    count<T extends statusMaquinasPendentesOroCountArgs>(
      args?: Subset<T, statusMaquinasPendentesOroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusMaquinasPendentesOroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusMaquinasPendentesOro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusMaquinasPendentesOroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusMaquinasPendentesOroAggregateArgs>(args: Subset<T, StatusMaquinasPendentesOroAggregateArgs>): Prisma.PrismaPromise<GetStatusMaquinasPendentesOroAggregateType<T>>

    /**
     * Group by StatusMaquinasPendentesOro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusMaquinasPendentesOroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends statusMaquinasPendentesOroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: statusMaquinasPendentesOroGroupByArgs['orderBy'] }
        : { orderBy?: statusMaquinasPendentesOroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, statusMaquinasPendentesOroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusMaquinasPendentesOroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the statusMaquinasPendentesOro model
   */
  readonly fields: statusMaquinasPendentesOroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for statusMaquinasPendentesOro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__statusMaquinasPendentesOroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    controlesDeMaquinasPendentesOro<T extends statusMaquinasPendentesOro$controlesDeMaquinasPendentesOroArgs<ExtArgs> = {}>(args?: Subset<T, statusMaquinasPendentesOro$controlesDeMaquinasPendentesOroArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controledeMaquinasPendentesOroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the statusMaquinasPendentesOro model
   */
  interface statusMaquinasPendentesOroFieldRefs {
    readonly id: FieldRef<"statusMaquinasPendentesOro", 'String'>
    readonly name: FieldRef<"statusMaquinasPendentesOro", 'String'>
    readonly create_at: FieldRef<"statusMaquinasPendentesOro", 'DateTime'>
    readonly updated_at: FieldRef<"statusMaquinasPendentesOro", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * statusMaquinasPendentesOro findUnique
   */
  export type statusMaquinasPendentesOroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesOro to fetch.
     */
    where: statusMaquinasPendentesOroWhereUniqueInput
  }

  /**
   * statusMaquinasPendentesOro findUniqueOrThrow
   */
  export type statusMaquinasPendentesOroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesOro to fetch.
     */
    where: statusMaquinasPendentesOroWhereUniqueInput
  }

  /**
   * statusMaquinasPendentesOro findFirst
   */
  export type statusMaquinasPendentesOroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesOro to fetch.
     */
    where?: statusMaquinasPendentesOroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusMaquinasPendentesOros to fetch.
     */
    orderBy?: statusMaquinasPendentesOroOrderByWithRelationInput | statusMaquinasPendentesOroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusMaquinasPendentesOros.
     */
    cursor?: statusMaquinasPendentesOroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusMaquinasPendentesOros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusMaquinasPendentesOros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusMaquinasPendentesOros.
     */
    distinct?: StatusMaquinasPendentesOroScalarFieldEnum | StatusMaquinasPendentesOroScalarFieldEnum[]
  }

  /**
   * statusMaquinasPendentesOro findFirstOrThrow
   */
  export type statusMaquinasPendentesOroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesOro to fetch.
     */
    where?: statusMaquinasPendentesOroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusMaquinasPendentesOros to fetch.
     */
    orderBy?: statusMaquinasPendentesOroOrderByWithRelationInput | statusMaquinasPendentesOroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusMaquinasPendentesOros.
     */
    cursor?: statusMaquinasPendentesOroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusMaquinasPendentesOros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusMaquinasPendentesOros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusMaquinasPendentesOros.
     */
    distinct?: StatusMaquinasPendentesOroScalarFieldEnum | StatusMaquinasPendentesOroScalarFieldEnum[]
  }

  /**
   * statusMaquinasPendentesOro findMany
   */
  export type statusMaquinasPendentesOroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter, which statusMaquinasPendentesOros to fetch.
     */
    where?: statusMaquinasPendentesOroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusMaquinasPendentesOros to fetch.
     */
    orderBy?: statusMaquinasPendentesOroOrderByWithRelationInput | statusMaquinasPendentesOroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statusMaquinasPendentesOros.
     */
    cursor?: statusMaquinasPendentesOroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusMaquinasPendentesOros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusMaquinasPendentesOros.
     */
    skip?: number
    distinct?: StatusMaquinasPendentesOroScalarFieldEnum | StatusMaquinasPendentesOroScalarFieldEnum[]
  }

  /**
   * statusMaquinasPendentesOro create
   */
  export type statusMaquinasPendentesOroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * The data needed to create a statusMaquinasPendentesOro.
     */
    data: XOR<statusMaquinasPendentesOroCreateInput, statusMaquinasPendentesOroUncheckedCreateInput>
  }

  /**
   * statusMaquinasPendentesOro createMany
   */
  export type statusMaquinasPendentesOroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many statusMaquinasPendentesOros.
     */
    data: statusMaquinasPendentesOroCreateManyInput | statusMaquinasPendentesOroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusMaquinasPendentesOro createManyAndReturn
   */
  export type statusMaquinasPendentesOroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * The data used to create many statusMaquinasPendentesOros.
     */
    data: statusMaquinasPendentesOroCreateManyInput | statusMaquinasPendentesOroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusMaquinasPendentesOro update
   */
  export type statusMaquinasPendentesOroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * The data needed to update a statusMaquinasPendentesOro.
     */
    data: XOR<statusMaquinasPendentesOroUpdateInput, statusMaquinasPendentesOroUncheckedUpdateInput>
    /**
     * Choose, which statusMaquinasPendentesOro to update.
     */
    where: statusMaquinasPendentesOroWhereUniqueInput
  }

  /**
   * statusMaquinasPendentesOro updateMany
   */
  export type statusMaquinasPendentesOroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update statusMaquinasPendentesOros.
     */
    data: XOR<statusMaquinasPendentesOroUpdateManyMutationInput, statusMaquinasPendentesOroUncheckedUpdateManyInput>
    /**
     * Filter which statusMaquinasPendentesOros to update
     */
    where?: statusMaquinasPendentesOroWhereInput
    /**
     * Limit how many statusMaquinasPendentesOros to update.
     */
    limit?: number
  }

  /**
   * statusMaquinasPendentesOro updateManyAndReturn
   */
  export type statusMaquinasPendentesOroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * The data used to update statusMaquinasPendentesOros.
     */
    data: XOR<statusMaquinasPendentesOroUpdateManyMutationInput, statusMaquinasPendentesOroUncheckedUpdateManyInput>
    /**
     * Filter which statusMaquinasPendentesOros to update
     */
    where?: statusMaquinasPendentesOroWhereInput
    /**
     * Limit how many statusMaquinasPendentesOros to update.
     */
    limit?: number
  }

  /**
   * statusMaquinasPendentesOro upsert
   */
  export type statusMaquinasPendentesOroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * The filter to search for the statusMaquinasPendentesOro to update in case it exists.
     */
    where: statusMaquinasPendentesOroWhereUniqueInput
    /**
     * In case the statusMaquinasPendentesOro found by the `where` argument doesn't exist, create a new statusMaquinasPendentesOro with this data.
     */
    create: XOR<statusMaquinasPendentesOroCreateInput, statusMaquinasPendentesOroUncheckedCreateInput>
    /**
     * In case the statusMaquinasPendentesOro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusMaquinasPendentesOroUpdateInput, statusMaquinasPendentesOroUncheckedUpdateInput>
  }

  /**
   * statusMaquinasPendentesOro delete
   */
  export type statusMaquinasPendentesOroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
    /**
     * Filter which statusMaquinasPendentesOro to delete.
     */
    where: statusMaquinasPendentesOroWhereUniqueInput
  }

  /**
   * statusMaquinasPendentesOro deleteMany
   */
  export type statusMaquinasPendentesOroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusMaquinasPendentesOros to delete
     */
    where?: statusMaquinasPendentesOroWhereInput
    /**
     * Limit how many statusMaquinasPendentesOros to delete.
     */
    limit?: number
  }

  /**
   * statusMaquinasPendentesOro.controlesDeMaquinasPendentesOro
   */
  export type statusMaquinasPendentesOro$controlesDeMaquinasPendentesOroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the controledeMaquinasPendentesOro
     */
    select?: controledeMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the controledeMaquinasPendentesOro
     */
    omit?: controledeMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controledeMaquinasPendentesOroInclude<ExtArgs> | null
    where?: controledeMaquinasPendentesOroWhereInput
    orderBy?: controledeMaquinasPendentesOroOrderByWithRelationInput | controledeMaquinasPendentesOroOrderByWithRelationInput[]
    cursor?: controledeMaquinasPendentesOroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControledeMaquinasPendentesOroScalarFieldEnum | ControledeMaquinasPendentesOroScalarFieldEnum[]
  }

  /**
   * statusMaquinasPendentesOro without action
   */
  export type statusMaquinasPendentesOroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusMaquinasPendentesOro
     */
    select?: statusMaquinasPendentesOroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusMaquinasPendentesOro
     */
    omit?: statusMaquinasPendentesOroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusMaquinasPendentesOroInclude<ExtArgs> | null
  }


  /**
   * Model documentacaoTecnica
   */

  export type AggregateDocumentacaoTecnica = {
    _count: DocumentacaoTecnicaCountAggregateOutputType | null
    _min: DocumentacaoTecnicaMinAggregateOutputType | null
    _max: DocumentacaoTecnicaMaxAggregateOutputType | null
  }

  export type DocumentacaoTecnicaMinAggregateOutputType = {
    id: string | null
    titulo: string | null
    descricao: string | null
    create_at: Date | null
    updated_at: Date | null
    cliente_id: string | null
    tecnico_id: string | null
    instituicao_id: string | null
  }

  export type DocumentacaoTecnicaMaxAggregateOutputType = {
    id: string | null
    titulo: string | null
    descricao: string | null
    create_at: Date | null
    updated_at: Date | null
    cliente_id: string | null
    tecnico_id: string | null
    instituicao_id: string | null
  }

  export type DocumentacaoTecnicaCountAggregateOutputType = {
    id: number
    titulo: number
    descricao: number
    create_at: number
    updated_at: number
    cliente_id: number
    tecnico_id: number
    instituicao_id: number
    _all: number
  }


  export type DocumentacaoTecnicaMinAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    create_at?: true
    updated_at?: true
    cliente_id?: true
    tecnico_id?: true
    instituicao_id?: true
  }

  export type DocumentacaoTecnicaMaxAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    create_at?: true
    updated_at?: true
    cliente_id?: true
    tecnico_id?: true
    instituicao_id?: true
  }

  export type DocumentacaoTecnicaCountAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    create_at?: true
    updated_at?: true
    cliente_id?: true
    tecnico_id?: true
    instituicao_id?: true
    _all?: true
  }

  export type DocumentacaoTecnicaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which documentacaoTecnica to aggregate.
     */
    where?: documentacaoTecnicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documentacaoTecnicas to fetch.
     */
    orderBy?: documentacaoTecnicaOrderByWithRelationInput | documentacaoTecnicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: documentacaoTecnicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documentacaoTecnicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documentacaoTecnicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned documentacaoTecnicas
    **/
    _count?: true | DocumentacaoTecnicaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentacaoTecnicaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentacaoTecnicaMaxAggregateInputType
  }

  export type GetDocumentacaoTecnicaAggregateType<T extends DocumentacaoTecnicaAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentacaoTecnica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentacaoTecnica[P]>
      : GetScalarType<T[P], AggregateDocumentacaoTecnica[P]>
  }




  export type documentacaoTecnicaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: documentacaoTecnicaWhereInput
    orderBy?: documentacaoTecnicaOrderByWithAggregationInput | documentacaoTecnicaOrderByWithAggregationInput[]
    by: DocumentacaoTecnicaScalarFieldEnum[] | DocumentacaoTecnicaScalarFieldEnum
    having?: documentacaoTecnicaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentacaoTecnicaCountAggregateInputType | true
    _min?: DocumentacaoTecnicaMinAggregateInputType
    _max?: DocumentacaoTecnicaMaxAggregateInputType
  }

  export type DocumentacaoTecnicaGroupByOutputType = {
    id: string
    titulo: string
    descricao: string
    create_at: Date | null
    updated_at: Date | null
    cliente_id: string | null
    tecnico_id: string
    instituicao_id: string | null
    _count: DocumentacaoTecnicaCountAggregateOutputType | null
    _min: DocumentacaoTecnicaMinAggregateOutputType | null
    _max: DocumentacaoTecnicaMaxAggregateOutputType | null
  }

  type GetDocumentacaoTecnicaGroupByPayload<T extends documentacaoTecnicaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentacaoTecnicaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentacaoTecnicaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentacaoTecnicaGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentacaoTecnicaGroupByOutputType[P]>
        }
      >
    >


  export type documentacaoTecnicaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    create_at?: boolean
    updated_at?: boolean
    cliente_id?: boolean
    tecnico_id?: boolean
    instituicao_id?: boolean
    cliente?: boolean | documentacaoTecnica$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    instituicao?: boolean | documentacaoTecnica$instituicaoArgs<ExtArgs>
  }, ExtArgs["result"]["documentacaoTecnica"]>

  export type documentacaoTecnicaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    create_at?: boolean
    updated_at?: boolean
    cliente_id?: boolean
    tecnico_id?: boolean
    instituicao_id?: boolean
    cliente?: boolean | documentacaoTecnica$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    instituicao?: boolean | documentacaoTecnica$instituicaoArgs<ExtArgs>
  }, ExtArgs["result"]["documentacaoTecnica"]>

  export type documentacaoTecnicaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    create_at?: boolean
    updated_at?: boolean
    cliente_id?: boolean
    tecnico_id?: boolean
    instituicao_id?: boolean
    cliente?: boolean | documentacaoTecnica$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    instituicao?: boolean | documentacaoTecnica$instituicaoArgs<ExtArgs>
  }, ExtArgs["result"]["documentacaoTecnica"]>

  export type documentacaoTecnicaSelectScalar = {
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    create_at?: boolean
    updated_at?: boolean
    cliente_id?: boolean
    tecnico_id?: boolean
    instituicao_id?: boolean
  }

  export type documentacaoTecnicaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "descricao" | "create_at" | "updated_at" | "cliente_id" | "tecnico_id" | "instituicao_id", ExtArgs["result"]["documentacaoTecnica"]>
  export type documentacaoTecnicaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | documentacaoTecnica$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    instituicao?: boolean | documentacaoTecnica$instituicaoArgs<ExtArgs>
  }
  export type documentacaoTecnicaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | documentacaoTecnica$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    instituicao?: boolean | documentacaoTecnica$instituicaoArgs<ExtArgs>
  }
  export type documentacaoTecnicaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | documentacaoTecnica$clienteArgs<ExtArgs>
    tecnico?: boolean | TecnicoDefaultArgs<ExtArgs>
    instituicao?: boolean | documentacaoTecnica$instituicaoArgs<ExtArgs>
  }

  export type $documentacaoTecnicaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "documentacaoTecnica"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs> | null
      tecnico: Prisma.$TecnicoPayload<ExtArgs>
      instituicao: Prisma.$InstituicaoUnidadePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      titulo: string
      descricao: string
      create_at: Date | null
      updated_at: Date | null
      cliente_id: string | null
      tecnico_id: string
      instituicao_id: string | null
    }, ExtArgs["result"]["documentacaoTecnica"]>
    composites: {}
  }

  type documentacaoTecnicaGetPayload<S extends boolean | null | undefined | documentacaoTecnicaDefaultArgs> = $Result.GetResult<Prisma.$documentacaoTecnicaPayload, S>

  type documentacaoTecnicaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<documentacaoTecnicaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentacaoTecnicaCountAggregateInputType | true
    }

  export interface documentacaoTecnicaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['documentacaoTecnica'], meta: { name: 'documentacaoTecnica' } }
    /**
     * Find zero or one DocumentacaoTecnica that matches the filter.
     * @param {documentacaoTecnicaFindUniqueArgs} args - Arguments to find a DocumentacaoTecnica
     * @example
     * // Get one DocumentacaoTecnica
     * const documentacaoTecnica = await prisma.documentacaoTecnica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends documentacaoTecnicaFindUniqueArgs>(args: SelectSubset<T, documentacaoTecnicaFindUniqueArgs<ExtArgs>>): Prisma__documentacaoTecnicaClient<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentacaoTecnica that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {documentacaoTecnicaFindUniqueOrThrowArgs} args - Arguments to find a DocumentacaoTecnica
     * @example
     * // Get one DocumentacaoTecnica
     * const documentacaoTecnica = await prisma.documentacaoTecnica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends documentacaoTecnicaFindUniqueOrThrowArgs>(args: SelectSubset<T, documentacaoTecnicaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__documentacaoTecnicaClient<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentacaoTecnica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentacaoTecnicaFindFirstArgs} args - Arguments to find a DocumentacaoTecnica
     * @example
     * // Get one DocumentacaoTecnica
     * const documentacaoTecnica = await prisma.documentacaoTecnica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends documentacaoTecnicaFindFirstArgs>(args?: SelectSubset<T, documentacaoTecnicaFindFirstArgs<ExtArgs>>): Prisma__documentacaoTecnicaClient<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentacaoTecnica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentacaoTecnicaFindFirstOrThrowArgs} args - Arguments to find a DocumentacaoTecnica
     * @example
     * // Get one DocumentacaoTecnica
     * const documentacaoTecnica = await prisma.documentacaoTecnica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends documentacaoTecnicaFindFirstOrThrowArgs>(args?: SelectSubset<T, documentacaoTecnicaFindFirstOrThrowArgs<ExtArgs>>): Prisma__documentacaoTecnicaClient<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentacaoTecnicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentacaoTecnicaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentacaoTecnicas
     * const documentacaoTecnicas = await prisma.documentacaoTecnica.findMany()
     * 
     * // Get first 10 DocumentacaoTecnicas
     * const documentacaoTecnicas = await prisma.documentacaoTecnica.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentacaoTecnicaWithIdOnly = await prisma.documentacaoTecnica.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends documentacaoTecnicaFindManyArgs>(args?: SelectSubset<T, documentacaoTecnicaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentacaoTecnica.
     * @param {documentacaoTecnicaCreateArgs} args - Arguments to create a DocumentacaoTecnica.
     * @example
     * // Create one DocumentacaoTecnica
     * const DocumentacaoTecnica = await prisma.documentacaoTecnica.create({
     *   data: {
     *     // ... data to create a DocumentacaoTecnica
     *   }
     * })
     * 
     */
    create<T extends documentacaoTecnicaCreateArgs>(args: SelectSubset<T, documentacaoTecnicaCreateArgs<ExtArgs>>): Prisma__documentacaoTecnicaClient<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentacaoTecnicas.
     * @param {documentacaoTecnicaCreateManyArgs} args - Arguments to create many DocumentacaoTecnicas.
     * @example
     * // Create many DocumentacaoTecnicas
     * const documentacaoTecnica = await prisma.documentacaoTecnica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends documentacaoTecnicaCreateManyArgs>(args?: SelectSubset<T, documentacaoTecnicaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentacaoTecnicas and returns the data saved in the database.
     * @param {documentacaoTecnicaCreateManyAndReturnArgs} args - Arguments to create many DocumentacaoTecnicas.
     * @example
     * // Create many DocumentacaoTecnicas
     * const documentacaoTecnica = await prisma.documentacaoTecnica.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentacaoTecnicas and only return the `id`
     * const documentacaoTecnicaWithIdOnly = await prisma.documentacaoTecnica.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends documentacaoTecnicaCreateManyAndReturnArgs>(args?: SelectSubset<T, documentacaoTecnicaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentacaoTecnica.
     * @param {documentacaoTecnicaDeleteArgs} args - Arguments to delete one DocumentacaoTecnica.
     * @example
     * // Delete one DocumentacaoTecnica
     * const DocumentacaoTecnica = await prisma.documentacaoTecnica.delete({
     *   where: {
     *     // ... filter to delete one DocumentacaoTecnica
     *   }
     * })
     * 
     */
    delete<T extends documentacaoTecnicaDeleteArgs>(args: SelectSubset<T, documentacaoTecnicaDeleteArgs<ExtArgs>>): Prisma__documentacaoTecnicaClient<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentacaoTecnica.
     * @param {documentacaoTecnicaUpdateArgs} args - Arguments to update one DocumentacaoTecnica.
     * @example
     * // Update one DocumentacaoTecnica
     * const documentacaoTecnica = await prisma.documentacaoTecnica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends documentacaoTecnicaUpdateArgs>(args: SelectSubset<T, documentacaoTecnicaUpdateArgs<ExtArgs>>): Prisma__documentacaoTecnicaClient<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentacaoTecnicas.
     * @param {documentacaoTecnicaDeleteManyArgs} args - Arguments to filter DocumentacaoTecnicas to delete.
     * @example
     * // Delete a few DocumentacaoTecnicas
     * const { count } = await prisma.documentacaoTecnica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends documentacaoTecnicaDeleteManyArgs>(args?: SelectSubset<T, documentacaoTecnicaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentacaoTecnicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentacaoTecnicaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentacaoTecnicas
     * const documentacaoTecnica = await prisma.documentacaoTecnica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends documentacaoTecnicaUpdateManyArgs>(args: SelectSubset<T, documentacaoTecnicaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentacaoTecnicas and returns the data updated in the database.
     * @param {documentacaoTecnicaUpdateManyAndReturnArgs} args - Arguments to update many DocumentacaoTecnicas.
     * @example
     * // Update many DocumentacaoTecnicas
     * const documentacaoTecnica = await prisma.documentacaoTecnica.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentacaoTecnicas and only return the `id`
     * const documentacaoTecnicaWithIdOnly = await prisma.documentacaoTecnica.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends documentacaoTecnicaUpdateManyAndReturnArgs>(args: SelectSubset<T, documentacaoTecnicaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentacaoTecnica.
     * @param {documentacaoTecnicaUpsertArgs} args - Arguments to update or create a DocumentacaoTecnica.
     * @example
     * // Update or create a DocumentacaoTecnica
     * const documentacaoTecnica = await prisma.documentacaoTecnica.upsert({
     *   create: {
     *     // ... data to create a DocumentacaoTecnica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentacaoTecnica we want to update
     *   }
     * })
     */
    upsert<T extends documentacaoTecnicaUpsertArgs>(args: SelectSubset<T, documentacaoTecnicaUpsertArgs<ExtArgs>>): Prisma__documentacaoTecnicaClient<$Result.GetResult<Prisma.$documentacaoTecnicaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentacaoTecnicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentacaoTecnicaCountArgs} args - Arguments to filter DocumentacaoTecnicas to count.
     * @example
     * // Count the number of DocumentacaoTecnicas
     * const count = await prisma.documentacaoTecnica.count({
     *   where: {
     *     // ... the filter for the DocumentacaoTecnicas we want to count
     *   }
     * })
    **/
    count<T extends documentacaoTecnicaCountArgs>(
      args?: Subset<T, documentacaoTecnicaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentacaoTecnicaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentacaoTecnica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentacaoTecnicaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentacaoTecnicaAggregateArgs>(args: Subset<T, DocumentacaoTecnicaAggregateArgs>): Prisma.PrismaPromise<GetDocumentacaoTecnicaAggregateType<T>>

    /**
     * Group by DocumentacaoTecnica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentacaoTecnicaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends documentacaoTecnicaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: documentacaoTecnicaGroupByArgs['orderBy'] }
        : { orderBy?: documentacaoTecnicaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, documentacaoTecnicaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentacaoTecnicaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the documentacaoTecnica model
   */
  readonly fields: documentacaoTecnicaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for documentacaoTecnica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__documentacaoTecnicaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends documentacaoTecnica$clienteArgs<ExtArgs> = {}>(args?: Subset<T, documentacaoTecnica$clienteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tecnico<T extends TecnicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TecnicoDefaultArgs<ExtArgs>>): Prisma__TecnicoClient<$Result.GetResult<Prisma.$TecnicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instituicao<T extends documentacaoTecnica$instituicaoArgs<ExtArgs> = {}>(args?: Subset<T, documentacaoTecnica$instituicaoArgs<ExtArgs>>): Prisma__InstituicaoUnidadeClient<$Result.GetResult<Prisma.$InstituicaoUnidadePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the documentacaoTecnica model
   */
  interface documentacaoTecnicaFieldRefs {
    readonly id: FieldRef<"documentacaoTecnica", 'String'>
    readonly titulo: FieldRef<"documentacaoTecnica", 'String'>
    readonly descricao: FieldRef<"documentacaoTecnica", 'String'>
    readonly create_at: FieldRef<"documentacaoTecnica", 'DateTime'>
    readonly updated_at: FieldRef<"documentacaoTecnica", 'DateTime'>
    readonly cliente_id: FieldRef<"documentacaoTecnica", 'String'>
    readonly tecnico_id: FieldRef<"documentacaoTecnica", 'String'>
    readonly instituicao_id: FieldRef<"documentacaoTecnica", 'String'>
  }
    

  // Custom InputTypes
  /**
   * documentacaoTecnica findUnique
   */
  export type documentacaoTecnicaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which documentacaoTecnica to fetch.
     */
    where: documentacaoTecnicaWhereUniqueInput
  }

  /**
   * documentacaoTecnica findUniqueOrThrow
   */
  export type documentacaoTecnicaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which documentacaoTecnica to fetch.
     */
    where: documentacaoTecnicaWhereUniqueInput
  }

  /**
   * documentacaoTecnica findFirst
   */
  export type documentacaoTecnicaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which documentacaoTecnica to fetch.
     */
    where?: documentacaoTecnicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documentacaoTecnicas to fetch.
     */
    orderBy?: documentacaoTecnicaOrderByWithRelationInput | documentacaoTecnicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for documentacaoTecnicas.
     */
    cursor?: documentacaoTecnicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documentacaoTecnicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documentacaoTecnicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of documentacaoTecnicas.
     */
    distinct?: DocumentacaoTecnicaScalarFieldEnum | DocumentacaoTecnicaScalarFieldEnum[]
  }

  /**
   * documentacaoTecnica findFirstOrThrow
   */
  export type documentacaoTecnicaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which documentacaoTecnica to fetch.
     */
    where?: documentacaoTecnicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documentacaoTecnicas to fetch.
     */
    orderBy?: documentacaoTecnicaOrderByWithRelationInput | documentacaoTecnicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for documentacaoTecnicas.
     */
    cursor?: documentacaoTecnicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documentacaoTecnicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documentacaoTecnicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of documentacaoTecnicas.
     */
    distinct?: DocumentacaoTecnicaScalarFieldEnum | DocumentacaoTecnicaScalarFieldEnum[]
  }

  /**
   * documentacaoTecnica findMany
   */
  export type documentacaoTecnicaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    /**
     * Filter, which documentacaoTecnicas to fetch.
     */
    where?: documentacaoTecnicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documentacaoTecnicas to fetch.
     */
    orderBy?: documentacaoTecnicaOrderByWithRelationInput | documentacaoTecnicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing documentacaoTecnicas.
     */
    cursor?: documentacaoTecnicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documentacaoTecnicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documentacaoTecnicas.
     */
    skip?: number
    distinct?: DocumentacaoTecnicaScalarFieldEnum | DocumentacaoTecnicaScalarFieldEnum[]
  }

  /**
   * documentacaoTecnica create
   */
  export type documentacaoTecnicaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    /**
     * The data needed to create a documentacaoTecnica.
     */
    data: XOR<documentacaoTecnicaCreateInput, documentacaoTecnicaUncheckedCreateInput>
  }

  /**
   * documentacaoTecnica createMany
   */
  export type documentacaoTecnicaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many documentacaoTecnicas.
     */
    data: documentacaoTecnicaCreateManyInput | documentacaoTecnicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * documentacaoTecnica createManyAndReturn
   */
  export type documentacaoTecnicaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * The data used to create many documentacaoTecnicas.
     */
    data: documentacaoTecnicaCreateManyInput | documentacaoTecnicaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * documentacaoTecnica update
   */
  export type documentacaoTecnicaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    /**
     * The data needed to update a documentacaoTecnica.
     */
    data: XOR<documentacaoTecnicaUpdateInput, documentacaoTecnicaUncheckedUpdateInput>
    /**
     * Choose, which documentacaoTecnica to update.
     */
    where: documentacaoTecnicaWhereUniqueInput
  }

  /**
   * documentacaoTecnica updateMany
   */
  export type documentacaoTecnicaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update documentacaoTecnicas.
     */
    data: XOR<documentacaoTecnicaUpdateManyMutationInput, documentacaoTecnicaUncheckedUpdateManyInput>
    /**
     * Filter which documentacaoTecnicas to update
     */
    where?: documentacaoTecnicaWhereInput
    /**
     * Limit how many documentacaoTecnicas to update.
     */
    limit?: number
  }

  /**
   * documentacaoTecnica updateManyAndReturn
   */
  export type documentacaoTecnicaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * The data used to update documentacaoTecnicas.
     */
    data: XOR<documentacaoTecnicaUpdateManyMutationInput, documentacaoTecnicaUncheckedUpdateManyInput>
    /**
     * Filter which documentacaoTecnicas to update
     */
    where?: documentacaoTecnicaWhereInput
    /**
     * Limit how many documentacaoTecnicas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * documentacaoTecnica upsert
   */
  export type documentacaoTecnicaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    /**
     * The filter to search for the documentacaoTecnica to update in case it exists.
     */
    where: documentacaoTecnicaWhereUniqueInput
    /**
     * In case the documentacaoTecnica found by the `where` argument doesn't exist, create a new documentacaoTecnica with this data.
     */
    create: XOR<documentacaoTecnicaCreateInput, documentacaoTecnicaUncheckedCreateInput>
    /**
     * In case the documentacaoTecnica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<documentacaoTecnicaUpdateInput, documentacaoTecnicaUncheckedUpdateInput>
  }

  /**
   * documentacaoTecnica delete
   */
  export type documentacaoTecnicaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
    /**
     * Filter which documentacaoTecnica to delete.
     */
    where: documentacaoTecnicaWhereUniqueInput
  }

  /**
   * documentacaoTecnica deleteMany
   */
  export type documentacaoTecnicaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which documentacaoTecnicas to delete
     */
    where?: documentacaoTecnicaWhereInput
    /**
     * Limit how many documentacaoTecnicas to delete.
     */
    limit?: number
  }

  /**
   * documentacaoTecnica.cliente
   */
  export type documentacaoTecnica$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }

  /**
   * documentacaoTecnica.instituicao
   */
  export type documentacaoTecnica$instituicaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoUnidade
     */
    select?: InstituicaoUnidadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstituicaoUnidade
     */
    omit?: InstituicaoUnidadeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoUnidadeInclude<ExtArgs> | null
    where?: InstituicaoUnidadeWhereInput
  }

  /**
   * documentacaoTecnica without action
   */
  export type documentacaoTecnicaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the documentacaoTecnica
     */
    select?: documentacaoTecnicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the documentacaoTecnica
     */
    omit?: documentacaoTecnicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: documentacaoTecnicaInclude<ExtArgs> | null
  }


  /**
   * Model solicitacaoDeCompras
   */

  export type AggregateSolicitacaoDeCompras = {
    _count: SolicitacaoDeComprasCountAggregateOutputType | null
    _avg: SolicitacaoDeComprasAvgAggregateOutputType | null
    _sum: SolicitacaoDeComprasSumAggregateOutputType | null
    _min: SolicitacaoDeComprasMinAggregateOutputType | null
    _max: SolicitacaoDeComprasMaxAggregateOutputType | null
  }

  export type SolicitacaoDeComprasAvgAggregateOutputType = {
    preco: number | null
  }

  export type SolicitacaoDeComprasSumAggregateOutputType = {
    preco: number | null
  }

  export type SolicitacaoDeComprasMinAggregateOutputType = {
    id: string | null
    itemSolicitado: string | null
    solicitante: string | null
    motivoDaSolicitacao: string | null
    preco: number | null
    linkDeCompra: string | null
    create_at: Date | null
    updated_at: Date | null
    statusCompras_id: string | null
  }

  export type SolicitacaoDeComprasMaxAggregateOutputType = {
    id: string | null
    itemSolicitado: string | null
    solicitante: string | null
    motivoDaSolicitacao: string | null
    preco: number | null
    linkDeCompra: string | null
    create_at: Date | null
    updated_at: Date | null
    statusCompras_id: string | null
  }

  export type SolicitacaoDeComprasCountAggregateOutputType = {
    id: number
    itemSolicitado: number
    solicitante: number
    motivoDaSolicitacao: number
    preco: number
    linkDeCompra: number
    create_at: number
    updated_at: number
    statusCompras_id: number
    _all: number
  }


  export type SolicitacaoDeComprasAvgAggregateInputType = {
    preco?: true
  }

  export type SolicitacaoDeComprasSumAggregateInputType = {
    preco?: true
  }

  export type SolicitacaoDeComprasMinAggregateInputType = {
    id?: true
    itemSolicitado?: true
    solicitante?: true
    motivoDaSolicitacao?: true
    preco?: true
    linkDeCompra?: true
    create_at?: true
    updated_at?: true
    statusCompras_id?: true
  }

  export type SolicitacaoDeComprasMaxAggregateInputType = {
    id?: true
    itemSolicitado?: true
    solicitante?: true
    motivoDaSolicitacao?: true
    preco?: true
    linkDeCompra?: true
    create_at?: true
    updated_at?: true
    statusCompras_id?: true
  }

  export type SolicitacaoDeComprasCountAggregateInputType = {
    id?: true
    itemSolicitado?: true
    solicitante?: true
    motivoDaSolicitacao?: true
    preco?: true
    linkDeCompra?: true
    create_at?: true
    updated_at?: true
    statusCompras_id?: true
    _all?: true
  }

  export type SolicitacaoDeComprasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which solicitacaoDeCompras to aggregate.
     */
    where?: solicitacaoDeComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of solicitacaoDeCompras to fetch.
     */
    orderBy?: solicitacaoDeComprasOrderByWithRelationInput | solicitacaoDeComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: solicitacaoDeComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` solicitacaoDeCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` solicitacaoDeCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned solicitacaoDeCompras
    **/
    _count?: true | SolicitacaoDeComprasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SolicitacaoDeComprasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SolicitacaoDeComprasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SolicitacaoDeComprasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SolicitacaoDeComprasMaxAggregateInputType
  }

  export type GetSolicitacaoDeComprasAggregateType<T extends SolicitacaoDeComprasAggregateArgs> = {
        [P in keyof T & keyof AggregateSolicitacaoDeCompras]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSolicitacaoDeCompras[P]>
      : GetScalarType<T[P], AggregateSolicitacaoDeCompras[P]>
  }




  export type solicitacaoDeComprasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: solicitacaoDeComprasWhereInput
    orderBy?: solicitacaoDeComprasOrderByWithAggregationInput | solicitacaoDeComprasOrderByWithAggregationInput[]
    by: SolicitacaoDeComprasScalarFieldEnum[] | SolicitacaoDeComprasScalarFieldEnum
    having?: solicitacaoDeComprasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SolicitacaoDeComprasCountAggregateInputType | true
    _avg?: SolicitacaoDeComprasAvgAggregateInputType
    _sum?: SolicitacaoDeComprasSumAggregateInputType
    _min?: SolicitacaoDeComprasMinAggregateInputType
    _max?: SolicitacaoDeComprasMaxAggregateInputType
  }

  export type SolicitacaoDeComprasGroupByOutputType = {
    id: string
    itemSolicitado: string
    solicitante: string
    motivoDaSolicitacao: string
    preco: number
    linkDeCompra: string
    create_at: Date | null
    updated_at: Date | null
    statusCompras_id: string
    _count: SolicitacaoDeComprasCountAggregateOutputType | null
    _avg: SolicitacaoDeComprasAvgAggregateOutputType | null
    _sum: SolicitacaoDeComprasSumAggregateOutputType | null
    _min: SolicitacaoDeComprasMinAggregateOutputType | null
    _max: SolicitacaoDeComprasMaxAggregateOutputType | null
  }

  type GetSolicitacaoDeComprasGroupByPayload<T extends solicitacaoDeComprasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SolicitacaoDeComprasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SolicitacaoDeComprasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SolicitacaoDeComprasGroupByOutputType[P]>
            : GetScalarType<T[P], SolicitacaoDeComprasGroupByOutputType[P]>
        }
      >
    >


  export type solicitacaoDeComprasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemSolicitado?: boolean
    solicitante?: boolean
    motivoDaSolicitacao?: boolean
    preco?: boolean
    linkDeCompra?: boolean
    create_at?: boolean
    updated_at?: boolean
    statusCompras_id?: boolean
    statusCompras?: boolean | solicitacaoDeCompras$statusComprasArgs<ExtArgs>
  }, ExtArgs["result"]["solicitacaoDeCompras"]>

  export type solicitacaoDeComprasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemSolicitado?: boolean
    solicitante?: boolean
    motivoDaSolicitacao?: boolean
    preco?: boolean
    linkDeCompra?: boolean
    create_at?: boolean
    updated_at?: boolean
    statusCompras_id?: boolean
    statusCompras?: boolean | solicitacaoDeCompras$statusComprasArgs<ExtArgs>
  }, ExtArgs["result"]["solicitacaoDeCompras"]>

  export type solicitacaoDeComprasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemSolicitado?: boolean
    solicitante?: boolean
    motivoDaSolicitacao?: boolean
    preco?: boolean
    linkDeCompra?: boolean
    create_at?: boolean
    updated_at?: boolean
    statusCompras_id?: boolean
    statusCompras?: boolean | solicitacaoDeCompras$statusComprasArgs<ExtArgs>
  }, ExtArgs["result"]["solicitacaoDeCompras"]>

  export type solicitacaoDeComprasSelectScalar = {
    id?: boolean
    itemSolicitado?: boolean
    solicitante?: boolean
    motivoDaSolicitacao?: boolean
    preco?: boolean
    linkDeCompra?: boolean
    create_at?: boolean
    updated_at?: boolean
    statusCompras_id?: boolean
  }

  export type solicitacaoDeComprasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemSolicitado" | "solicitante" | "motivoDaSolicitacao" | "preco" | "linkDeCompra" | "create_at" | "updated_at" | "statusCompras_id", ExtArgs["result"]["solicitacaoDeCompras"]>
  export type solicitacaoDeComprasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusCompras?: boolean | solicitacaoDeCompras$statusComprasArgs<ExtArgs>
  }
  export type solicitacaoDeComprasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusCompras?: boolean | solicitacaoDeCompras$statusComprasArgs<ExtArgs>
  }
  export type solicitacaoDeComprasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusCompras?: boolean | solicitacaoDeCompras$statusComprasArgs<ExtArgs>
  }

  export type $solicitacaoDeComprasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "solicitacaoDeCompras"
    objects: {
      statusCompras: Prisma.$statusComprasPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemSolicitado: string
      solicitante: string
      motivoDaSolicitacao: string
      preco: number
      linkDeCompra: string
      create_at: Date | null
      updated_at: Date | null
      statusCompras_id: string
    }, ExtArgs["result"]["solicitacaoDeCompras"]>
    composites: {}
  }

  type solicitacaoDeComprasGetPayload<S extends boolean | null | undefined | solicitacaoDeComprasDefaultArgs> = $Result.GetResult<Prisma.$solicitacaoDeComprasPayload, S>

  type solicitacaoDeComprasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<solicitacaoDeComprasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SolicitacaoDeComprasCountAggregateInputType | true
    }

  export interface solicitacaoDeComprasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['solicitacaoDeCompras'], meta: { name: 'solicitacaoDeCompras' } }
    /**
     * Find zero or one SolicitacaoDeCompras that matches the filter.
     * @param {solicitacaoDeComprasFindUniqueArgs} args - Arguments to find a SolicitacaoDeCompras
     * @example
     * // Get one SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends solicitacaoDeComprasFindUniqueArgs>(args: SelectSubset<T, solicitacaoDeComprasFindUniqueArgs<ExtArgs>>): Prisma__solicitacaoDeComprasClient<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SolicitacaoDeCompras that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {solicitacaoDeComprasFindUniqueOrThrowArgs} args - Arguments to find a SolicitacaoDeCompras
     * @example
     * // Get one SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends solicitacaoDeComprasFindUniqueOrThrowArgs>(args: SelectSubset<T, solicitacaoDeComprasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__solicitacaoDeComprasClient<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SolicitacaoDeCompras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {solicitacaoDeComprasFindFirstArgs} args - Arguments to find a SolicitacaoDeCompras
     * @example
     * // Get one SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends solicitacaoDeComprasFindFirstArgs>(args?: SelectSubset<T, solicitacaoDeComprasFindFirstArgs<ExtArgs>>): Prisma__solicitacaoDeComprasClient<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SolicitacaoDeCompras that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {solicitacaoDeComprasFindFirstOrThrowArgs} args - Arguments to find a SolicitacaoDeCompras
     * @example
     * // Get one SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends solicitacaoDeComprasFindFirstOrThrowArgs>(args?: SelectSubset<T, solicitacaoDeComprasFindFirstOrThrowArgs<ExtArgs>>): Prisma__solicitacaoDeComprasClient<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SolicitacaoDeCompras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {solicitacaoDeComprasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.findMany()
     * 
     * // Get first 10 SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const solicitacaoDeComprasWithIdOnly = await prisma.solicitacaoDeCompras.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends solicitacaoDeComprasFindManyArgs>(args?: SelectSubset<T, solicitacaoDeComprasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SolicitacaoDeCompras.
     * @param {solicitacaoDeComprasCreateArgs} args - Arguments to create a SolicitacaoDeCompras.
     * @example
     * // Create one SolicitacaoDeCompras
     * const SolicitacaoDeCompras = await prisma.solicitacaoDeCompras.create({
     *   data: {
     *     // ... data to create a SolicitacaoDeCompras
     *   }
     * })
     * 
     */
    create<T extends solicitacaoDeComprasCreateArgs>(args: SelectSubset<T, solicitacaoDeComprasCreateArgs<ExtArgs>>): Prisma__solicitacaoDeComprasClient<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SolicitacaoDeCompras.
     * @param {solicitacaoDeComprasCreateManyArgs} args - Arguments to create many SolicitacaoDeCompras.
     * @example
     * // Create many SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends solicitacaoDeComprasCreateManyArgs>(args?: SelectSubset<T, solicitacaoDeComprasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SolicitacaoDeCompras and returns the data saved in the database.
     * @param {solicitacaoDeComprasCreateManyAndReturnArgs} args - Arguments to create many SolicitacaoDeCompras.
     * @example
     * // Create many SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SolicitacaoDeCompras and only return the `id`
     * const solicitacaoDeComprasWithIdOnly = await prisma.solicitacaoDeCompras.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends solicitacaoDeComprasCreateManyAndReturnArgs>(args?: SelectSubset<T, solicitacaoDeComprasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SolicitacaoDeCompras.
     * @param {solicitacaoDeComprasDeleteArgs} args - Arguments to delete one SolicitacaoDeCompras.
     * @example
     * // Delete one SolicitacaoDeCompras
     * const SolicitacaoDeCompras = await prisma.solicitacaoDeCompras.delete({
     *   where: {
     *     // ... filter to delete one SolicitacaoDeCompras
     *   }
     * })
     * 
     */
    delete<T extends solicitacaoDeComprasDeleteArgs>(args: SelectSubset<T, solicitacaoDeComprasDeleteArgs<ExtArgs>>): Prisma__solicitacaoDeComprasClient<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SolicitacaoDeCompras.
     * @param {solicitacaoDeComprasUpdateArgs} args - Arguments to update one SolicitacaoDeCompras.
     * @example
     * // Update one SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends solicitacaoDeComprasUpdateArgs>(args: SelectSubset<T, solicitacaoDeComprasUpdateArgs<ExtArgs>>): Prisma__solicitacaoDeComprasClient<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SolicitacaoDeCompras.
     * @param {solicitacaoDeComprasDeleteManyArgs} args - Arguments to filter SolicitacaoDeCompras to delete.
     * @example
     * // Delete a few SolicitacaoDeCompras
     * const { count } = await prisma.solicitacaoDeCompras.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends solicitacaoDeComprasDeleteManyArgs>(args?: SelectSubset<T, solicitacaoDeComprasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SolicitacaoDeCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {solicitacaoDeComprasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends solicitacaoDeComprasUpdateManyArgs>(args: SelectSubset<T, solicitacaoDeComprasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SolicitacaoDeCompras and returns the data updated in the database.
     * @param {solicitacaoDeComprasUpdateManyAndReturnArgs} args - Arguments to update many SolicitacaoDeCompras.
     * @example
     * // Update many SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SolicitacaoDeCompras and only return the `id`
     * const solicitacaoDeComprasWithIdOnly = await prisma.solicitacaoDeCompras.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends solicitacaoDeComprasUpdateManyAndReturnArgs>(args: SelectSubset<T, solicitacaoDeComprasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SolicitacaoDeCompras.
     * @param {solicitacaoDeComprasUpsertArgs} args - Arguments to update or create a SolicitacaoDeCompras.
     * @example
     * // Update or create a SolicitacaoDeCompras
     * const solicitacaoDeCompras = await prisma.solicitacaoDeCompras.upsert({
     *   create: {
     *     // ... data to create a SolicitacaoDeCompras
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SolicitacaoDeCompras we want to update
     *   }
     * })
     */
    upsert<T extends solicitacaoDeComprasUpsertArgs>(args: SelectSubset<T, solicitacaoDeComprasUpsertArgs<ExtArgs>>): Prisma__solicitacaoDeComprasClient<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SolicitacaoDeCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {solicitacaoDeComprasCountArgs} args - Arguments to filter SolicitacaoDeCompras to count.
     * @example
     * // Count the number of SolicitacaoDeCompras
     * const count = await prisma.solicitacaoDeCompras.count({
     *   where: {
     *     // ... the filter for the SolicitacaoDeCompras we want to count
     *   }
     * })
    **/
    count<T extends solicitacaoDeComprasCountArgs>(
      args?: Subset<T, solicitacaoDeComprasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SolicitacaoDeComprasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SolicitacaoDeCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolicitacaoDeComprasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SolicitacaoDeComprasAggregateArgs>(args: Subset<T, SolicitacaoDeComprasAggregateArgs>): Prisma.PrismaPromise<GetSolicitacaoDeComprasAggregateType<T>>

    /**
     * Group by SolicitacaoDeCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {solicitacaoDeComprasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends solicitacaoDeComprasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: solicitacaoDeComprasGroupByArgs['orderBy'] }
        : { orderBy?: solicitacaoDeComprasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, solicitacaoDeComprasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSolicitacaoDeComprasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the solicitacaoDeCompras model
   */
  readonly fields: solicitacaoDeComprasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for solicitacaoDeCompras.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__solicitacaoDeComprasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    statusCompras<T extends solicitacaoDeCompras$statusComprasArgs<ExtArgs> = {}>(args?: Subset<T, solicitacaoDeCompras$statusComprasArgs<ExtArgs>>): Prisma__statusComprasClient<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the solicitacaoDeCompras model
   */
  interface solicitacaoDeComprasFieldRefs {
    readonly id: FieldRef<"solicitacaoDeCompras", 'String'>
    readonly itemSolicitado: FieldRef<"solicitacaoDeCompras", 'String'>
    readonly solicitante: FieldRef<"solicitacaoDeCompras", 'String'>
    readonly motivoDaSolicitacao: FieldRef<"solicitacaoDeCompras", 'String'>
    readonly preco: FieldRef<"solicitacaoDeCompras", 'Float'>
    readonly linkDeCompra: FieldRef<"solicitacaoDeCompras", 'String'>
    readonly create_at: FieldRef<"solicitacaoDeCompras", 'DateTime'>
    readonly updated_at: FieldRef<"solicitacaoDeCompras", 'DateTime'>
    readonly statusCompras_id: FieldRef<"solicitacaoDeCompras", 'String'>
  }
    

  // Custom InputTypes
  /**
   * solicitacaoDeCompras findUnique
   */
  export type solicitacaoDeComprasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    /**
     * Filter, which solicitacaoDeCompras to fetch.
     */
    where: solicitacaoDeComprasWhereUniqueInput
  }

  /**
   * solicitacaoDeCompras findUniqueOrThrow
   */
  export type solicitacaoDeComprasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    /**
     * Filter, which solicitacaoDeCompras to fetch.
     */
    where: solicitacaoDeComprasWhereUniqueInput
  }

  /**
   * solicitacaoDeCompras findFirst
   */
  export type solicitacaoDeComprasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    /**
     * Filter, which solicitacaoDeCompras to fetch.
     */
    where?: solicitacaoDeComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of solicitacaoDeCompras to fetch.
     */
    orderBy?: solicitacaoDeComprasOrderByWithRelationInput | solicitacaoDeComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for solicitacaoDeCompras.
     */
    cursor?: solicitacaoDeComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` solicitacaoDeCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` solicitacaoDeCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of solicitacaoDeCompras.
     */
    distinct?: SolicitacaoDeComprasScalarFieldEnum | SolicitacaoDeComprasScalarFieldEnum[]
  }

  /**
   * solicitacaoDeCompras findFirstOrThrow
   */
  export type solicitacaoDeComprasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    /**
     * Filter, which solicitacaoDeCompras to fetch.
     */
    where?: solicitacaoDeComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of solicitacaoDeCompras to fetch.
     */
    orderBy?: solicitacaoDeComprasOrderByWithRelationInput | solicitacaoDeComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for solicitacaoDeCompras.
     */
    cursor?: solicitacaoDeComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` solicitacaoDeCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` solicitacaoDeCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of solicitacaoDeCompras.
     */
    distinct?: SolicitacaoDeComprasScalarFieldEnum | SolicitacaoDeComprasScalarFieldEnum[]
  }

  /**
   * solicitacaoDeCompras findMany
   */
  export type solicitacaoDeComprasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    /**
     * Filter, which solicitacaoDeCompras to fetch.
     */
    where?: solicitacaoDeComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of solicitacaoDeCompras to fetch.
     */
    orderBy?: solicitacaoDeComprasOrderByWithRelationInput | solicitacaoDeComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing solicitacaoDeCompras.
     */
    cursor?: solicitacaoDeComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` solicitacaoDeCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` solicitacaoDeCompras.
     */
    skip?: number
    distinct?: SolicitacaoDeComprasScalarFieldEnum | SolicitacaoDeComprasScalarFieldEnum[]
  }

  /**
   * solicitacaoDeCompras create
   */
  export type solicitacaoDeComprasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    /**
     * The data needed to create a solicitacaoDeCompras.
     */
    data: XOR<solicitacaoDeComprasCreateInput, solicitacaoDeComprasUncheckedCreateInput>
  }

  /**
   * solicitacaoDeCompras createMany
   */
  export type solicitacaoDeComprasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many solicitacaoDeCompras.
     */
    data: solicitacaoDeComprasCreateManyInput | solicitacaoDeComprasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * solicitacaoDeCompras createManyAndReturn
   */
  export type solicitacaoDeComprasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * The data used to create many solicitacaoDeCompras.
     */
    data: solicitacaoDeComprasCreateManyInput | solicitacaoDeComprasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * solicitacaoDeCompras update
   */
  export type solicitacaoDeComprasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    /**
     * The data needed to update a solicitacaoDeCompras.
     */
    data: XOR<solicitacaoDeComprasUpdateInput, solicitacaoDeComprasUncheckedUpdateInput>
    /**
     * Choose, which solicitacaoDeCompras to update.
     */
    where: solicitacaoDeComprasWhereUniqueInput
  }

  /**
   * solicitacaoDeCompras updateMany
   */
  export type solicitacaoDeComprasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update solicitacaoDeCompras.
     */
    data: XOR<solicitacaoDeComprasUpdateManyMutationInput, solicitacaoDeComprasUncheckedUpdateManyInput>
    /**
     * Filter which solicitacaoDeCompras to update
     */
    where?: solicitacaoDeComprasWhereInput
    /**
     * Limit how many solicitacaoDeCompras to update.
     */
    limit?: number
  }

  /**
   * solicitacaoDeCompras updateManyAndReturn
   */
  export type solicitacaoDeComprasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * The data used to update solicitacaoDeCompras.
     */
    data: XOR<solicitacaoDeComprasUpdateManyMutationInput, solicitacaoDeComprasUncheckedUpdateManyInput>
    /**
     * Filter which solicitacaoDeCompras to update
     */
    where?: solicitacaoDeComprasWhereInput
    /**
     * Limit how many solicitacaoDeCompras to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * solicitacaoDeCompras upsert
   */
  export type solicitacaoDeComprasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    /**
     * The filter to search for the solicitacaoDeCompras to update in case it exists.
     */
    where: solicitacaoDeComprasWhereUniqueInput
    /**
     * In case the solicitacaoDeCompras found by the `where` argument doesn't exist, create a new solicitacaoDeCompras with this data.
     */
    create: XOR<solicitacaoDeComprasCreateInput, solicitacaoDeComprasUncheckedCreateInput>
    /**
     * In case the solicitacaoDeCompras was found with the provided `where` argument, update it with this data.
     */
    update: XOR<solicitacaoDeComprasUpdateInput, solicitacaoDeComprasUncheckedUpdateInput>
  }

  /**
   * solicitacaoDeCompras delete
   */
  export type solicitacaoDeComprasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    /**
     * Filter which solicitacaoDeCompras to delete.
     */
    where: solicitacaoDeComprasWhereUniqueInput
  }

  /**
   * solicitacaoDeCompras deleteMany
   */
  export type solicitacaoDeComprasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which solicitacaoDeCompras to delete
     */
    where?: solicitacaoDeComprasWhereInput
    /**
     * Limit how many solicitacaoDeCompras to delete.
     */
    limit?: number
  }

  /**
   * solicitacaoDeCompras.statusCompras
   */
  export type solicitacaoDeCompras$statusComprasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    where?: statusComprasWhereInput
  }

  /**
   * solicitacaoDeCompras without action
   */
  export type solicitacaoDeComprasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
  }


  /**
   * Model statusCompras
   */

  export type AggregateStatusCompras = {
    _count: StatusComprasCountAggregateOutputType | null
    _min: StatusComprasMinAggregateOutputType | null
    _max: StatusComprasMaxAggregateOutputType | null
  }

  export type StatusComprasMinAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusComprasMaxAggregateOutputType = {
    id: string | null
    name: string | null
    create_at: Date | null
    updated_at: Date | null
  }

  export type StatusComprasCountAggregateOutputType = {
    id: number
    name: number
    create_at: number
    updated_at: number
    _all: number
  }


  export type StatusComprasMinAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusComprasMaxAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
  }

  export type StatusComprasCountAggregateInputType = {
    id?: true
    name?: true
    create_at?: true
    updated_at?: true
    _all?: true
  }

  export type StatusComprasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusCompras to aggregate.
     */
    where?: statusComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusCompras to fetch.
     */
    orderBy?: statusComprasOrderByWithRelationInput | statusComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statusCompras
    **/
    _count?: true | StatusComprasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusComprasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusComprasMaxAggregateInputType
  }

  export type GetStatusComprasAggregateType<T extends StatusComprasAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusCompras]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusCompras[P]>
      : GetScalarType<T[P], AggregateStatusCompras[P]>
  }




  export type statusComprasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: statusComprasWhereInput
    orderBy?: statusComprasOrderByWithAggregationInput | statusComprasOrderByWithAggregationInput[]
    by: StatusComprasScalarFieldEnum[] | StatusComprasScalarFieldEnum
    having?: statusComprasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusComprasCountAggregateInputType | true
    _min?: StatusComprasMinAggregateInputType
    _max?: StatusComprasMaxAggregateInputType
  }

  export type StatusComprasGroupByOutputType = {
    id: string
    name: string
    create_at: Date | null
    updated_at: Date | null
    _count: StatusComprasCountAggregateOutputType | null
    _min: StatusComprasMinAggregateOutputType | null
    _max: StatusComprasMaxAggregateOutputType | null
  }

  type GetStatusComprasGroupByPayload<T extends statusComprasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusComprasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusComprasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusComprasGroupByOutputType[P]>
            : GetScalarType<T[P], StatusComprasGroupByOutputType[P]>
        }
      >
    >


  export type statusComprasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
    solicitacoesDeCompras?: boolean | statusCompras$solicitacoesDeComprasArgs<ExtArgs>
    _count?: boolean | StatusComprasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusCompras"]>

  export type statusComprasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusCompras"]>

  export type statusComprasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["statusCompras"]>

  export type statusComprasSelectScalar = {
    id?: boolean
    name?: boolean
    create_at?: boolean
    updated_at?: boolean
  }

  export type statusComprasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "create_at" | "updated_at", ExtArgs["result"]["statusCompras"]>
  export type statusComprasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solicitacoesDeCompras?: boolean | statusCompras$solicitacoesDeComprasArgs<ExtArgs>
    _count?: boolean | StatusComprasCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type statusComprasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type statusComprasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $statusComprasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "statusCompras"
    objects: {
      solicitacoesDeCompras: Prisma.$solicitacaoDeComprasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      create_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["statusCompras"]>
    composites: {}
  }

  type statusComprasGetPayload<S extends boolean | null | undefined | statusComprasDefaultArgs> = $Result.GetResult<Prisma.$statusComprasPayload, S>

  type statusComprasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<statusComprasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusComprasCountAggregateInputType | true
    }

  export interface statusComprasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['statusCompras'], meta: { name: 'statusCompras' } }
    /**
     * Find zero or one StatusCompras that matches the filter.
     * @param {statusComprasFindUniqueArgs} args - Arguments to find a StatusCompras
     * @example
     * // Get one StatusCompras
     * const statusCompras = await prisma.statusCompras.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends statusComprasFindUniqueArgs>(args: SelectSubset<T, statusComprasFindUniqueArgs<ExtArgs>>): Prisma__statusComprasClient<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusCompras that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {statusComprasFindUniqueOrThrowArgs} args - Arguments to find a StatusCompras
     * @example
     * // Get one StatusCompras
     * const statusCompras = await prisma.statusCompras.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends statusComprasFindUniqueOrThrowArgs>(args: SelectSubset<T, statusComprasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__statusComprasClient<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusCompras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusComprasFindFirstArgs} args - Arguments to find a StatusCompras
     * @example
     * // Get one StatusCompras
     * const statusCompras = await prisma.statusCompras.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends statusComprasFindFirstArgs>(args?: SelectSubset<T, statusComprasFindFirstArgs<ExtArgs>>): Prisma__statusComprasClient<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusCompras that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusComprasFindFirstOrThrowArgs} args - Arguments to find a StatusCompras
     * @example
     * // Get one StatusCompras
     * const statusCompras = await prisma.statusCompras.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends statusComprasFindFirstOrThrowArgs>(args?: SelectSubset<T, statusComprasFindFirstOrThrowArgs<ExtArgs>>): Prisma__statusComprasClient<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusCompras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusComprasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusCompras
     * const statusCompras = await prisma.statusCompras.findMany()
     * 
     * // Get first 10 StatusCompras
     * const statusCompras = await prisma.statusCompras.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusComprasWithIdOnly = await prisma.statusCompras.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends statusComprasFindManyArgs>(args?: SelectSubset<T, statusComprasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusCompras.
     * @param {statusComprasCreateArgs} args - Arguments to create a StatusCompras.
     * @example
     * // Create one StatusCompras
     * const StatusCompras = await prisma.statusCompras.create({
     *   data: {
     *     // ... data to create a StatusCompras
     *   }
     * })
     * 
     */
    create<T extends statusComprasCreateArgs>(args: SelectSubset<T, statusComprasCreateArgs<ExtArgs>>): Prisma__statusComprasClient<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusCompras.
     * @param {statusComprasCreateManyArgs} args - Arguments to create many StatusCompras.
     * @example
     * // Create many StatusCompras
     * const statusCompras = await prisma.statusCompras.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends statusComprasCreateManyArgs>(args?: SelectSubset<T, statusComprasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusCompras and returns the data saved in the database.
     * @param {statusComprasCreateManyAndReturnArgs} args - Arguments to create many StatusCompras.
     * @example
     * // Create many StatusCompras
     * const statusCompras = await prisma.statusCompras.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusCompras and only return the `id`
     * const statusComprasWithIdOnly = await prisma.statusCompras.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends statusComprasCreateManyAndReturnArgs>(args?: SelectSubset<T, statusComprasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusCompras.
     * @param {statusComprasDeleteArgs} args - Arguments to delete one StatusCompras.
     * @example
     * // Delete one StatusCompras
     * const StatusCompras = await prisma.statusCompras.delete({
     *   where: {
     *     // ... filter to delete one StatusCompras
     *   }
     * })
     * 
     */
    delete<T extends statusComprasDeleteArgs>(args: SelectSubset<T, statusComprasDeleteArgs<ExtArgs>>): Prisma__statusComprasClient<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusCompras.
     * @param {statusComprasUpdateArgs} args - Arguments to update one StatusCompras.
     * @example
     * // Update one StatusCompras
     * const statusCompras = await prisma.statusCompras.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends statusComprasUpdateArgs>(args: SelectSubset<T, statusComprasUpdateArgs<ExtArgs>>): Prisma__statusComprasClient<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusCompras.
     * @param {statusComprasDeleteManyArgs} args - Arguments to filter StatusCompras to delete.
     * @example
     * // Delete a few StatusCompras
     * const { count } = await prisma.statusCompras.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends statusComprasDeleteManyArgs>(args?: SelectSubset<T, statusComprasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusComprasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusCompras
     * const statusCompras = await prisma.statusCompras.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends statusComprasUpdateManyArgs>(args: SelectSubset<T, statusComprasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusCompras and returns the data updated in the database.
     * @param {statusComprasUpdateManyAndReturnArgs} args - Arguments to update many StatusCompras.
     * @example
     * // Update many StatusCompras
     * const statusCompras = await prisma.statusCompras.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusCompras and only return the `id`
     * const statusComprasWithIdOnly = await prisma.statusCompras.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends statusComprasUpdateManyAndReturnArgs>(args: SelectSubset<T, statusComprasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusCompras.
     * @param {statusComprasUpsertArgs} args - Arguments to update or create a StatusCompras.
     * @example
     * // Update or create a StatusCompras
     * const statusCompras = await prisma.statusCompras.upsert({
     *   create: {
     *     // ... data to create a StatusCompras
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusCompras we want to update
     *   }
     * })
     */
    upsert<T extends statusComprasUpsertArgs>(args: SelectSubset<T, statusComprasUpsertArgs<ExtArgs>>): Prisma__statusComprasClient<$Result.GetResult<Prisma.$statusComprasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusComprasCountArgs} args - Arguments to filter StatusCompras to count.
     * @example
     * // Count the number of StatusCompras
     * const count = await prisma.statusCompras.count({
     *   where: {
     *     // ... the filter for the StatusCompras we want to count
     *   }
     * })
    **/
    count<T extends statusComprasCountArgs>(
      args?: Subset<T, statusComprasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusComprasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusComprasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusComprasAggregateArgs>(args: Subset<T, StatusComprasAggregateArgs>): Prisma.PrismaPromise<GetStatusComprasAggregateType<T>>

    /**
     * Group by StatusCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusComprasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends statusComprasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: statusComprasGroupByArgs['orderBy'] }
        : { orderBy?: statusComprasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, statusComprasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusComprasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the statusCompras model
   */
  readonly fields: statusComprasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for statusCompras.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__statusComprasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    solicitacoesDeCompras<T extends statusCompras$solicitacoesDeComprasArgs<ExtArgs> = {}>(args?: Subset<T, statusCompras$solicitacoesDeComprasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$solicitacaoDeComprasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the statusCompras model
   */
  interface statusComprasFieldRefs {
    readonly id: FieldRef<"statusCompras", 'String'>
    readonly name: FieldRef<"statusCompras", 'String'>
    readonly create_at: FieldRef<"statusCompras", 'DateTime'>
    readonly updated_at: FieldRef<"statusCompras", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * statusCompras findUnique
   */
  export type statusComprasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    /**
     * Filter, which statusCompras to fetch.
     */
    where: statusComprasWhereUniqueInput
  }

  /**
   * statusCompras findUniqueOrThrow
   */
  export type statusComprasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    /**
     * Filter, which statusCompras to fetch.
     */
    where: statusComprasWhereUniqueInput
  }

  /**
   * statusCompras findFirst
   */
  export type statusComprasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    /**
     * Filter, which statusCompras to fetch.
     */
    where?: statusComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusCompras to fetch.
     */
    orderBy?: statusComprasOrderByWithRelationInput | statusComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusCompras.
     */
    cursor?: statusComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusCompras.
     */
    distinct?: StatusComprasScalarFieldEnum | StatusComprasScalarFieldEnum[]
  }

  /**
   * statusCompras findFirstOrThrow
   */
  export type statusComprasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    /**
     * Filter, which statusCompras to fetch.
     */
    where?: statusComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusCompras to fetch.
     */
    orderBy?: statusComprasOrderByWithRelationInput | statusComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusCompras.
     */
    cursor?: statusComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusCompras.
     */
    distinct?: StatusComprasScalarFieldEnum | StatusComprasScalarFieldEnum[]
  }

  /**
   * statusCompras findMany
   */
  export type statusComprasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    /**
     * Filter, which statusCompras to fetch.
     */
    where?: statusComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusCompras to fetch.
     */
    orderBy?: statusComprasOrderByWithRelationInput | statusComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statusCompras.
     */
    cursor?: statusComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusCompras.
     */
    skip?: number
    distinct?: StatusComprasScalarFieldEnum | StatusComprasScalarFieldEnum[]
  }

  /**
   * statusCompras create
   */
  export type statusComprasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    /**
     * The data needed to create a statusCompras.
     */
    data: XOR<statusComprasCreateInput, statusComprasUncheckedCreateInput>
  }

  /**
   * statusCompras createMany
   */
  export type statusComprasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many statusCompras.
     */
    data: statusComprasCreateManyInput | statusComprasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusCompras createManyAndReturn
   */
  export type statusComprasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * The data used to create many statusCompras.
     */
    data: statusComprasCreateManyInput | statusComprasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusCompras update
   */
  export type statusComprasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    /**
     * The data needed to update a statusCompras.
     */
    data: XOR<statusComprasUpdateInput, statusComprasUncheckedUpdateInput>
    /**
     * Choose, which statusCompras to update.
     */
    where: statusComprasWhereUniqueInput
  }

  /**
   * statusCompras updateMany
   */
  export type statusComprasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update statusCompras.
     */
    data: XOR<statusComprasUpdateManyMutationInput, statusComprasUncheckedUpdateManyInput>
    /**
     * Filter which statusCompras to update
     */
    where?: statusComprasWhereInput
    /**
     * Limit how many statusCompras to update.
     */
    limit?: number
  }

  /**
   * statusCompras updateManyAndReturn
   */
  export type statusComprasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * The data used to update statusCompras.
     */
    data: XOR<statusComprasUpdateManyMutationInput, statusComprasUncheckedUpdateManyInput>
    /**
     * Filter which statusCompras to update
     */
    where?: statusComprasWhereInput
    /**
     * Limit how many statusCompras to update.
     */
    limit?: number
  }

  /**
   * statusCompras upsert
   */
  export type statusComprasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    /**
     * The filter to search for the statusCompras to update in case it exists.
     */
    where: statusComprasWhereUniqueInput
    /**
     * In case the statusCompras found by the `where` argument doesn't exist, create a new statusCompras with this data.
     */
    create: XOR<statusComprasCreateInput, statusComprasUncheckedCreateInput>
    /**
     * In case the statusCompras was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusComprasUpdateInput, statusComprasUncheckedUpdateInput>
  }

  /**
   * statusCompras delete
   */
  export type statusComprasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
    /**
     * Filter which statusCompras to delete.
     */
    where: statusComprasWhereUniqueInput
  }

  /**
   * statusCompras deleteMany
   */
  export type statusComprasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusCompras to delete
     */
    where?: statusComprasWhereInput
    /**
     * Limit how many statusCompras to delete.
     */
    limit?: number
  }

  /**
   * statusCompras.solicitacoesDeCompras
   */
  export type statusCompras$solicitacoesDeComprasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the solicitacaoDeCompras
     */
    select?: solicitacaoDeComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the solicitacaoDeCompras
     */
    omit?: solicitacaoDeComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: solicitacaoDeComprasInclude<ExtArgs> | null
    where?: solicitacaoDeComprasWhereInput
    orderBy?: solicitacaoDeComprasOrderByWithRelationInput | solicitacaoDeComprasOrderByWithRelationInput[]
    cursor?: solicitacaoDeComprasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SolicitacaoDeComprasScalarFieldEnum | SolicitacaoDeComprasScalarFieldEnum[]
  }

  /**
   * statusCompras without action
   */
  export type statusComprasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusCompras
     */
    select?: statusComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusCompras
     */
    omit?: statusComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusComprasInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    create_at: 'create_at',
    updated_at: 'updated_at',
    cliente_id: 'cliente_id',
    setor_id: 'setor_id',
    instituicao_id: 'instituicao_id'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const SetorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type SetorScalarFieldEnum = (typeof SetorScalarFieldEnum)[keyof typeof SetorScalarFieldEnum]


  export const InstituicaoUnidadeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type InstituicaoUnidadeScalarFieldEnum = (typeof InstituicaoUnidadeScalarFieldEnum)[keyof typeof InstituicaoUnidadeScalarFieldEnum]


  export const StatusOrdemdeServicoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type StatusOrdemdeServicoScalarFieldEnum = (typeof StatusOrdemdeServicoScalarFieldEnum)[keyof typeof StatusOrdemdeServicoScalarFieldEnum]


  export const TipodeSolicitacaoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type TipodeSolicitacaoScalarFieldEnum = (typeof TipodeSolicitacaoScalarFieldEnum)[keyof typeof TipodeSolicitacaoScalarFieldEnum]


  export const TecnicoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type TecnicoScalarFieldEnum = (typeof TecnicoScalarFieldEnum)[keyof typeof TecnicoScalarFieldEnum]


  export const OrdemdeServicoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    problemaOuSolicitacao: 'problemaOuSolicitacao',
    created_at: 'created_at',
    update_at: 'update_at',
    cliente_id: 'cliente_id',
    tecnico_id: 'tecnico_id',
    statusOrdemdeServico_id: 'statusOrdemdeServico_id',
    tipodesolicitacao_id: 'tipodesolicitacao_id',
    instituicaoUnidade_id: 'instituicaoUnidade_id'
  };

  export type OrdemdeServicoScalarFieldEnum = (typeof OrdemdeServicoScalarFieldEnum)[keyof typeof OrdemdeServicoScalarFieldEnum]


  export const FormTecnicoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    diagnostico: 'diagnostico',
    solucao: 'solucao',
    assinatura: 'assinatura',
    status_id: 'status_id',
    statusOrdemdeServico_id: 'statusOrdemdeServico_id',
    ordemDeServico_id: 'ordemDeServico_id',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type FormTecnicoScalarFieldEnum = (typeof FormTecnicoScalarFieldEnum)[keyof typeof FormTecnicoScalarFieldEnum]


  export const EquipamentoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    patrimonio: 'patrimonio',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type EquipamentoScalarFieldEnum = (typeof EquipamentoScalarFieldEnum)[keyof typeof EquipamentoScalarFieldEnum]


  export const ControleDeAssistenciaTecnicaScalarFieldEnum: {
    id: 'id',
    name: 'name',
    mesAno: 'mesAno',
    idChamado: 'idChamado',
    assistencia: 'assistencia',
    observacoes: 'observacoes',
    osDaAssistencia: 'osDaAssistencia',
    dataDeRetirada: 'dataDeRetirada',
    equipamento_id: 'equipamento_id',
    statusReparo_id: 'statusReparo_id',
    statusTeste_id: 'statusTeste_id',
    instituicaoUnidade_id: 'instituicaoUnidade_id',
    tecnico_id: 'tecnico_id',
    cliente_id: 'cliente_id',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type ControleDeAssistenciaTecnicaScalarFieldEnum = (typeof ControleDeAssistenciaTecnicaScalarFieldEnum)[keyof typeof ControleDeAssistenciaTecnicaScalarFieldEnum]


  export const StatusReparoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type StatusReparoScalarFieldEnum = (typeof StatusReparoScalarFieldEnum)[keyof typeof StatusReparoScalarFieldEnum]


  export const StatusTesteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type StatusTesteScalarFieldEnum = (typeof StatusTesteScalarFieldEnum)[keyof typeof StatusTesteScalarFieldEnum]


  export const ControleDeLaudoTecnicoScalarFieldEnum: {
    id: 'id',
    descricaodoProblema: 'descricaodoProblema',
    mesAno: 'mesAno',
    osLab: 'osLab',
    instituicaoUnidade_id: 'instituicaoUnidade_id',
    equipamento_id: 'equipamento_id',
    tecnico_id: 'tecnico_id',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type ControleDeLaudoTecnicoScalarFieldEnum = (typeof ControleDeLaudoTecnicoScalarFieldEnum)[keyof typeof ControleDeLaudoTecnicoScalarFieldEnum]


  export const ControleDeLaboratioScalarFieldEnum: {
    id: 'id',
    nomedoEquipamento: 'nomedoEquipamento',
    marca: 'marca',
    defeito: 'defeito',
    osDeAbertura: 'osDeAbertura',
    osDeDevolucao: 'osDeDevolucao',
    data_de_Chegada: 'data_de_Chegada',
    data_de_Finalizacao: 'data_de_Finalizacao',
    statusControledeLaboratorio_id: 'statusControledeLaboratorio_id',
    instituicao_id: 'instituicao_id',
    cliente_id: 'cliente_id',
    equipamento_id: 'equipamento_id'
  };

  export type ControleDeLaboratioScalarFieldEnum = (typeof ControleDeLaboratioScalarFieldEnum)[keyof typeof ControleDeLaboratioScalarFieldEnum]


  export const StatusControledeLaboratorioScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type StatusControledeLaboratorioScalarFieldEnum = (typeof StatusControledeLaboratorioScalarFieldEnum)[keyof typeof StatusControledeLaboratorioScalarFieldEnum]


  export const ControleDeMaquinasPendentesLaboratorioScalarFieldEnum: {
    id: 'id',
    numeroDeSerie: 'numeroDeSerie',
    ssd: 'ssd',
    idDaOs: 'idDaOs',
    obs: 'obs',
    create_at: 'create_at',
    updated_at: 'updated_at',
    equipamento_id: 'equipamento_id',
    statusMaquinasPendentesLab_id: 'statusMaquinasPendentesLab_id'
  };

  export type ControleDeMaquinasPendentesLaboratorioScalarFieldEnum = (typeof ControleDeMaquinasPendentesLaboratorioScalarFieldEnum)[keyof typeof ControleDeMaquinasPendentesLaboratorioScalarFieldEnum]


  export const StatusMaquinasPendentesLabScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type StatusMaquinasPendentesLabScalarFieldEnum = (typeof StatusMaquinasPendentesLabScalarFieldEnum)[keyof typeof StatusMaquinasPendentesLabScalarFieldEnum]


  export const ControledeMaquinasPendentesOroScalarFieldEnum: {
    id: 'id',
    datadaInstalacao: 'datadaInstalacao',
    osInstalacao: 'osInstalacao',
    osRetirada: 'osRetirada',
    create_at: 'create_at',
    updated_at: 'updated_at',
    equipamento_id: 'equipamento_id',
    instituicaoUnidade_id: 'instituicaoUnidade_id',
    statusMaquinasPendentesOro_id: 'statusMaquinasPendentesOro_id'
  };

  export type ControledeMaquinasPendentesOroScalarFieldEnum = (typeof ControledeMaquinasPendentesOroScalarFieldEnum)[keyof typeof ControledeMaquinasPendentesOroScalarFieldEnum]


  export const StatusMaquinasPendentesOroScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type StatusMaquinasPendentesOroScalarFieldEnum = (typeof StatusMaquinasPendentesOroScalarFieldEnum)[keyof typeof StatusMaquinasPendentesOroScalarFieldEnum]


  export const DocumentacaoTecnicaScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    descricao: 'descricao',
    create_at: 'create_at',
    updated_at: 'updated_at',
    cliente_id: 'cliente_id',
    tecnico_id: 'tecnico_id',
    instituicao_id: 'instituicao_id'
  };

  export type DocumentacaoTecnicaScalarFieldEnum = (typeof DocumentacaoTecnicaScalarFieldEnum)[keyof typeof DocumentacaoTecnicaScalarFieldEnum]


  export const SolicitacaoDeComprasScalarFieldEnum: {
    id: 'id',
    itemSolicitado: 'itemSolicitado',
    solicitante: 'solicitante',
    motivoDaSolicitacao: 'motivoDaSolicitacao',
    preco: 'preco',
    linkDeCompra: 'linkDeCompra',
    create_at: 'create_at',
    updated_at: 'updated_at',
    statusCompras_id: 'statusCompras_id'
  };

  export type SolicitacaoDeComprasScalarFieldEnum = (typeof SolicitacaoDeComprasScalarFieldEnum)[keyof typeof SolicitacaoDeComprasScalarFieldEnum]


  export const StatusComprasScalarFieldEnum: {
    id: 'id',
    name: 'name',
    create_at: 'create_at',
    updated_at: 'updated_at'
  };

  export type StatusComprasScalarFieldEnum = (typeof StatusComprasScalarFieldEnum)[keyof typeof StatusComprasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    create_at?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    cliente_id?: StringNullableFilter<"User"> | string | null
    setor_id?: StringNullableFilter<"User"> | string | null
    instituicao_id?: StringNullableFilter<"User"> | string | null
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
    setor?: XOR<SetorNullableScalarRelationFilter, SetorWhereInput> | null
    instituicao?: XOR<InstituicaoUnidadeNullableScalarRelationFilter, InstituicaoUnidadeWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    cliente_id?: SortOrderInput | SortOrder
    setor_id?: SortOrderInput | SortOrder
    instituicao_id?: SortOrderInput | SortOrder
    cliente?: ClienteOrderByWithRelationInput
    setor?: SetorOrderByWithRelationInput
    instituicao?: InstituicaoUnidadeOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    create_at?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    cliente_id?: StringNullableFilter<"User"> | string | null
    setor_id?: StringNullableFilter<"User"> | string | null
    instituicao_id?: StringNullableFilter<"User"> | string | null
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
    setor?: XOR<SetorNullableScalarRelationFilter, SetorWhereInput> | null
    instituicao?: XOR<InstituicaoUnidadeNullableScalarRelationFilter, InstituicaoUnidadeWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    cliente_id?: SortOrderInput | SortOrder
    setor_id?: SortOrderInput | SortOrder
    instituicao_id?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    cliente_id?: StringNullableWithAggregatesFilter<"User"> | string | null
    setor_id?: StringNullableWithAggregatesFilter<"User"> | string | null
    instituicao_id?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: StringFilter<"Cliente"> | string
    name?: StringFilter<"Cliente"> | string
    create_at?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    users?: UserListRelationFilter
    ordensDeServico?: OrdemdeServicoListRelationFilter
    controlesdeAssistenciatecnica?: ControleDeAssistenciaTecnicaListRelationFilter
    controlesDeLaboratio?: ControleDeLaboratioListRelationFilter
    documentacoesTecnicas?: DocumentacaoTecnicaListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
    ordensDeServico?: OrdemdeServicoOrderByRelationAggregateInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaOrderByRelationAggregateInput
    controlesDeLaboratio?: controleDeLaboratioOrderByRelationAggregateInput
    documentacoesTecnicas?: documentacaoTecnicaOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    name?: StringFilter<"Cliente"> | string
    create_at?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    users?: UserListRelationFilter
    ordensDeServico?: OrdemdeServicoListRelationFilter
    controlesdeAssistenciatecnica?: ControleDeAssistenciaTecnicaListRelationFilter
    controlesDeLaboratio?: ControleDeLaboratioListRelationFilter
    documentacoesTecnicas?: DocumentacaoTecnicaListRelationFilter
  }, "id">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cliente"> | string
    name?: StringWithAggregatesFilter<"Cliente"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"Cliente"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Cliente"> | Date | string | null
  }

  export type SetorWhereInput = {
    AND?: SetorWhereInput | SetorWhereInput[]
    OR?: SetorWhereInput[]
    NOT?: SetorWhereInput | SetorWhereInput[]
    id?: StringFilter<"Setor"> | string
    name?: StringFilter<"Setor"> | string
    create_at?: DateTimeNullableFilter<"Setor"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Setor"> | Date | string | null
    users?: UserListRelationFilter
  }

  export type SetorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type SetorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SetorWhereInput | SetorWhereInput[]
    OR?: SetorWhereInput[]
    NOT?: SetorWhereInput | SetorWhereInput[]
    name?: StringFilter<"Setor"> | string
    create_at?: DateTimeNullableFilter<"Setor"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Setor"> | Date | string | null
    users?: UserListRelationFilter
  }, "id">

  export type SetorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: SetorCountOrderByAggregateInput
    _max?: SetorMaxOrderByAggregateInput
    _min?: SetorMinOrderByAggregateInput
  }

  export type SetorScalarWhereWithAggregatesInput = {
    AND?: SetorScalarWhereWithAggregatesInput | SetorScalarWhereWithAggregatesInput[]
    OR?: SetorScalarWhereWithAggregatesInput[]
    NOT?: SetorScalarWhereWithAggregatesInput | SetorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Setor"> | string
    name?: StringWithAggregatesFilter<"Setor"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"Setor"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Setor"> | Date | string | null
  }

  export type InstituicaoUnidadeWhereInput = {
    AND?: InstituicaoUnidadeWhereInput | InstituicaoUnidadeWhereInput[]
    OR?: InstituicaoUnidadeWhereInput[]
    NOT?: InstituicaoUnidadeWhereInput | InstituicaoUnidadeWhereInput[]
    id?: StringFilter<"InstituicaoUnidade"> | string
    name?: StringFilter<"InstituicaoUnidade"> | string
    create_at?: DateTimeNullableFilter<"InstituicaoUnidade"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"InstituicaoUnidade"> | Date | string | null
    users?: UserListRelationFilter
    ordens?: OrdemdeServicoListRelationFilter
    controlesdeAssistenciaTecnica?: ControleDeAssistenciaTecnicaListRelationFilter
    controlesdeLaudoTecnico?: ControleDeLaudoTecnicoListRelationFilter
    controlesDeLaboratio?: ControleDeLaboratioListRelationFilter
    controlesDeMaquinasPendentesOro?: ControledeMaquinasPendentesOroListRelationFilter
    documentacoesTecnicas?: DocumentacaoTecnicaListRelationFilter
  }

  export type InstituicaoUnidadeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
    ordens?: OrdemdeServicoOrderByRelationAggregateInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaOrderByRelationAggregateInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoOrderByRelationAggregateInput
    controlesDeLaboratio?: controleDeLaboratioOrderByRelationAggregateInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroOrderByRelationAggregateInput
    documentacoesTecnicas?: documentacaoTecnicaOrderByRelationAggregateInput
  }

  export type InstituicaoUnidadeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InstituicaoUnidadeWhereInput | InstituicaoUnidadeWhereInput[]
    OR?: InstituicaoUnidadeWhereInput[]
    NOT?: InstituicaoUnidadeWhereInput | InstituicaoUnidadeWhereInput[]
    name?: StringFilter<"InstituicaoUnidade"> | string
    create_at?: DateTimeNullableFilter<"InstituicaoUnidade"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"InstituicaoUnidade"> | Date | string | null
    users?: UserListRelationFilter
    ordens?: OrdemdeServicoListRelationFilter
    controlesdeAssistenciaTecnica?: ControleDeAssistenciaTecnicaListRelationFilter
    controlesdeLaudoTecnico?: ControleDeLaudoTecnicoListRelationFilter
    controlesDeLaboratio?: ControleDeLaboratioListRelationFilter
    controlesDeMaquinasPendentesOro?: ControledeMaquinasPendentesOroListRelationFilter
    documentacoesTecnicas?: DocumentacaoTecnicaListRelationFilter
  }, "id">

  export type InstituicaoUnidadeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: InstituicaoUnidadeCountOrderByAggregateInput
    _max?: InstituicaoUnidadeMaxOrderByAggregateInput
    _min?: InstituicaoUnidadeMinOrderByAggregateInput
  }

  export type InstituicaoUnidadeScalarWhereWithAggregatesInput = {
    AND?: InstituicaoUnidadeScalarWhereWithAggregatesInput | InstituicaoUnidadeScalarWhereWithAggregatesInput[]
    OR?: InstituicaoUnidadeScalarWhereWithAggregatesInput[]
    NOT?: InstituicaoUnidadeScalarWhereWithAggregatesInput | InstituicaoUnidadeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InstituicaoUnidade"> | string
    name?: StringWithAggregatesFilter<"InstituicaoUnidade"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"InstituicaoUnidade"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"InstituicaoUnidade"> | Date | string | null
  }

  export type statusOrdemdeServicoWhereInput = {
    AND?: statusOrdemdeServicoWhereInput | statusOrdemdeServicoWhereInput[]
    OR?: statusOrdemdeServicoWhereInput[]
    NOT?: statusOrdemdeServicoWhereInput | statusOrdemdeServicoWhereInput[]
    id?: StringFilter<"statusOrdemdeServico"> | string
    name?: StringFilter<"statusOrdemdeServico"> | string
    create_at?: DateTimeNullableFilter<"statusOrdemdeServico"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusOrdemdeServico"> | Date | string | null
    ordens?: OrdemdeServicoListRelationFilter
    formstecnico?: FormTecnicoListRelationFilter
  }

  export type statusOrdemdeServicoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    ordens?: OrdemdeServicoOrderByRelationAggregateInput
    formstecnico?: FormTecnicoOrderByRelationAggregateInput
  }

  export type statusOrdemdeServicoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: statusOrdemdeServicoWhereInput | statusOrdemdeServicoWhereInput[]
    OR?: statusOrdemdeServicoWhereInput[]
    NOT?: statusOrdemdeServicoWhereInput | statusOrdemdeServicoWhereInput[]
    name?: StringFilter<"statusOrdemdeServico"> | string
    create_at?: DateTimeNullableFilter<"statusOrdemdeServico"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusOrdemdeServico"> | Date | string | null
    ordens?: OrdemdeServicoListRelationFilter
    formstecnico?: FormTecnicoListRelationFilter
  }, "id">

  export type statusOrdemdeServicoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: statusOrdemdeServicoCountOrderByAggregateInput
    _max?: statusOrdemdeServicoMaxOrderByAggregateInput
    _min?: statusOrdemdeServicoMinOrderByAggregateInput
  }

  export type statusOrdemdeServicoScalarWhereWithAggregatesInput = {
    AND?: statusOrdemdeServicoScalarWhereWithAggregatesInput | statusOrdemdeServicoScalarWhereWithAggregatesInput[]
    OR?: statusOrdemdeServicoScalarWhereWithAggregatesInput[]
    NOT?: statusOrdemdeServicoScalarWhereWithAggregatesInput | statusOrdemdeServicoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"statusOrdemdeServico"> | string
    name?: StringWithAggregatesFilter<"statusOrdemdeServico"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"statusOrdemdeServico"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"statusOrdemdeServico"> | Date | string | null
  }

  export type TipodeSolicitacaoWhereInput = {
    AND?: TipodeSolicitacaoWhereInput | TipodeSolicitacaoWhereInput[]
    OR?: TipodeSolicitacaoWhereInput[]
    NOT?: TipodeSolicitacaoWhereInput | TipodeSolicitacaoWhereInput[]
    id?: StringFilter<"TipodeSolicitacao"> | string
    name?: StringFilter<"TipodeSolicitacao"> | string
    create_at?: DateTimeNullableFilter<"TipodeSolicitacao"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"TipodeSolicitacao"> | Date | string | null
    ordens?: OrdemdeServicoListRelationFilter
  }

  export type TipodeSolicitacaoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    ordens?: OrdemdeServicoOrderByRelationAggregateInput
  }

  export type TipodeSolicitacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TipodeSolicitacaoWhereInput | TipodeSolicitacaoWhereInput[]
    OR?: TipodeSolicitacaoWhereInput[]
    NOT?: TipodeSolicitacaoWhereInput | TipodeSolicitacaoWhereInput[]
    name?: StringFilter<"TipodeSolicitacao"> | string
    create_at?: DateTimeNullableFilter<"TipodeSolicitacao"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"TipodeSolicitacao"> | Date | string | null
    ordens?: OrdemdeServicoListRelationFilter
  }, "id">

  export type TipodeSolicitacaoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: TipodeSolicitacaoCountOrderByAggregateInput
    _max?: TipodeSolicitacaoMaxOrderByAggregateInput
    _min?: TipodeSolicitacaoMinOrderByAggregateInput
  }

  export type TipodeSolicitacaoScalarWhereWithAggregatesInput = {
    AND?: TipodeSolicitacaoScalarWhereWithAggregatesInput | TipodeSolicitacaoScalarWhereWithAggregatesInput[]
    OR?: TipodeSolicitacaoScalarWhereWithAggregatesInput[]
    NOT?: TipodeSolicitacaoScalarWhereWithAggregatesInput | TipodeSolicitacaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TipodeSolicitacao"> | string
    name?: StringWithAggregatesFilter<"TipodeSolicitacao"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"TipodeSolicitacao"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"TipodeSolicitacao"> | Date | string | null
  }

  export type TecnicoWhereInput = {
    AND?: TecnicoWhereInput | TecnicoWhereInput[]
    OR?: TecnicoWhereInput[]
    NOT?: TecnicoWhereInput | TecnicoWhereInput[]
    id?: StringFilter<"Tecnico"> | string
    name?: StringFilter<"Tecnico"> | string
    create_at?: DateTimeNullableFilter<"Tecnico"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Tecnico"> | Date | string | null
    ordens?: OrdemdeServicoListRelationFilter
    controlesdeAssistenciatecnica?: ControleDeAssistenciaTecnicaListRelationFilter
    controlesdeLaudoTecnico?: ControleDeLaudoTecnicoListRelationFilter
    documentacoesTecnicas?: DocumentacaoTecnicaListRelationFilter
  }

  export type TecnicoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    ordens?: OrdemdeServicoOrderByRelationAggregateInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaOrderByRelationAggregateInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoOrderByRelationAggregateInput
    documentacoesTecnicas?: documentacaoTecnicaOrderByRelationAggregateInput
  }

  export type TecnicoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TecnicoWhereInput | TecnicoWhereInput[]
    OR?: TecnicoWhereInput[]
    NOT?: TecnicoWhereInput | TecnicoWhereInput[]
    name?: StringFilter<"Tecnico"> | string
    create_at?: DateTimeNullableFilter<"Tecnico"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Tecnico"> | Date | string | null
    ordens?: OrdemdeServicoListRelationFilter
    controlesdeAssistenciatecnica?: ControleDeAssistenciaTecnicaListRelationFilter
    controlesdeLaudoTecnico?: ControleDeLaudoTecnicoListRelationFilter
    documentacoesTecnicas?: DocumentacaoTecnicaListRelationFilter
  }, "id">

  export type TecnicoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: TecnicoCountOrderByAggregateInput
    _max?: TecnicoMaxOrderByAggregateInput
    _min?: TecnicoMinOrderByAggregateInput
  }

  export type TecnicoScalarWhereWithAggregatesInput = {
    AND?: TecnicoScalarWhereWithAggregatesInput | TecnicoScalarWhereWithAggregatesInput[]
    OR?: TecnicoScalarWhereWithAggregatesInput[]
    NOT?: TecnicoScalarWhereWithAggregatesInput | TecnicoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tecnico"> | string
    name?: StringWithAggregatesFilter<"Tecnico"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"Tecnico"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Tecnico"> | Date | string | null
  }

  export type OrdemdeServicoWhereInput = {
    AND?: OrdemdeServicoWhereInput | OrdemdeServicoWhereInput[]
    OR?: OrdemdeServicoWhereInput[]
    NOT?: OrdemdeServicoWhereInput | OrdemdeServicoWhereInput[]
    id?: StringFilter<"OrdemdeServico"> | string
    name?: StringFilter<"OrdemdeServico"> | string
    problemaOuSolicitacao?: StringFilter<"OrdemdeServico"> | string
    created_at?: DateTimeNullableFilter<"OrdemdeServico"> | Date | string | null
    update_at?: DateTimeNullableFilter<"OrdemdeServico"> | Date | string | null
    cliente_id?: StringNullableFilter<"OrdemdeServico"> | string | null
    tecnico_id?: StringFilter<"OrdemdeServico"> | string
    statusOrdemdeServico_id?: StringFilter<"OrdemdeServico"> | string
    tipodesolicitacao_id?: StringFilter<"OrdemdeServico"> | string
    instituicaoUnidade_id?: StringFilter<"OrdemdeServico"> | string
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
    tecnico?: XOR<TecnicoScalarRelationFilter, TecnicoWhereInput>
    statusOrdemdeServico?: XOR<StatusOrdemdeServicoScalarRelationFilter, statusOrdemdeServicoWhereInput>
    tipodesolicitacao?: XOR<TipodeSolicitacaoScalarRelationFilter, TipodeSolicitacaoWhereInput>
    instituicaoUnidade?: XOR<InstituicaoUnidadeScalarRelationFilter, InstituicaoUnidadeWhereInput>
    formtecnico?: XOR<FormTecnicoNullableScalarRelationFilter, FormTecnicoWhereInput> | null
  }

  export type OrdemdeServicoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    problemaOuSolicitacao?: SortOrder
    created_at?: SortOrderInput | SortOrder
    update_at?: SortOrderInput | SortOrder
    cliente_id?: SortOrderInput | SortOrder
    tecnico_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    tipodesolicitacao_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    tecnico?: TecnicoOrderByWithRelationInput
    statusOrdemdeServico?: statusOrdemdeServicoOrderByWithRelationInput
    tipodesolicitacao?: TipodeSolicitacaoOrderByWithRelationInput
    instituicaoUnidade?: InstituicaoUnidadeOrderByWithRelationInput
    formtecnico?: FormTecnicoOrderByWithRelationInput
  }

  export type OrdemdeServicoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrdemdeServicoWhereInput | OrdemdeServicoWhereInput[]
    OR?: OrdemdeServicoWhereInput[]
    NOT?: OrdemdeServicoWhereInput | OrdemdeServicoWhereInput[]
    name?: StringFilter<"OrdemdeServico"> | string
    problemaOuSolicitacao?: StringFilter<"OrdemdeServico"> | string
    created_at?: DateTimeNullableFilter<"OrdemdeServico"> | Date | string | null
    update_at?: DateTimeNullableFilter<"OrdemdeServico"> | Date | string | null
    cliente_id?: StringNullableFilter<"OrdemdeServico"> | string | null
    tecnico_id?: StringFilter<"OrdemdeServico"> | string
    statusOrdemdeServico_id?: StringFilter<"OrdemdeServico"> | string
    tipodesolicitacao_id?: StringFilter<"OrdemdeServico"> | string
    instituicaoUnidade_id?: StringFilter<"OrdemdeServico"> | string
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
    tecnico?: XOR<TecnicoScalarRelationFilter, TecnicoWhereInput>
    statusOrdemdeServico?: XOR<StatusOrdemdeServicoScalarRelationFilter, statusOrdemdeServicoWhereInput>
    tipodesolicitacao?: XOR<TipodeSolicitacaoScalarRelationFilter, TipodeSolicitacaoWhereInput>
    instituicaoUnidade?: XOR<InstituicaoUnidadeScalarRelationFilter, InstituicaoUnidadeWhereInput>
    formtecnico?: XOR<FormTecnicoNullableScalarRelationFilter, FormTecnicoWhereInput> | null
  }, "id">

  export type OrdemdeServicoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    problemaOuSolicitacao?: SortOrder
    created_at?: SortOrderInput | SortOrder
    update_at?: SortOrderInput | SortOrder
    cliente_id?: SortOrderInput | SortOrder
    tecnico_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    tipodesolicitacao_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    _count?: OrdemdeServicoCountOrderByAggregateInput
    _max?: OrdemdeServicoMaxOrderByAggregateInput
    _min?: OrdemdeServicoMinOrderByAggregateInput
  }

  export type OrdemdeServicoScalarWhereWithAggregatesInput = {
    AND?: OrdemdeServicoScalarWhereWithAggregatesInput | OrdemdeServicoScalarWhereWithAggregatesInput[]
    OR?: OrdemdeServicoScalarWhereWithAggregatesInput[]
    NOT?: OrdemdeServicoScalarWhereWithAggregatesInput | OrdemdeServicoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrdemdeServico"> | string
    name?: StringWithAggregatesFilter<"OrdemdeServico"> | string
    problemaOuSolicitacao?: StringWithAggregatesFilter<"OrdemdeServico"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"OrdemdeServico"> | Date | string | null
    update_at?: DateTimeNullableWithAggregatesFilter<"OrdemdeServico"> | Date | string | null
    cliente_id?: StringNullableWithAggregatesFilter<"OrdemdeServico"> | string | null
    tecnico_id?: StringWithAggregatesFilter<"OrdemdeServico"> | string
    statusOrdemdeServico_id?: StringWithAggregatesFilter<"OrdemdeServico"> | string
    tipodesolicitacao_id?: StringWithAggregatesFilter<"OrdemdeServico"> | string
    instituicaoUnidade_id?: StringWithAggregatesFilter<"OrdemdeServico"> | string
  }

  export type FormTecnicoWhereInput = {
    AND?: FormTecnicoWhereInput | FormTecnicoWhereInput[]
    OR?: FormTecnicoWhereInput[]
    NOT?: FormTecnicoWhereInput | FormTecnicoWhereInput[]
    id?: StringFilter<"FormTecnico"> | string
    name?: StringFilter<"FormTecnico"> | string
    diagnostico?: StringFilter<"FormTecnico"> | string
    solucao?: StringFilter<"FormTecnico"> | string
    assinatura?: StringFilter<"FormTecnico"> | string
    status_id?: StringFilter<"FormTecnico"> | string
    statusOrdemdeServico_id?: StringFilter<"FormTecnico"> | string
    ordemDeServico_id?: StringFilter<"FormTecnico"> | string
    created_at?: DateTimeNullableFilter<"FormTecnico"> | Date | string | null
    update_at?: DateTimeNullableFilter<"FormTecnico"> | Date | string | null
    statusOrdemdeServico?: XOR<StatusOrdemdeServicoScalarRelationFilter, statusOrdemdeServicoWhereInput>
    ordemDeServico?: XOR<OrdemdeServicoScalarRelationFilter, OrdemdeServicoWhereInput>
  }

  export type FormTecnicoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    diagnostico?: SortOrder
    solucao?: SortOrder
    assinatura?: SortOrder
    status_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    ordemDeServico_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    update_at?: SortOrderInput | SortOrder
    statusOrdemdeServico?: statusOrdemdeServicoOrderByWithRelationInput
    ordemDeServico?: OrdemdeServicoOrderByWithRelationInput
  }

  export type FormTecnicoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    ordemDeServico_id?: string
    AND?: FormTecnicoWhereInput | FormTecnicoWhereInput[]
    OR?: FormTecnicoWhereInput[]
    NOT?: FormTecnicoWhereInput | FormTecnicoWhereInput[]
    name?: StringFilter<"FormTecnico"> | string
    diagnostico?: StringFilter<"FormTecnico"> | string
    solucao?: StringFilter<"FormTecnico"> | string
    assinatura?: StringFilter<"FormTecnico"> | string
    status_id?: StringFilter<"FormTecnico"> | string
    statusOrdemdeServico_id?: StringFilter<"FormTecnico"> | string
    created_at?: DateTimeNullableFilter<"FormTecnico"> | Date | string | null
    update_at?: DateTimeNullableFilter<"FormTecnico"> | Date | string | null
    statusOrdemdeServico?: XOR<StatusOrdemdeServicoScalarRelationFilter, statusOrdemdeServicoWhereInput>
    ordemDeServico?: XOR<OrdemdeServicoScalarRelationFilter, OrdemdeServicoWhereInput>
  }, "id" | "ordemDeServico_id">

  export type FormTecnicoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    diagnostico?: SortOrder
    solucao?: SortOrder
    assinatura?: SortOrder
    status_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    ordemDeServico_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: FormTecnicoCountOrderByAggregateInput
    _max?: FormTecnicoMaxOrderByAggregateInput
    _min?: FormTecnicoMinOrderByAggregateInput
  }

  export type FormTecnicoScalarWhereWithAggregatesInput = {
    AND?: FormTecnicoScalarWhereWithAggregatesInput | FormTecnicoScalarWhereWithAggregatesInput[]
    OR?: FormTecnicoScalarWhereWithAggregatesInput[]
    NOT?: FormTecnicoScalarWhereWithAggregatesInput | FormTecnicoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FormTecnico"> | string
    name?: StringWithAggregatesFilter<"FormTecnico"> | string
    diagnostico?: StringWithAggregatesFilter<"FormTecnico"> | string
    solucao?: StringWithAggregatesFilter<"FormTecnico"> | string
    assinatura?: StringWithAggregatesFilter<"FormTecnico"> | string
    status_id?: StringWithAggregatesFilter<"FormTecnico"> | string
    statusOrdemdeServico_id?: StringWithAggregatesFilter<"FormTecnico"> | string
    ordemDeServico_id?: StringWithAggregatesFilter<"FormTecnico"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"FormTecnico"> | Date | string | null
    update_at?: DateTimeNullableWithAggregatesFilter<"FormTecnico"> | Date | string | null
  }

  export type EquipamentoWhereInput = {
    AND?: EquipamentoWhereInput | EquipamentoWhereInput[]
    OR?: EquipamentoWhereInput[]
    NOT?: EquipamentoWhereInput | EquipamentoWhereInput[]
    id?: StringFilter<"Equipamento"> | string
    name?: StringFilter<"Equipamento"> | string
    patrimonio?: StringFilter<"Equipamento"> | string
    create_at?: DateTimeNullableFilter<"Equipamento"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Equipamento"> | Date | string | null
    controlesDeAssistencia?: ControleDeAssistenciaTecnicaListRelationFilter
    controlesdeLaudoTecnico?: ControleDeLaudoTecnicoListRelationFilter
    controlesDeLaboratio?: ControleDeLaboratioListRelationFilter
    controlesDeMaquinasPendentesLaboratorio?: ControleDeMaquinasPendentesLaboratorioListRelationFilter
    controlesDeMaquinasPendentesOro?: ControledeMaquinasPendentesOroListRelationFilter
  }

  export type EquipamentoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    patrimonio?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    controlesDeAssistencia?: controleDeAssistenciaTecnicaOrderByRelationAggregateInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoOrderByRelationAggregateInput
    controlesDeLaboratio?: controleDeLaboratioOrderByRelationAggregateInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioOrderByRelationAggregateInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroOrderByRelationAggregateInput
  }

  export type EquipamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EquipamentoWhereInput | EquipamentoWhereInput[]
    OR?: EquipamentoWhereInput[]
    NOT?: EquipamentoWhereInput | EquipamentoWhereInput[]
    name?: StringFilter<"Equipamento"> | string
    patrimonio?: StringFilter<"Equipamento"> | string
    create_at?: DateTimeNullableFilter<"Equipamento"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Equipamento"> | Date | string | null
    controlesDeAssistencia?: ControleDeAssistenciaTecnicaListRelationFilter
    controlesdeLaudoTecnico?: ControleDeLaudoTecnicoListRelationFilter
    controlesDeLaboratio?: ControleDeLaboratioListRelationFilter
    controlesDeMaquinasPendentesLaboratorio?: ControleDeMaquinasPendentesLaboratorioListRelationFilter
    controlesDeMaquinasPendentesOro?: ControledeMaquinasPendentesOroListRelationFilter
  }, "id">

  export type EquipamentoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    patrimonio?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: EquipamentoCountOrderByAggregateInput
    _max?: EquipamentoMaxOrderByAggregateInput
    _min?: EquipamentoMinOrderByAggregateInput
  }

  export type EquipamentoScalarWhereWithAggregatesInput = {
    AND?: EquipamentoScalarWhereWithAggregatesInput | EquipamentoScalarWhereWithAggregatesInput[]
    OR?: EquipamentoScalarWhereWithAggregatesInput[]
    NOT?: EquipamentoScalarWhereWithAggregatesInput | EquipamentoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Equipamento"> | string
    name?: StringWithAggregatesFilter<"Equipamento"> | string
    patrimonio?: StringWithAggregatesFilter<"Equipamento"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"Equipamento"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Equipamento"> | Date | string | null
  }

  export type controleDeAssistenciaTecnicaWhereInput = {
    AND?: controleDeAssistenciaTecnicaWhereInput | controleDeAssistenciaTecnicaWhereInput[]
    OR?: controleDeAssistenciaTecnicaWhereInput[]
    NOT?: controleDeAssistenciaTecnicaWhereInput | controleDeAssistenciaTecnicaWhereInput[]
    id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    name?: StringFilter<"controleDeAssistenciaTecnica"> | string
    mesAno?: DateTimeFilter<"controleDeAssistenciaTecnica"> | Date | string
    idChamado?: StringFilter<"controleDeAssistenciaTecnica"> | string
    assistencia?: StringFilter<"controleDeAssistenciaTecnica"> | string
    observacoes?: StringFilter<"controleDeAssistenciaTecnica"> | string
    osDaAssistencia?: StringFilter<"controleDeAssistenciaTecnica"> | string
    dataDeRetirada?: DateTimeFilter<"controleDeAssistenciaTecnica"> | Date | string
    equipamento_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    statusReparo_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    statusTeste_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    instituicaoUnidade_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    tecnico_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    cliente_id?: StringNullableFilter<"controleDeAssistenciaTecnica"> | string | null
    create_at?: DateTimeNullableFilter<"controleDeAssistenciaTecnica"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controleDeAssistenciaTecnica"> | Date | string | null
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    statusReparo?: XOR<StatusReparoScalarRelationFilter, statusReparoWhereInput>
    statusTeste?: XOR<StatusTesteScalarRelationFilter, StatusTesteWhereInput>
    instituicaoUnidade?: XOR<InstituicaoUnidadeScalarRelationFilter, InstituicaoUnidadeWhereInput>
    tecnico?: XOR<TecnicoScalarRelationFilter, TecnicoWhereInput>
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
  }

  export type controleDeAssistenciaTecnicaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    mesAno?: SortOrder
    idChamado?: SortOrder
    assistencia?: SortOrder
    observacoes?: SortOrder
    osDaAssistencia?: SortOrder
    dataDeRetirada?: SortOrder
    equipamento_id?: SortOrder
    statusReparo_id?: SortOrder
    statusTeste_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    tecnico_id?: SortOrder
    cliente_id?: SortOrderInput | SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    equipamento?: EquipamentoOrderByWithRelationInput
    statusReparo?: statusReparoOrderByWithRelationInput
    statusTeste?: StatusTesteOrderByWithRelationInput
    instituicaoUnidade?: InstituicaoUnidadeOrderByWithRelationInput
    tecnico?: TecnicoOrderByWithRelationInput
    cliente?: ClienteOrderByWithRelationInput
  }

  export type controleDeAssistenciaTecnicaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: controleDeAssistenciaTecnicaWhereInput | controleDeAssistenciaTecnicaWhereInput[]
    OR?: controleDeAssistenciaTecnicaWhereInput[]
    NOT?: controleDeAssistenciaTecnicaWhereInput | controleDeAssistenciaTecnicaWhereInput[]
    name?: StringFilter<"controleDeAssistenciaTecnica"> | string
    mesAno?: DateTimeFilter<"controleDeAssistenciaTecnica"> | Date | string
    idChamado?: StringFilter<"controleDeAssistenciaTecnica"> | string
    assistencia?: StringFilter<"controleDeAssistenciaTecnica"> | string
    observacoes?: StringFilter<"controleDeAssistenciaTecnica"> | string
    osDaAssistencia?: StringFilter<"controleDeAssistenciaTecnica"> | string
    dataDeRetirada?: DateTimeFilter<"controleDeAssistenciaTecnica"> | Date | string
    equipamento_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    statusReparo_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    statusTeste_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    instituicaoUnidade_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    tecnico_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    cliente_id?: StringNullableFilter<"controleDeAssistenciaTecnica"> | string | null
    create_at?: DateTimeNullableFilter<"controleDeAssistenciaTecnica"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controleDeAssistenciaTecnica"> | Date | string | null
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    statusReparo?: XOR<StatusReparoScalarRelationFilter, statusReparoWhereInput>
    statusTeste?: XOR<StatusTesteScalarRelationFilter, StatusTesteWhereInput>
    instituicaoUnidade?: XOR<InstituicaoUnidadeScalarRelationFilter, InstituicaoUnidadeWhereInput>
    tecnico?: XOR<TecnicoScalarRelationFilter, TecnicoWhereInput>
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
  }, "id">

  export type controleDeAssistenciaTecnicaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    mesAno?: SortOrder
    idChamado?: SortOrder
    assistencia?: SortOrder
    observacoes?: SortOrder
    osDaAssistencia?: SortOrder
    dataDeRetirada?: SortOrder
    equipamento_id?: SortOrder
    statusReparo_id?: SortOrder
    statusTeste_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    tecnico_id?: SortOrder
    cliente_id?: SortOrderInput | SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: controleDeAssistenciaTecnicaCountOrderByAggregateInput
    _max?: controleDeAssistenciaTecnicaMaxOrderByAggregateInput
    _min?: controleDeAssistenciaTecnicaMinOrderByAggregateInput
  }

  export type controleDeAssistenciaTecnicaScalarWhereWithAggregatesInput = {
    AND?: controleDeAssistenciaTecnicaScalarWhereWithAggregatesInput | controleDeAssistenciaTecnicaScalarWhereWithAggregatesInput[]
    OR?: controleDeAssistenciaTecnicaScalarWhereWithAggregatesInput[]
    NOT?: controleDeAssistenciaTecnicaScalarWhereWithAggregatesInput | controleDeAssistenciaTecnicaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    name?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    mesAno?: DateTimeWithAggregatesFilter<"controleDeAssistenciaTecnica"> | Date | string
    idChamado?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    assistencia?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    observacoes?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    osDaAssistencia?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    dataDeRetirada?: DateTimeWithAggregatesFilter<"controleDeAssistenciaTecnica"> | Date | string
    equipamento_id?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    statusReparo_id?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    statusTeste_id?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    instituicaoUnidade_id?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    tecnico_id?: StringWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string
    cliente_id?: StringNullableWithAggregatesFilter<"controleDeAssistenciaTecnica"> | string | null
    create_at?: DateTimeNullableWithAggregatesFilter<"controleDeAssistenciaTecnica"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"controleDeAssistenciaTecnica"> | Date | string | null
  }

  export type statusReparoWhereInput = {
    AND?: statusReparoWhereInput | statusReparoWhereInput[]
    OR?: statusReparoWhereInput[]
    NOT?: statusReparoWhereInput | statusReparoWhereInput[]
    id?: StringFilter<"statusReparo"> | string
    name?: StringFilter<"statusReparo"> | string
    create_at?: DateTimeNullableFilter<"statusReparo"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusReparo"> | Date | string | null
    controleDeAssistenciaTecnica?: ControleDeAssistenciaTecnicaListRelationFilter
  }

  export type statusReparoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaOrderByRelationAggregateInput
  }

  export type statusReparoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: statusReparoWhereInput | statusReparoWhereInput[]
    OR?: statusReparoWhereInput[]
    NOT?: statusReparoWhereInput | statusReparoWhereInput[]
    name?: StringFilter<"statusReparo"> | string
    create_at?: DateTimeNullableFilter<"statusReparo"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusReparo"> | Date | string | null
    controleDeAssistenciaTecnica?: ControleDeAssistenciaTecnicaListRelationFilter
  }, "id">

  export type statusReparoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: statusReparoCountOrderByAggregateInput
    _max?: statusReparoMaxOrderByAggregateInput
    _min?: statusReparoMinOrderByAggregateInput
  }

  export type statusReparoScalarWhereWithAggregatesInput = {
    AND?: statusReparoScalarWhereWithAggregatesInput | statusReparoScalarWhereWithAggregatesInput[]
    OR?: statusReparoScalarWhereWithAggregatesInput[]
    NOT?: statusReparoScalarWhereWithAggregatesInput | statusReparoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"statusReparo"> | string
    name?: StringWithAggregatesFilter<"statusReparo"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"statusReparo"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"statusReparo"> | Date | string | null
  }

  export type StatusTesteWhereInput = {
    AND?: StatusTesteWhereInput | StatusTesteWhereInput[]
    OR?: StatusTesteWhereInput[]
    NOT?: StatusTesteWhereInput | StatusTesteWhereInput[]
    id?: StringFilter<"StatusTeste"> | string
    name?: StringFilter<"StatusTeste"> | string
    create_at?: DateTimeNullableFilter<"StatusTeste"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"StatusTeste"> | Date | string | null
    controleDeAssistenciaTecnica?: ControleDeAssistenciaTecnicaListRelationFilter
  }

  export type StatusTesteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaOrderByRelationAggregateInput
  }

  export type StatusTesteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StatusTesteWhereInput | StatusTesteWhereInput[]
    OR?: StatusTesteWhereInput[]
    NOT?: StatusTesteWhereInput | StatusTesteWhereInput[]
    name?: StringFilter<"StatusTeste"> | string
    create_at?: DateTimeNullableFilter<"StatusTeste"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"StatusTeste"> | Date | string | null
    controleDeAssistenciaTecnica?: ControleDeAssistenciaTecnicaListRelationFilter
  }, "id">

  export type StatusTesteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: StatusTesteCountOrderByAggregateInput
    _max?: StatusTesteMaxOrderByAggregateInput
    _min?: StatusTesteMinOrderByAggregateInput
  }

  export type StatusTesteScalarWhereWithAggregatesInput = {
    AND?: StatusTesteScalarWhereWithAggregatesInput | StatusTesteScalarWhereWithAggregatesInput[]
    OR?: StatusTesteScalarWhereWithAggregatesInput[]
    NOT?: StatusTesteScalarWhereWithAggregatesInput | StatusTesteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StatusTeste"> | string
    name?: StringWithAggregatesFilter<"StatusTeste"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"StatusTeste"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"StatusTeste"> | Date | string | null
  }

  export type controleDeLaudoTecnicoWhereInput = {
    AND?: controleDeLaudoTecnicoWhereInput | controleDeLaudoTecnicoWhereInput[]
    OR?: controleDeLaudoTecnicoWhereInput[]
    NOT?: controleDeLaudoTecnicoWhereInput | controleDeLaudoTecnicoWhereInput[]
    id?: StringFilter<"controleDeLaudoTecnico"> | string
    descricaodoProblema?: StringFilter<"controleDeLaudoTecnico"> | string
    mesAno?: DateTimeFilter<"controleDeLaudoTecnico"> | Date | string
    osLab?: StringFilter<"controleDeLaudoTecnico"> | string
    instituicaoUnidade_id?: StringFilter<"controleDeLaudoTecnico"> | string
    equipamento_id?: StringFilter<"controleDeLaudoTecnico"> | string
    tecnico_id?: StringFilter<"controleDeLaudoTecnico"> | string
    create_at?: DateTimeNullableFilter<"controleDeLaudoTecnico"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controleDeLaudoTecnico"> | Date | string | null
    instituicaoUnidade?: XOR<InstituicaoUnidadeScalarRelationFilter, InstituicaoUnidadeWhereInput>
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    tecnico?: XOR<TecnicoScalarRelationFilter, TecnicoWhereInput>
  }

  export type controleDeLaudoTecnicoOrderByWithRelationInput = {
    id?: SortOrder
    descricaodoProblema?: SortOrder
    mesAno?: SortOrder
    osLab?: SortOrder
    instituicaoUnidade_id?: SortOrder
    equipamento_id?: SortOrder
    tecnico_id?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    instituicaoUnidade?: InstituicaoUnidadeOrderByWithRelationInput
    equipamento?: EquipamentoOrderByWithRelationInput
    tecnico?: TecnicoOrderByWithRelationInput
  }

  export type controleDeLaudoTecnicoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: controleDeLaudoTecnicoWhereInput | controleDeLaudoTecnicoWhereInput[]
    OR?: controleDeLaudoTecnicoWhereInput[]
    NOT?: controleDeLaudoTecnicoWhereInput | controleDeLaudoTecnicoWhereInput[]
    descricaodoProblema?: StringFilter<"controleDeLaudoTecnico"> | string
    mesAno?: DateTimeFilter<"controleDeLaudoTecnico"> | Date | string
    osLab?: StringFilter<"controleDeLaudoTecnico"> | string
    instituicaoUnidade_id?: StringFilter<"controleDeLaudoTecnico"> | string
    equipamento_id?: StringFilter<"controleDeLaudoTecnico"> | string
    tecnico_id?: StringFilter<"controleDeLaudoTecnico"> | string
    create_at?: DateTimeNullableFilter<"controleDeLaudoTecnico"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controleDeLaudoTecnico"> | Date | string | null
    instituicaoUnidade?: XOR<InstituicaoUnidadeScalarRelationFilter, InstituicaoUnidadeWhereInput>
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    tecnico?: XOR<TecnicoScalarRelationFilter, TecnicoWhereInput>
  }, "id">

  export type controleDeLaudoTecnicoOrderByWithAggregationInput = {
    id?: SortOrder
    descricaodoProblema?: SortOrder
    mesAno?: SortOrder
    osLab?: SortOrder
    instituicaoUnidade_id?: SortOrder
    equipamento_id?: SortOrder
    tecnico_id?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: controleDeLaudoTecnicoCountOrderByAggregateInput
    _max?: controleDeLaudoTecnicoMaxOrderByAggregateInput
    _min?: controleDeLaudoTecnicoMinOrderByAggregateInput
  }

  export type controleDeLaudoTecnicoScalarWhereWithAggregatesInput = {
    AND?: controleDeLaudoTecnicoScalarWhereWithAggregatesInput | controleDeLaudoTecnicoScalarWhereWithAggregatesInput[]
    OR?: controleDeLaudoTecnicoScalarWhereWithAggregatesInput[]
    NOT?: controleDeLaudoTecnicoScalarWhereWithAggregatesInput | controleDeLaudoTecnicoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"controleDeLaudoTecnico"> | string
    descricaodoProblema?: StringWithAggregatesFilter<"controleDeLaudoTecnico"> | string
    mesAno?: DateTimeWithAggregatesFilter<"controleDeLaudoTecnico"> | Date | string
    osLab?: StringWithAggregatesFilter<"controleDeLaudoTecnico"> | string
    instituicaoUnidade_id?: StringWithAggregatesFilter<"controleDeLaudoTecnico"> | string
    equipamento_id?: StringWithAggregatesFilter<"controleDeLaudoTecnico"> | string
    tecnico_id?: StringWithAggregatesFilter<"controleDeLaudoTecnico"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"controleDeLaudoTecnico"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"controleDeLaudoTecnico"> | Date | string | null
  }

  export type controleDeLaboratioWhereInput = {
    AND?: controleDeLaboratioWhereInput | controleDeLaboratioWhereInput[]
    OR?: controleDeLaboratioWhereInput[]
    NOT?: controleDeLaboratioWhereInput | controleDeLaboratioWhereInput[]
    id?: StringFilter<"controleDeLaboratio"> | string
    nomedoEquipamento?: StringFilter<"controleDeLaboratio"> | string
    marca?: StringFilter<"controleDeLaboratio"> | string
    defeito?: StringFilter<"controleDeLaboratio"> | string
    osDeAbertura?: StringFilter<"controleDeLaboratio"> | string
    osDeDevolucao?: StringFilter<"controleDeLaboratio"> | string
    data_de_Chegada?: DateTimeFilter<"controleDeLaboratio"> | Date | string
    data_de_Finalizacao?: DateTimeFilter<"controleDeLaboratio"> | Date | string
    statusControledeLaboratorio_id?: StringFilter<"controleDeLaboratio"> | string
    instituicao_id?: StringFilter<"controleDeLaboratio"> | string
    cliente_id?: StringFilter<"controleDeLaboratio"> | string
    equipamento_id?: StringFilter<"controleDeLaboratio"> | string
    statusControledeLaboratorio?: XOR<StatusControledeLaboratorioScalarRelationFilter, statusControledeLaboratorioWhereInput>
    instituicao?: XOR<InstituicaoUnidadeNullableScalarRelationFilter, InstituicaoUnidadeWhereInput> | null
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
  }

  export type controleDeLaboratioOrderByWithRelationInput = {
    id?: SortOrder
    nomedoEquipamento?: SortOrder
    marca?: SortOrder
    defeito?: SortOrder
    osDeAbertura?: SortOrder
    osDeDevolucao?: SortOrder
    data_de_Chegada?: SortOrder
    data_de_Finalizacao?: SortOrder
    statusControledeLaboratorio_id?: SortOrder
    instituicao_id?: SortOrder
    cliente_id?: SortOrder
    equipamento_id?: SortOrder
    statusControledeLaboratorio?: statusControledeLaboratorioOrderByWithRelationInput
    instituicao?: InstituicaoUnidadeOrderByWithRelationInput
    cliente?: ClienteOrderByWithRelationInput
    equipamento?: EquipamentoOrderByWithRelationInput
  }

  export type controleDeLaboratioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: controleDeLaboratioWhereInput | controleDeLaboratioWhereInput[]
    OR?: controleDeLaboratioWhereInput[]
    NOT?: controleDeLaboratioWhereInput | controleDeLaboratioWhereInput[]
    nomedoEquipamento?: StringFilter<"controleDeLaboratio"> | string
    marca?: StringFilter<"controleDeLaboratio"> | string
    defeito?: StringFilter<"controleDeLaboratio"> | string
    osDeAbertura?: StringFilter<"controleDeLaboratio"> | string
    osDeDevolucao?: StringFilter<"controleDeLaboratio"> | string
    data_de_Chegada?: DateTimeFilter<"controleDeLaboratio"> | Date | string
    data_de_Finalizacao?: DateTimeFilter<"controleDeLaboratio"> | Date | string
    statusControledeLaboratorio_id?: StringFilter<"controleDeLaboratio"> | string
    instituicao_id?: StringFilter<"controleDeLaboratio"> | string
    cliente_id?: StringFilter<"controleDeLaboratio"> | string
    equipamento_id?: StringFilter<"controleDeLaboratio"> | string
    statusControledeLaboratorio?: XOR<StatusControledeLaboratorioScalarRelationFilter, statusControledeLaboratorioWhereInput>
    instituicao?: XOR<InstituicaoUnidadeNullableScalarRelationFilter, InstituicaoUnidadeWhereInput> | null
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
  }, "id">

  export type controleDeLaboratioOrderByWithAggregationInput = {
    id?: SortOrder
    nomedoEquipamento?: SortOrder
    marca?: SortOrder
    defeito?: SortOrder
    osDeAbertura?: SortOrder
    osDeDevolucao?: SortOrder
    data_de_Chegada?: SortOrder
    data_de_Finalizacao?: SortOrder
    statusControledeLaboratorio_id?: SortOrder
    instituicao_id?: SortOrder
    cliente_id?: SortOrder
    equipamento_id?: SortOrder
    _count?: controleDeLaboratioCountOrderByAggregateInput
    _max?: controleDeLaboratioMaxOrderByAggregateInput
    _min?: controleDeLaboratioMinOrderByAggregateInput
  }

  export type controleDeLaboratioScalarWhereWithAggregatesInput = {
    AND?: controleDeLaboratioScalarWhereWithAggregatesInput | controleDeLaboratioScalarWhereWithAggregatesInput[]
    OR?: controleDeLaboratioScalarWhereWithAggregatesInput[]
    NOT?: controleDeLaboratioScalarWhereWithAggregatesInput | controleDeLaboratioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
    nomedoEquipamento?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
    marca?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
    defeito?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
    osDeAbertura?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
    osDeDevolucao?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
    data_de_Chegada?: DateTimeWithAggregatesFilter<"controleDeLaboratio"> | Date | string
    data_de_Finalizacao?: DateTimeWithAggregatesFilter<"controleDeLaboratio"> | Date | string
    statusControledeLaboratorio_id?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
    instituicao_id?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
    cliente_id?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
    equipamento_id?: StringWithAggregatesFilter<"controleDeLaboratio"> | string
  }

  export type statusControledeLaboratorioWhereInput = {
    AND?: statusControledeLaboratorioWhereInput | statusControledeLaboratorioWhereInput[]
    OR?: statusControledeLaboratorioWhereInput[]
    NOT?: statusControledeLaboratorioWhereInput | statusControledeLaboratorioWhereInput[]
    id?: StringFilter<"statusControledeLaboratorio"> | string
    name?: StringFilter<"statusControledeLaboratorio"> | string
    create_at?: DateTimeNullableFilter<"statusControledeLaboratorio"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusControledeLaboratorio"> | Date | string | null
    controlesDeLaboratio?: ControleDeLaboratioListRelationFilter
  }

  export type statusControledeLaboratorioOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    controlesDeLaboratio?: controleDeLaboratioOrderByRelationAggregateInput
  }

  export type statusControledeLaboratorioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: statusControledeLaboratorioWhereInput | statusControledeLaboratorioWhereInput[]
    OR?: statusControledeLaboratorioWhereInput[]
    NOT?: statusControledeLaboratorioWhereInput | statusControledeLaboratorioWhereInput[]
    name?: StringFilter<"statusControledeLaboratorio"> | string
    create_at?: DateTimeNullableFilter<"statusControledeLaboratorio"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusControledeLaboratorio"> | Date | string | null
    controlesDeLaboratio?: ControleDeLaboratioListRelationFilter
  }, "id">

  export type statusControledeLaboratorioOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: statusControledeLaboratorioCountOrderByAggregateInput
    _max?: statusControledeLaboratorioMaxOrderByAggregateInput
    _min?: statusControledeLaboratorioMinOrderByAggregateInput
  }

  export type statusControledeLaboratorioScalarWhereWithAggregatesInput = {
    AND?: statusControledeLaboratorioScalarWhereWithAggregatesInput | statusControledeLaboratorioScalarWhereWithAggregatesInput[]
    OR?: statusControledeLaboratorioScalarWhereWithAggregatesInput[]
    NOT?: statusControledeLaboratorioScalarWhereWithAggregatesInput | statusControledeLaboratorioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"statusControledeLaboratorio"> | string
    name?: StringWithAggregatesFilter<"statusControledeLaboratorio"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"statusControledeLaboratorio"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"statusControledeLaboratorio"> | Date | string | null
  }

  export type controleDeMaquinasPendentesLaboratorioWhereInput = {
    AND?: controleDeMaquinasPendentesLaboratorioWhereInput | controleDeMaquinasPendentesLaboratorioWhereInput[]
    OR?: controleDeMaquinasPendentesLaboratorioWhereInput[]
    NOT?: controleDeMaquinasPendentesLaboratorioWhereInput | controleDeMaquinasPendentesLaboratorioWhereInput[]
    id?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    numeroDeSerie?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    ssd?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    idDaOs?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    obs?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    create_at?: DateTimeNullableFilter<"controleDeMaquinasPendentesLaboratorio"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controleDeMaquinasPendentesLaboratorio"> | Date | string | null
    equipamento_id?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    statusMaquinasPendentesLab_id?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    statusMaquinasPendentesLab?: XOR<StatusMaquinasPendentesLabScalarRelationFilter, statusMaquinasPendentesLabWhereInput>
  }

  export type controleDeMaquinasPendentesLaboratorioOrderByWithRelationInput = {
    id?: SortOrder
    numeroDeSerie?: SortOrder
    ssd?: SortOrder
    idDaOs?: SortOrder
    obs?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    equipamento_id?: SortOrder
    statusMaquinasPendentesLab_id?: SortOrder
    equipamento?: EquipamentoOrderByWithRelationInput
    statusMaquinasPendentesLab?: statusMaquinasPendentesLabOrderByWithRelationInput
  }

  export type controleDeMaquinasPendentesLaboratorioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: controleDeMaquinasPendentesLaboratorioWhereInput | controleDeMaquinasPendentesLaboratorioWhereInput[]
    OR?: controleDeMaquinasPendentesLaboratorioWhereInput[]
    NOT?: controleDeMaquinasPendentesLaboratorioWhereInput | controleDeMaquinasPendentesLaboratorioWhereInput[]
    numeroDeSerie?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    ssd?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    idDaOs?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    obs?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    create_at?: DateTimeNullableFilter<"controleDeMaquinasPendentesLaboratorio"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controleDeMaquinasPendentesLaboratorio"> | Date | string | null
    equipamento_id?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    statusMaquinasPendentesLab_id?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    statusMaquinasPendentesLab?: XOR<StatusMaquinasPendentesLabScalarRelationFilter, statusMaquinasPendentesLabWhereInput>
  }, "id">

  export type controleDeMaquinasPendentesLaboratorioOrderByWithAggregationInput = {
    id?: SortOrder
    numeroDeSerie?: SortOrder
    ssd?: SortOrder
    idDaOs?: SortOrder
    obs?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    equipamento_id?: SortOrder
    statusMaquinasPendentesLab_id?: SortOrder
    _count?: controleDeMaquinasPendentesLaboratorioCountOrderByAggregateInput
    _max?: controleDeMaquinasPendentesLaboratorioMaxOrderByAggregateInput
    _min?: controleDeMaquinasPendentesLaboratorioMinOrderByAggregateInput
  }

  export type controleDeMaquinasPendentesLaboratorioScalarWhereWithAggregatesInput = {
    AND?: controleDeMaquinasPendentesLaboratorioScalarWhereWithAggregatesInput | controleDeMaquinasPendentesLaboratorioScalarWhereWithAggregatesInput[]
    OR?: controleDeMaquinasPendentesLaboratorioScalarWhereWithAggregatesInput[]
    NOT?: controleDeMaquinasPendentesLaboratorioScalarWhereWithAggregatesInput | controleDeMaquinasPendentesLaboratorioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    numeroDeSerie?: StringWithAggregatesFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    ssd?: StringWithAggregatesFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    idDaOs?: StringWithAggregatesFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    obs?: StringWithAggregatesFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"controleDeMaquinasPendentesLaboratorio"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"controleDeMaquinasPendentesLaboratorio"> | Date | string | null
    equipamento_id?: StringWithAggregatesFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    statusMaquinasPendentesLab_id?: StringWithAggregatesFilter<"controleDeMaquinasPendentesLaboratorio"> | string
  }

  export type statusMaquinasPendentesLabWhereInput = {
    AND?: statusMaquinasPendentesLabWhereInput | statusMaquinasPendentesLabWhereInput[]
    OR?: statusMaquinasPendentesLabWhereInput[]
    NOT?: statusMaquinasPendentesLabWhereInput | statusMaquinasPendentesLabWhereInput[]
    id?: StringFilter<"statusMaquinasPendentesLab"> | string
    name?: StringFilter<"statusMaquinasPendentesLab"> | string
    create_at?: DateTimeNullableFilter<"statusMaquinasPendentesLab"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusMaquinasPendentesLab"> | Date | string | null
    controlesDeMaquinasPendentesLaboratorio?: ControleDeMaquinasPendentesLaboratorioListRelationFilter
  }

  export type statusMaquinasPendentesLabOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioOrderByRelationAggregateInput
  }

  export type statusMaquinasPendentesLabWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: statusMaquinasPendentesLabWhereInput | statusMaquinasPendentesLabWhereInput[]
    OR?: statusMaquinasPendentesLabWhereInput[]
    NOT?: statusMaquinasPendentesLabWhereInput | statusMaquinasPendentesLabWhereInput[]
    name?: StringFilter<"statusMaquinasPendentesLab"> | string
    create_at?: DateTimeNullableFilter<"statusMaquinasPendentesLab"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusMaquinasPendentesLab"> | Date | string | null
    controlesDeMaquinasPendentesLaboratorio?: ControleDeMaquinasPendentesLaboratorioListRelationFilter
  }, "id">

  export type statusMaquinasPendentesLabOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: statusMaquinasPendentesLabCountOrderByAggregateInput
    _max?: statusMaquinasPendentesLabMaxOrderByAggregateInput
    _min?: statusMaquinasPendentesLabMinOrderByAggregateInput
  }

  export type statusMaquinasPendentesLabScalarWhereWithAggregatesInput = {
    AND?: statusMaquinasPendentesLabScalarWhereWithAggregatesInput | statusMaquinasPendentesLabScalarWhereWithAggregatesInput[]
    OR?: statusMaquinasPendentesLabScalarWhereWithAggregatesInput[]
    NOT?: statusMaquinasPendentesLabScalarWhereWithAggregatesInput | statusMaquinasPendentesLabScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"statusMaquinasPendentesLab"> | string
    name?: StringWithAggregatesFilter<"statusMaquinasPendentesLab"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"statusMaquinasPendentesLab"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"statusMaquinasPendentesLab"> | Date | string | null
  }

  export type controledeMaquinasPendentesOroWhereInput = {
    AND?: controledeMaquinasPendentesOroWhereInput | controledeMaquinasPendentesOroWhereInput[]
    OR?: controledeMaquinasPendentesOroWhereInput[]
    NOT?: controledeMaquinasPendentesOroWhereInput | controledeMaquinasPendentesOroWhereInput[]
    id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    datadaInstalacao?: DateTimeFilter<"controledeMaquinasPendentesOro"> | Date | string
    osInstalacao?: StringFilter<"controledeMaquinasPendentesOro"> | string
    osRetirada?: StringFilter<"controledeMaquinasPendentesOro"> | string
    create_at?: DateTimeNullableFilter<"controledeMaquinasPendentesOro"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controledeMaquinasPendentesOro"> | Date | string | null
    equipamento_id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    instituicaoUnidade_id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    statusMaquinasPendentesOro_id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    instituicaoUnidade?: XOR<InstituicaoUnidadeScalarRelationFilter, InstituicaoUnidadeWhereInput>
    statusMaquinasPendentesOro?: XOR<StatusMaquinasPendentesOroScalarRelationFilter, statusMaquinasPendentesOroWhereInput>
  }

  export type controledeMaquinasPendentesOroOrderByWithRelationInput = {
    id?: SortOrder
    datadaInstalacao?: SortOrder
    osInstalacao?: SortOrder
    osRetirada?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    equipamento_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    statusMaquinasPendentesOro_id?: SortOrder
    equipamento?: EquipamentoOrderByWithRelationInput
    instituicaoUnidade?: InstituicaoUnidadeOrderByWithRelationInput
    statusMaquinasPendentesOro?: statusMaquinasPendentesOroOrderByWithRelationInput
  }

  export type controledeMaquinasPendentesOroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: controledeMaquinasPendentesOroWhereInput | controledeMaquinasPendentesOroWhereInput[]
    OR?: controledeMaquinasPendentesOroWhereInput[]
    NOT?: controledeMaquinasPendentesOroWhereInput | controledeMaquinasPendentesOroWhereInput[]
    datadaInstalacao?: DateTimeFilter<"controledeMaquinasPendentesOro"> | Date | string
    osInstalacao?: StringFilter<"controledeMaquinasPendentesOro"> | string
    osRetirada?: StringFilter<"controledeMaquinasPendentesOro"> | string
    create_at?: DateTimeNullableFilter<"controledeMaquinasPendentesOro"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controledeMaquinasPendentesOro"> | Date | string | null
    equipamento_id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    instituicaoUnidade_id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    statusMaquinasPendentesOro_id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    equipamento?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    instituicaoUnidade?: XOR<InstituicaoUnidadeScalarRelationFilter, InstituicaoUnidadeWhereInput>
    statusMaquinasPendentesOro?: XOR<StatusMaquinasPendentesOroScalarRelationFilter, statusMaquinasPendentesOroWhereInput>
  }, "id">

  export type controledeMaquinasPendentesOroOrderByWithAggregationInput = {
    id?: SortOrder
    datadaInstalacao?: SortOrder
    osInstalacao?: SortOrder
    osRetirada?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    equipamento_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    statusMaquinasPendentesOro_id?: SortOrder
    _count?: controledeMaquinasPendentesOroCountOrderByAggregateInput
    _max?: controledeMaquinasPendentesOroMaxOrderByAggregateInput
    _min?: controledeMaquinasPendentesOroMinOrderByAggregateInput
  }

  export type controledeMaquinasPendentesOroScalarWhereWithAggregatesInput = {
    AND?: controledeMaquinasPendentesOroScalarWhereWithAggregatesInput | controledeMaquinasPendentesOroScalarWhereWithAggregatesInput[]
    OR?: controledeMaquinasPendentesOroScalarWhereWithAggregatesInput[]
    NOT?: controledeMaquinasPendentesOroScalarWhereWithAggregatesInput | controledeMaquinasPendentesOroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"controledeMaquinasPendentesOro"> | string
    datadaInstalacao?: DateTimeWithAggregatesFilter<"controledeMaquinasPendentesOro"> | Date | string
    osInstalacao?: StringWithAggregatesFilter<"controledeMaquinasPendentesOro"> | string
    osRetirada?: StringWithAggregatesFilter<"controledeMaquinasPendentesOro"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"controledeMaquinasPendentesOro"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"controledeMaquinasPendentesOro"> | Date | string | null
    equipamento_id?: StringWithAggregatesFilter<"controledeMaquinasPendentesOro"> | string
    instituicaoUnidade_id?: StringWithAggregatesFilter<"controledeMaquinasPendentesOro"> | string
    statusMaquinasPendentesOro_id?: StringWithAggregatesFilter<"controledeMaquinasPendentesOro"> | string
  }

  export type statusMaquinasPendentesOroWhereInput = {
    AND?: statusMaquinasPendentesOroWhereInput | statusMaquinasPendentesOroWhereInput[]
    OR?: statusMaquinasPendentesOroWhereInput[]
    NOT?: statusMaquinasPendentesOroWhereInput | statusMaquinasPendentesOroWhereInput[]
    id?: StringFilter<"statusMaquinasPendentesOro"> | string
    name?: StringFilter<"statusMaquinasPendentesOro"> | string
    create_at?: DateTimeNullableFilter<"statusMaquinasPendentesOro"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusMaquinasPendentesOro"> | Date | string | null
    controlesDeMaquinasPendentesOro?: ControledeMaquinasPendentesOroListRelationFilter
  }

  export type statusMaquinasPendentesOroOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroOrderByRelationAggregateInput
  }

  export type statusMaquinasPendentesOroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: statusMaquinasPendentesOroWhereInput | statusMaquinasPendentesOroWhereInput[]
    OR?: statusMaquinasPendentesOroWhereInput[]
    NOT?: statusMaquinasPendentesOroWhereInput | statusMaquinasPendentesOroWhereInput[]
    name?: StringFilter<"statusMaquinasPendentesOro"> | string
    create_at?: DateTimeNullableFilter<"statusMaquinasPendentesOro"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusMaquinasPendentesOro"> | Date | string | null
    controlesDeMaquinasPendentesOro?: ControledeMaquinasPendentesOroListRelationFilter
  }, "id">

  export type statusMaquinasPendentesOroOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: statusMaquinasPendentesOroCountOrderByAggregateInput
    _max?: statusMaquinasPendentesOroMaxOrderByAggregateInput
    _min?: statusMaquinasPendentesOroMinOrderByAggregateInput
  }

  export type statusMaquinasPendentesOroScalarWhereWithAggregatesInput = {
    AND?: statusMaquinasPendentesOroScalarWhereWithAggregatesInput | statusMaquinasPendentesOroScalarWhereWithAggregatesInput[]
    OR?: statusMaquinasPendentesOroScalarWhereWithAggregatesInput[]
    NOT?: statusMaquinasPendentesOroScalarWhereWithAggregatesInput | statusMaquinasPendentesOroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"statusMaquinasPendentesOro"> | string
    name?: StringWithAggregatesFilter<"statusMaquinasPendentesOro"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"statusMaquinasPendentesOro"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"statusMaquinasPendentesOro"> | Date | string | null
  }

  export type documentacaoTecnicaWhereInput = {
    AND?: documentacaoTecnicaWhereInput | documentacaoTecnicaWhereInput[]
    OR?: documentacaoTecnicaWhereInput[]
    NOT?: documentacaoTecnicaWhereInput | documentacaoTecnicaWhereInput[]
    id?: StringFilter<"documentacaoTecnica"> | string
    titulo?: StringFilter<"documentacaoTecnica"> | string
    descricao?: StringFilter<"documentacaoTecnica"> | string
    create_at?: DateTimeNullableFilter<"documentacaoTecnica"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"documentacaoTecnica"> | Date | string | null
    cliente_id?: StringNullableFilter<"documentacaoTecnica"> | string | null
    tecnico_id?: StringFilter<"documentacaoTecnica"> | string
    instituicao_id?: StringNullableFilter<"documentacaoTecnica"> | string | null
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
    tecnico?: XOR<TecnicoScalarRelationFilter, TecnicoWhereInput>
    instituicao?: XOR<InstituicaoUnidadeNullableScalarRelationFilter, InstituicaoUnidadeWhereInput> | null
  }

  export type documentacaoTecnicaOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    cliente_id?: SortOrderInput | SortOrder
    tecnico_id?: SortOrder
    instituicao_id?: SortOrderInput | SortOrder
    cliente?: ClienteOrderByWithRelationInput
    tecnico?: TecnicoOrderByWithRelationInput
    instituicao?: InstituicaoUnidadeOrderByWithRelationInput
  }

  export type documentacaoTecnicaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: documentacaoTecnicaWhereInput | documentacaoTecnicaWhereInput[]
    OR?: documentacaoTecnicaWhereInput[]
    NOT?: documentacaoTecnicaWhereInput | documentacaoTecnicaWhereInput[]
    titulo?: StringFilter<"documentacaoTecnica"> | string
    descricao?: StringFilter<"documentacaoTecnica"> | string
    create_at?: DateTimeNullableFilter<"documentacaoTecnica"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"documentacaoTecnica"> | Date | string | null
    cliente_id?: StringNullableFilter<"documentacaoTecnica"> | string | null
    tecnico_id?: StringFilter<"documentacaoTecnica"> | string
    instituicao_id?: StringNullableFilter<"documentacaoTecnica"> | string | null
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
    tecnico?: XOR<TecnicoScalarRelationFilter, TecnicoWhereInput>
    instituicao?: XOR<InstituicaoUnidadeNullableScalarRelationFilter, InstituicaoUnidadeWhereInput> | null
  }, "id">

  export type documentacaoTecnicaOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    cliente_id?: SortOrderInput | SortOrder
    tecnico_id?: SortOrder
    instituicao_id?: SortOrderInput | SortOrder
    _count?: documentacaoTecnicaCountOrderByAggregateInput
    _max?: documentacaoTecnicaMaxOrderByAggregateInput
    _min?: documentacaoTecnicaMinOrderByAggregateInput
  }

  export type documentacaoTecnicaScalarWhereWithAggregatesInput = {
    AND?: documentacaoTecnicaScalarWhereWithAggregatesInput | documentacaoTecnicaScalarWhereWithAggregatesInput[]
    OR?: documentacaoTecnicaScalarWhereWithAggregatesInput[]
    NOT?: documentacaoTecnicaScalarWhereWithAggregatesInput | documentacaoTecnicaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"documentacaoTecnica"> | string
    titulo?: StringWithAggregatesFilter<"documentacaoTecnica"> | string
    descricao?: StringWithAggregatesFilter<"documentacaoTecnica"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"documentacaoTecnica"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"documentacaoTecnica"> | Date | string | null
    cliente_id?: StringNullableWithAggregatesFilter<"documentacaoTecnica"> | string | null
    tecnico_id?: StringWithAggregatesFilter<"documentacaoTecnica"> | string
    instituicao_id?: StringNullableWithAggregatesFilter<"documentacaoTecnica"> | string | null
  }

  export type solicitacaoDeComprasWhereInput = {
    AND?: solicitacaoDeComprasWhereInput | solicitacaoDeComprasWhereInput[]
    OR?: solicitacaoDeComprasWhereInput[]
    NOT?: solicitacaoDeComprasWhereInput | solicitacaoDeComprasWhereInput[]
    id?: StringFilter<"solicitacaoDeCompras"> | string
    itemSolicitado?: StringFilter<"solicitacaoDeCompras"> | string
    solicitante?: StringFilter<"solicitacaoDeCompras"> | string
    motivoDaSolicitacao?: StringFilter<"solicitacaoDeCompras"> | string
    preco?: FloatFilter<"solicitacaoDeCompras"> | number
    linkDeCompra?: StringFilter<"solicitacaoDeCompras"> | string
    create_at?: DateTimeNullableFilter<"solicitacaoDeCompras"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"solicitacaoDeCompras"> | Date | string | null
    statusCompras_id?: StringFilter<"solicitacaoDeCompras"> | string
    statusCompras?: XOR<StatusComprasNullableScalarRelationFilter, statusComprasWhereInput> | null
  }

  export type solicitacaoDeComprasOrderByWithRelationInput = {
    id?: SortOrder
    itemSolicitado?: SortOrder
    solicitante?: SortOrder
    motivoDaSolicitacao?: SortOrder
    preco?: SortOrder
    linkDeCompra?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    statusCompras_id?: SortOrder
    statusCompras?: statusComprasOrderByWithRelationInput
  }

  export type solicitacaoDeComprasWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: solicitacaoDeComprasWhereInput | solicitacaoDeComprasWhereInput[]
    OR?: solicitacaoDeComprasWhereInput[]
    NOT?: solicitacaoDeComprasWhereInput | solicitacaoDeComprasWhereInput[]
    itemSolicitado?: StringFilter<"solicitacaoDeCompras"> | string
    solicitante?: StringFilter<"solicitacaoDeCompras"> | string
    motivoDaSolicitacao?: StringFilter<"solicitacaoDeCompras"> | string
    preco?: FloatFilter<"solicitacaoDeCompras"> | number
    linkDeCompra?: StringFilter<"solicitacaoDeCompras"> | string
    create_at?: DateTimeNullableFilter<"solicitacaoDeCompras"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"solicitacaoDeCompras"> | Date | string | null
    statusCompras_id?: StringFilter<"solicitacaoDeCompras"> | string
    statusCompras?: XOR<StatusComprasNullableScalarRelationFilter, statusComprasWhereInput> | null
  }, "id">

  export type solicitacaoDeComprasOrderByWithAggregationInput = {
    id?: SortOrder
    itemSolicitado?: SortOrder
    solicitante?: SortOrder
    motivoDaSolicitacao?: SortOrder
    preco?: SortOrder
    linkDeCompra?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    statusCompras_id?: SortOrder
    _count?: solicitacaoDeComprasCountOrderByAggregateInput
    _avg?: solicitacaoDeComprasAvgOrderByAggregateInput
    _max?: solicitacaoDeComprasMaxOrderByAggregateInput
    _min?: solicitacaoDeComprasMinOrderByAggregateInput
    _sum?: solicitacaoDeComprasSumOrderByAggregateInput
  }

  export type solicitacaoDeComprasScalarWhereWithAggregatesInput = {
    AND?: solicitacaoDeComprasScalarWhereWithAggregatesInput | solicitacaoDeComprasScalarWhereWithAggregatesInput[]
    OR?: solicitacaoDeComprasScalarWhereWithAggregatesInput[]
    NOT?: solicitacaoDeComprasScalarWhereWithAggregatesInput | solicitacaoDeComprasScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"solicitacaoDeCompras"> | string
    itemSolicitado?: StringWithAggregatesFilter<"solicitacaoDeCompras"> | string
    solicitante?: StringWithAggregatesFilter<"solicitacaoDeCompras"> | string
    motivoDaSolicitacao?: StringWithAggregatesFilter<"solicitacaoDeCompras"> | string
    preco?: FloatWithAggregatesFilter<"solicitacaoDeCompras"> | number
    linkDeCompra?: StringWithAggregatesFilter<"solicitacaoDeCompras"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"solicitacaoDeCompras"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"solicitacaoDeCompras"> | Date | string | null
    statusCompras_id?: StringWithAggregatesFilter<"solicitacaoDeCompras"> | string
  }

  export type statusComprasWhereInput = {
    AND?: statusComprasWhereInput | statusComprasWhereInput[]
    OR?: statusComprasWhereInput[]
    NOT?: statusComprasWhereInput | statusComprasWhereInput[]
    id?: StringFilter<"statusCompras"> | string
    name?: StringFilter<"statusCompras"> | string
    create_at?: DateTimeNullableFilter<"statusCompras"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusCompras"> | Date | string | null
    solicitacoesDeCompras?: SolicitacaoDeComprasListRelationFilter
  }

  export type statusComprasOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    solicitacoesDeCompras?: solicitacaoDeComprasOrderByRelationAggregateInput
  }

  export type statusComprasWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: statusComprasWhereInput | statusComprasWhereInput[]
    OR?: statusComprasWhereInput[]
    NOT?: statusComprasWhereInput | statusComprasWhereInput[]
    name?: StringFilter<"statusCompras"> | string
    create_at?: DateTimeNullableFilter<"statusCompras"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"statusCompras"> | Date | string | null
    solicitacoesDeCompras?: SolicitacaoDeComprasListRelationFilter
  }, "id">

  export type statusComprasOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: statusComprasCountOrderByAggregateInput
    _max?: statusComprasMaxOrderByAggregateInput
    _min?: statusComprasMinOrderByAggregateInput
  }

  export type statusComprasScalarWhereWithAggregatesInput = {
    AND?: statusComprasScalarWhereWithAggregatesInput | statusComprasScalarWhereWithAggregatesInput[]
    OR?: statusComprasScalarWhereWithAggregatesInput[]
    NOT?: statusComprasScalarWhereWithAggregatesInput | statusComprasScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"statusCompras"> | string
    name?: StringWithAggregatesFilter<"statusCompras"> | string
    create_at?: DateTimeNullableWithAggregatesFilter<"statusCompras"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"statusCompras"> | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutUsersInput
    setor?: SetorCreateNestedOneWithoutUsersInput
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    setor_id?: string | null
    instituicao_id?: string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutUsersNestedInput
    setor?: SetorUpdateOneWithoutUsersNestedInput
    instituicao?: InstituicaoUnidadeUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    setor_id?: NullableStringFieldUpdateOperationsInput | string | null
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    setor_id?: string | null
    instituicao_id?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    setor_id?: NullableStringFieldUpdateOperationsInput | string | null
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClienteCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutClienteInput
    ordensDeServico?: OrdemdeServicoCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutClienteInput
    ordensDeServico?: OrdemdeServicoUncheckedCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutClienteNestedInput
    ordensDeServico?: OrdemdeServicoUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutClienteNestedInput
    ordensDeServico?: OrdemdeServicoUncheckedUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ClienteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SetorCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutSetorInput
  }

  export type SetorUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutSetorInput
  }

  export type SetorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutSetorNestedInput
  }

  export type SetorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutSetorNestedInput
  }

  export type SetorCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type SetorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SetorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InstituicaoUnidadeCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUnidadeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUnidadeCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type InstituicaoUnidadeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InstituicaoUnidadeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusOrdemdeServicoCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoCreateNestedManyWithoutStatusOrdemdeServicoInput
    formstecnico?: FormTecnicoCreateNestedManyWithoutStatusOrdemdeServicoInput
  }

  export type statusOrdemdeServicoUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutStatusOrdemdeServicoInput
    formstecnico?: FormTecnicoUncheckedCreateNestedManyWithoutStatusOrdemdeServicoInput
  }

  export type statusOrdemdeServicoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUpdateManyWithoutStatusOrdemdeServicoNestedInput
    formstecnico?: FormTecnicoUpdateManyWithoutStatusOrdemdeServicoNestedInput
  }

  export type statusOrdemdeServicoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutStatusOrdemdeServicoNestedInput
    formstecnico?: FormTecnicoUncheckedUpdateManyWithoutStatusOrdemdeServicoNestedInput
  }

  export type statusOrdemdeServicoCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusOrdemdeServicoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusOrdemdeServicoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TipodeSolicitacaoCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoCreateNestedManyWithoutTipodesolicitacaoInput
  }

  export type TipodeSolicitacaoUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutTipodesolicitacaoInput
  }

  export type TipodeSolicitacaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUpdateManyWithoutTipodesolicitacaoNestedInput
  }

  export type TipodeSolicitacaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutTipodesolicitacaoNestedInput
  }

  export type TipodeSolicitacaoCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type TipodeSolicitacaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TipodeSolicitacaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TecnicoCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoCreateNestedManyWithoutTecnicoInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutTecnicoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutTecnicoInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutTecnicoInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutTecnicoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutTecnicoInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUpdateManyWithoutTecnicoNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutTecnicoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutTecnicoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutTecnicoNestedInput
  }

  export type TecnicoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutTecnicoNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutTecnicoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput
  }

  export type TecnicoCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type TecnicoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TecnicoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrdemdeServicoCreateInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutOrdensDeServicoInput
    tecnico: TecnicoCreateNestedOneWithoutOrdensInput
    statusOrdemdeServico: statusOrdemdeServicoCreateNestedOneWithoutOrdensInput
    tipodesolicitacao: TipodeSolicitacaoCreateNestedOneWithoutOrdensInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutOrdensInput
    formtecnico?: FormTecnicoCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoUncheckedCreateInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
    formtecnico?: FormTecnicoUncheckedCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutOrdensDeServicoNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutOrdensNestedInput
    statusOrdemdeServico?: statusOrdemdeServicoUpdateOneRequiredWithoutOrdensNestedInput
    tipodesolicitacao?: TipodeSolicitacaoUpdateOneRequiredWithoutOrdensNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutOrdensNestedInput
    formtecnico?: FormTecnicoUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    formtecnico?: FormTecnicoUncheckedUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoCreateManyInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
  }

  export type OrdemdeServicoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrdemdeServicoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
  }

  export type FormTecnicoCreateInput = {
    id?: string
    name: string
    diagnostico: string
    solucao: string
    assinatura: string
    status_id: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    statusOrdemdeServico: statusOrdemdeServicoCreateNestedOneWithoutFormstecnicoInput
    ordemDeServico: OrdemdeServicoCreateNestedOneWithoutFormtecnicoInput
  }

  export type FormTecnicoUncheckedCreateInput = {
    id?: string
    name: string
    diagnostico: string
    solucao: string
    assinatura: string
    status_id: string
    statusOrdemdeServico_id: string
    ordemDeServico_id: string
    created_at?: Date | string | null
    update_at?: Date | string | null
  }

  export type FormTecnicoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    diagnostico?: StringFieldUpdateOperationsInput | string
    solucao?: StringFieldUpdateOperationsInput | string
    assinatura?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusOrdemdeServico?: statusOrdemdeServicoUpdateOneRequiredWithoutFormstecnicoNestedInput
    ordemDeServico?: OrdemdeServicoUpdateOneRequiredWithoutFormtecnicoNestedInput
  }

  export type FormTecnicoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    diagnostico?: StringFieldUpdateOperationsInput | string
    solucao?: StringFieldUpdateOperationsInput | string
    assinatura?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    ordemDeServico_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FormTecnicoCreateManyInput = {
    id?: string
    name: string
    diagnostico: string
    solucao: string
    assinatura: string
    status_id: string
    statusOrdemdeServico_id: string
    ordemDeServico_id: string
    created_at?: Date | string | null
    update_at?: Date | string | null
  }

  export type FormTecnicoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    diagnostico?: StringFieldUpdateOperationsInput | string
    solucao?: StringFieldUpdateOperationsInput | string
    assinatura?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FormTecnicoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    diagnostico?: StringFieldUpdateOperationsInput | string
    solucao?: StringFieldUpdateOperationsInput | string
    assinatura?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    ordemDeServico_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EquipamentoCreateInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaCreateNestedManyWithoutEquipamentoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoUncheckedCreateInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUpdateManyWithoutEquipamentoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutEquipamentoNestedInput
  }

  export type EquipamentoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutEquipamentoNestedInput
  }

  export type EquipamentoCreateManyInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type EquipamentoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EquipamentoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaCreateInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeAssistenciaInput
    statusReparo: statusReparoCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    statusTeste: StatusTesteCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesdeAssistenciaTecnicaInput
    tecnico: TecnicoCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
    cliente?: ClienteCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeAssistenciaNestedInput
    statusReparo?: statusReparoUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    statusTeste?: StatusTesteUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeAssistenciaTecnicaNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutControlesdeAssistenciatecnicaNestedInput
    cliente?: ClienteUpdateOneWithoutControlesdeAssistenciatecnicaNestedInput
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaCreateManyInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusReparoCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutStatusReparoInput
  }

  export type statusReparoUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutStatusReparoInput
  }

  export type statusReparoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutStatusReparoNestedInput
  }

  export type statusReparoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutStatusReparoNestedInput
  }

  export type statusReparoCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusReparoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusReparoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StatusTesteCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutStatusTesteInput
  }

  export type StatusTesteUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutStatusTesteInput
  }

  export type StatusTesteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutStatusTesteNestedInput
  }

  export type StatusTesteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controleDeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutStatusTesteNestedInput
  }

  export type StatusTesteCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type StatusTesteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StatusTesteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaudoTecnicoCreateInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesdeLaudoTecnicoInput
    equipamento: EquipamentoCreateNestedOneWithoutControlesdeLaudoTecnicoInput
    tecnico: TecnicoCreateNestedOneWithoutControlesdeLaudoTecnicoInput
  }

  export type controleDeLaudoTecnicoUncheckedCreateInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    instituicaoUnidade_id: string
    equipamento_id: string
    tecnico_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaudoTecnicoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput
  }

  export type controleDeLaudoTecnicoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaudoTecnicoCreateManyInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    instituicaoUnidade_id: string
    equipamento_id: string
    tecnico_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaudoTecnicoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaudoTecnicoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaboratioCreateInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio: statusControledeLaboratorioCreateNestedOneWithoutControlesDeLaboratioInput
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutControlesDeLaboratioInput
    cliente?: ClienteCreateNestedOneWithoutControlesDeLaboratioInput
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeLaboratioInput
  }

  export type controleDeLaboratioUncheckedCreateInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio_id: string
    instituicao_id: string
    cliente_id: string
    equipamento_id: string
  }

  export type controleDeLaboratioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio?: statusControledeLaboratorioUpdateOneRequiredWithoutControlesDeLaboratioNestedInput
    instituicao?: InstituicaoUnidadeUpdateOneWithoutControlesDeLaboratioNestedInput
    cliente?: ClienteUpdateOneWithoutControlesDeLaboratioNestedInput
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeLaboratioNestedInput
  }

  export type controleDeLaboratioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeLaboratioCreateManyInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio_id: string
    instituicao_id: string
    cliente_id: string
    equipamento_id: string
  }

  export type controleDeLaboratioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type controleDeLaboratioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type statusControledeLaboratorioCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutStatusControledeLaboratorioInput
  }

  export type statusControledeLaboratorioUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutStatusControledeLaboratorioInput
  }

  export type statusControledeLaboratorioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutStatusControledeLaboratorioNestedInput
  }

  export type statusControledeLaboratorioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutStatusControledeLaboratorioNestedInput
  }

  export type statusControledeLaboratorioCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusControledeLaboratorioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusControledeLaboratorioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeMaquinasPendentesLaboratorioCreateInput = {
    id?: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeMaquinasPendentesLaboratorioInput
    statusMaquinasPendentesLab: statusMaquinasPendentesLabCreateNestedOneWithoutControlesDeMaquinasPendentesLaboratorioInput
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedCreateInput = {
    id?: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
    statusMaquinasPendentesLab_id: string
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeMaquinasPendentesLaboratorioNestedInput
    statusMaquinasPendentesLab?: statusMaquinasPendentesLabUpdateOneRequiredWithoutControlesDeMaquinasPendentesLaboratorioNestedInput
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusMaquinasPendentesLab_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeMaquinasPendentesLaboratorioCreateManyInput = {
    id?: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
    statusMaquinasPendentesLab_id: string
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusMaquinasPendentesLab_id?: StringFieldUpdateOperationsInput | string
  }

  export type statusMaquinasPendentesLabCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioCreateNestedManyWithoutStatusMaquinasPendentesLabInput
  }

  export type statusMaquinasPendentesLabUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedCreateNestedManyWithoutStatusMaquinasPendentesLabInput
  }

  export type statusMaquinasPendentesLabUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUpdateManyWithoutStatusMaquinasPendentesLabNestedInput
  }

  export type statusMaquinasPendentesLabUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutStatusMaquinasPendentesLabNestedInput
  }

  export type statusMaquinasPendentesLabCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusMaquinasPendentesLabUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusMaquinasPendentesLabUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controledeMaquinasPendentesOroCreateInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput
    statusMaquinasPendentesOro: statusMaquinasPendentesOroCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput
  }

  export type controledeMaquinasPendentesOroUncheckedCreateInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
    instituicaoUnidade_id: string
    statusMaquinasPendentesOro_id: string
  }

  export type controledeMaquinasPendentesOroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput
    statusMaquinasPendentesOro?: statusMaquinasPendentesOroUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    statusMaquinasPendentesOro_id?: StringFieldUpdateOperationsInput | string
  }

  export type controledeMaquinasPendentesOroCreateManyInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
    instituicaoUnidade_id: string
    statusMaquinasPendentesOro_id: string
  }

  export type controledeMaquinasPendentesOroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    statusMaquinasPendentesOro_id?: StringFieldUpdateOperationsInput | string
  }

  export type statusMaquinasPendentesOroCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutStatusMaquinasPendentesOroInput
  }

  export type statusMaquinasPendentesOroUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutStatusMaquinasPendentesOroInput
  }

  export type statusMaquinasPendentesOroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutStatusMaquinasPendentesOroNestedInput
  }

  export type statusMaquinasPendentesOroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutStatusMaquinasPendentesOroNestedInput
  }

  export type statusMaquinasPendentesOroCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusMaquinasPendentesOroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusMaquinasPendentesOroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type documentacaoTecnicaCreateInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutDocumentacoesTecnicasInput
    tecnico: TecnicoCreateNestedOneWithoutDocumentacoesTecnicasInput
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutDocumentacoesTecnicasInput
  }

  export type documentacaoTecnicaUncheckedCreateInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    instituicao_id?: string | null
  }

  export type documentacaoTecnicaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutDocumentacoesTecnicasNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutDocumentacoesTecnicasNestedInput
    instituicao?: InstituicaoUnidadeUpdateOneWithoutDocumentacoesTecnicasNestedInput
  }

  export type documentacaoTecnicaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type documentacaoTecnicaCreateManyInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    instituicao_id?: string | null
  }

  export type documentacaoTecnicaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type documentacaoTecnicaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type solicitacaoDeComprasCreateInput = {
    id?: string
    itemSolicitado: string
    solicitante: string
    motivoDaSolicitacao: string
    preco: number
    linkDeCompra: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    statusCompras?: statusComprasCreateNestedOneWithoutSolicitacoesDeComprasInput
  }

  export type solicitacaoDeComprasUncheckedCreateInput = {
    id?: string
    itemSolicitado: string
    solicitante: string
    motivoDaSolicitacao: string
    preco: number
    linkDeCompra: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    statusCompras_id: string
  }

  export type solicitacaoDeComprasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemSolicitado?: StringFieldUpdateOperationsInput | string
    solicitante?: StringFieldUpdateOperationsInput | string
    motivoDaSolicitacao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    linkDeCompra?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusCompras?: statusComprasUpdateOneWithoutSolicitacoesDeComprasNestedInput
  }

  export type solicitacaoDeComprasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemSolicitado?: StringFieldUpdateOperationsInput | string
    solicitante?: StringFieldUpdateOperationsInput | string
    motivoDaSolicitacao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    linkDeCompra?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusCompras_id?: StringFieldUpdateOperationsInput | string
  }

  export type solicitacaoDeComprasCreateManyInput = {
    id?: string
    itemSolicitado: string
    solicitante: string
    motivoDaSolicitacao: string
    preco: number
    linkDeCompra: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    statusCompras_id: string
  }

  export type solicitacaoDeComprasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemSolicitado?: StringFieldUpdateOperationsInput | string
    solicitante?: StringFieldUpdateOperationsInput | string
    motivoDaSolicitacao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    linkDeCompra?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type solicitacaoDeComprasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemSolicitado?: StringFieldUpdateOperationsInput | string
    solicitante?: StringFieldUpdateOperationsInput | string
    motivoDaSolicitacao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    linkDeCompra?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusCompras_id?: StringFieldUpdateOperationsInput | string
  }

  export type statusComprasCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    solicitacoesDeCompras?: solicitacaoDeComprasCreateNestedManyWithoutStatusComprasInput
  }

  export type statusComprasUncheckedCreateInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    solicitacoesDeCompras?: solicitacaoDeComprasUncheckedCreateNestedManyWithoutStatusComprasInput
  }

  export type statusComprasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    solicitacoesDeCompras?: solicitacaoDeComprasUpdateManyWithoutStatusComprasNestedInput
  }

  export type statusComprasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    solicitacoesDeCompras?: solicitacaoDeComprasUncheckedUpdateManyWithoutStatusComprasNestedInput
  }

  export type statusComprasCreateManyInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusComprasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusComprasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ClienteNullableScalarRelationFilter = {
    is?: ClienteWhereInput | null
    isNot?: ClienteWhereInput | null
  }

  export type SetorNullableScalarRelationFilter = {
    is?: SetorWhereInput | null
    isNot?: SetorWhereInput | null
  }

  export type InstituicaoUnidadeNullableScalarRelationFilter = {
    is?: InstituicaoUnidadeWhereInput | null
    isNot?: InstituicaoUnidadeWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    cliente_id?: SortOrder
    setor_id?: SortOrder
    instituicao_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    cliente_id?: SortOrder
    setor_id?: SortOrder
    instituicao_id?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    cliente_id?: SortOrder
    setor_id?: SortOrder
    instituicao_id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type OrdemdeServicoListRelationFilter = {
    every?: OrdemdeServicoWhereInput
    some?: OrdemdeServicoWhereInput
    none?: OrdemdeServicoWhereInput
  }

  export type ControleDeAssistenciaTecnicaListRelationFilter = {
    every?: controleDeAssistenciaTecnicaWhereInput
    some?: controleDeAssistenciaTecnicaWhereInput
    none?: controleDeAssistenciaTecnicaWhereInput
  }

  export type ControleDeLaboratioListRelationFilter = {
    every?: controleDeLaboratioWhereInput
    some?: controleDeLaboratioWhereInput
    none?: controleDeLaboratioWhereInput
  }

  export type DocumentacaoTecnicaListRelationFilter = {
    every?: documentacaoTecnicaWhereInput
    some?: documentacaoTecnicaWhereInput
    none?: documentacaoTecnicaWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrdemdeServicoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type controleDeAssistenciaTecnicaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type controleDeLaboratioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type documentacaoTecnicaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SetorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SetorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SetorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ControleDeLaudoTecnicoListRelationFilter = {
    every?: controleDeLaudoTecnicoWhereInput
    some?: controleDeLaudoTecnicoWhereInput
    none?: controleDeLaudoTecnicoWhereInput
  }

  export type ControledeMaquinasPendentesOroListRelationFilter = {
    every?: controledeMaquinasPendentesOroWhereInput
    some?: controledeMaquinasPendentesOroWhereInput
    none?: controledeMaquinasPendentesOroWhereInput
  }

  export type controleDeLaudoTecnicoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type controledeMaquinasPendentesOroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstituicaoUnidadeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type InstituicaoUnidadeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type InstituicaoUnidadeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FormTecnicoListRelationFilter = {
    every?: FormTecnicoWhereInput
    some?: FormTecnicoWhereInput
    none?: FormTecnicoWhereInput
  }

  export type FormTecnicoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type statusOrdemdeServicoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusOrdemdeServicoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusOrdemdeServicoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TipodeSolicitacaoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TipodeSolicitacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TipodeSolicitacaoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TecnicoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TecnicoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TecnicoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TecnicoScalarRelationFilter = {
    is?: TecnicoWhereInput
    isNot?: TecnicoWhereInput
  }

  export type StatusOrdemdeServicoScalarRelationFilter = {
    is?: statusOrdemdeServicoWhereInput
    isNot?: statusOrdemdeServicoWhereInput
  }

  export type TipodeSolicitacaoScalarRelationFilter = {
    is?: TipodeSolicitacaoWhereInput
    isNot?: TipodeSolicitacaoWhereInput
  }

  export type InstituicaoUnidadeScalarRelationFilter = {
    is?: InstituicaoUnidadeWhereInput
    isNot?: InstituicaoUnidadeWhereInput
  }

  export type FormTecnicoNullableScalarRelationFilter = {
    is?: FormTecnicoWhereInput | null
    isNot?: FormTecnicoWhereInput | null
  }

  export type OrdemdeServicoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    problemaOuSolicitacao?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    cliente_id?: SortOrder
    tecnico_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    tipodesolicitacao_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
  }

  export type OrdemdeServicoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    problemaOuSolicitacao?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    cliente_id?: SortOrder
    tecnico_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    tipodesolicitacao_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
  }

  export type OrdemdeServicoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    problemaOuSolicitacao?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    cliente_id?: SortOrder
    tecnico_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    tipodesolicitacao_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
  }

  export type OrdemdeServicoScalarRelationFilter = {
    is?: OrdemdeServicoWhereInput
    isNot?: OrdemdeServicoWhereInput
  }

  export type FormTecnicoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    diagnostico?: SortOrder
    solucao?: SortOrder
    assinatura?: SortOrder
    status_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    ordemDeServico_id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type FormTecnicoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    diagnostico?: SortOrder
    solucao?: SortOrder
    assinatura?: SortOrder
    status_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    ordemDeServico_id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type FormTecnicoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    diagnostico?: SortOrder
    solucao?: SortOrder
    assinatura?: SortOrder
    status_id?: SortOrder
    statusOrdemdeServico_id?: SortOrder
    ordemDeServico_id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type ControleDeMaquinasPendentesLaboratorioListRelationFilter = {
    every?: controleDeMaquinasPendentesLaboratorioWhereInput
    some?: controleDeMaquinasPendentesLaboratorioWhereInput
    none?: controleDeMaquinasPendentesLaboratorioWhereInput
  }

  export type controleDeMaquinasPendentesLaboratorioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipamentoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    patrimonio?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EquipamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    patrimonio?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EquipamentoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    patrimonio?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EquipamentoScalarRelationFilter = {
    is?: EquipamentoWhereInput
    isNot?: EquipamentoWhereInput
  }

  export type StatusReparoScalarRelationFilter = {
    is?: statusReparoWhereInput
    isNot?: statusReparoWhereInput
  }

  export type StatusTesteScalarRelationFilter = {
    is?: StatusTesteWhereInput
    isNot?: StatusTesteWhereInput
  }

  export type controleDeAssistenciaTecnicaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mesAno?: SortOrder
    idChamado?: SortOrder
    assistencia?: SortOrder
    observacoes?: SortOrder
    osDaAssistencia?: SortOrder
    dataDeRetirada?: SortOrder
    equipamento_id?: SortOrder
    statusReparo_id?: SortOrder
    statusTeste_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    tecnico_id?: SortOrder
    cliente_id?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type controleDeAssistenciaTecnicaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mesAno?: SortOrder
    idChamado?: SortOrder
    assistencia?: SortOrder
    observacoes?: SortOrder
    osDaAssistencia?: SortOrder
    dataDeRetirada?: SortOrder
    equipamento_id?: SortOrder
    statusReparo_id?: SortOrder
    statusTeste_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    tecnico_id?: SortOrder
    cliente_id?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type controleDeAssistenciaTecnicaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mesAno?: SortOrder
    idChamado?: SortOrder
    assistencia?: SortOrder
    observacoes?: SortOrder
    osDaAssistencia?: SortOrder
    dataDeRetirada?: SortOrder
    equipamento_id?: SortOrder
    statusReparo_id?: SortOrder
    statusTeste_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    tecnico_id?: SortOrder
    cliente_id?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type statusReparoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusReparoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusReparoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StatusTesteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StatusTesteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StatusTesteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type controleDeLaudoTecnicoCountOrderByAggregateInput = {
    id?: SortOrder
    descricaodoProblema?: SortOrder
    mesAno?: SortOrder
    osLab?: SortOrder
    instituicaoUnidade_id?: SortOrder
    equipamento_id?: SortOrder
    tecnico_id?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type controleDeLaudoTecnicoMaxOrderByAggregateInput = {
    id?: SortOrder
    descricaodoProblema?: SortOrder
    mesAno?: SortOrder
    osLab?: SortOrder
    instituicaoUnidade_id?: SortOrder
    equipamento_id?: SortOrder
    tecnico_id?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type controleDeLaudoTecnicoMinOrderByAggregateInput = {
    id?: SortOrder
    descricaodoProblema?: SortOrder
    mesAno?: SortOrder
    osLab?: SortOrder
    instituicaoUnidade_id?: SortOrder
    equipamento_id?: SortOrder
    tecnico_id?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StatusControledeLaboratorioScalarRelationFilter = {
    is?: statusControledeLaboratorioWhereInput
    isNot?: statusControledeLaboratorioWhereInput
  }

  export type controleDeLaboratioCountOrderByAggregateInput = {
    id?: SortOrder
    nomedoEquipamento?: SortOrder
    marca?: SortOrder
    defeito?: SortOrder
    osDeAbertura?: SortOrder
    osDeDevolucao?: SortOrder
    data_de_Chegada?: SortOrder
    data_de_Finalizacao?: SortOrder
    statusControledeLaboratorio_id?: SortOrder
    instituicao_id?: SortOrder
    cliente_id?: SortOrder
    equipamento_id?: SortOrder
  }

  export type controleDeLaboratioMaxOrderByAggregateInput = {
    id?: SortOrder
    nomedoEquipamento?: SortOrder
    marca?: SortOrder
    defeito?: SortOrder
    osDeAbertura?: SortOrder
    osDeDevolucao?: SortOrder
    data_de_Chegada?: SortOrder
    data_de_Finalizacao?: SortOrder
    statusControledeLaboratorio_id?: SortOrder
    instituicao_id?: SortOrder
    cliente_id?: SortOrder
    equipamento_id?: SortOrder
  }

  export type controleDeLaboratioMinOrderByAggregateInput = {
    id?: SortOrder
    nomedoEquipamento?: SortOrder
    marca?: SortOrder
    defeito?: SortOrder
    osDeAbertura?: SortOrder
    osDeDevolucao?: SortOrder
    data_de_Chegada?: SortOrder
    data_de_Finalizacao?: SortOrder
    statusControledeLaboratorio_id?: SortOrder
    instituicao_id?: SortOrder
    cliente_id?: SortOrder
    equipamento_id?: SortOrder
  }

  export type statusControledeLaboratorioCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusControledeLaboratorioMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusControledeLaboratorioMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StatusMaquinasPendentesLabScalarRelationFilter = {
    is?: statusMaquinasPendentesLabWhereInput
    isNot?: statusMaquinasPendentesLabWhereInput
  }

  export type controleDeMaquinasPendentesLaboratorioCountOrderByAggregateInput = {
    id?: SortOrder
    numeroDeSerie?: SortOrder
    ssd?: SortOrder
    idDaOs?: SortOrder
    obs?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    equipamento_id?: SortOrder
    statusMaquinasPendentesLab_id?: SortOrder
  }

  export type controleDeMaquinasPendentesLaboratorioMaxOrderByAggregateInput = {
    id?: SortOrder
    numeroDeSerie?: SortOrder
    ssd?: SortOrder
    idDaOs?: SortOrder
    obs?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    equipamento_id?: SortOrder
    statusMaquinasPendentesLab_id?: SortOrder
  }

  export type controleDeMaquinasPendentesLaboratorioMinOrderByAggregateInput = {
    id?: SortOrder
    numeroDeSerie?: SortOrder
    ssd?: SortOrder
    idDaOs?: SortOrder
    obs?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    equipamento_id?: SortOrder
    statusMaquinasPendentesLab_id?: SortOrder
  }

  export type statusMaquinasPendentesLabCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusMaquinasPendentesLabMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusMaquinasPendentesLabMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StatusMaquinasPendentesOroScalarRelationFilter = {
    is?: statusMaquinasPendentesOroWhereInput
    isNot?: statusMaquinasPendentesOroWhereInput
  }

  export type controledeMaquinasPendentesOroCountOrderByAggregateInput = {
    id?: SortOrder
    datadaInstalacao?: SortOrder
    osInstalacao?: SortOrder
    osRetirada?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    equipamento_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    statusMaquinasPendentesOro_id?: SortOrder
  }

  export type controledeMaquinasPendentesOroMaxOrderByAggregateInput = {
    id?: SortOrder
    datadaInstalacao?: SortOrder
    osInstalacao?: SortOrder
    osRetirada?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    equipamento_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    statusMaquinasPendentesOro_id?: SortOrder
  }

  export type controledeMaquinasPendentesOroMinOrderByAggregateInput = {
    id?: SortOrder
    datadaInstalacao?: SortOrder
    osInstalacao?: SortOrder
    osRetirada?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    equipamento_id?: SortOrder
    instituicaoUnidade_id?: SortOrder
    statusMaquinasPendentesOro_id?: SortOrder
  }

  export type statusMaquinasPendentesOroCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusMaquinasPendentesOroMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusMaquinasPendentesOroMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type documentacaoTecnicaCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    cliente_id?: SortOrder
    tecnico_id?: SortOrder
    instituicao_id?: SortOrder
  }

  export type documentacaoTecnicaMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    cliente_id?: SortOrder
    tecnico_id?: SortOrder
    instituicao_id?: SortOrder
  }

  export type documentacaoTecnicaMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    cliente_id?: SortOrder
    tecnico_id?: SortOrder
    instituicao_id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StatusComprasNullableScalarRelationFilter = {
    is?: statusComprasWhereInput | null
    isNot?: statusComprasWhereInput | null
  }

  export type solicitacaoDeComprasCountOrderByAggregateInput = {
    id?: SortOrder
    itemSolicitado?: SortOrder
    solicitante?: SortOrder
    motivoDaSolicitacao?: SortOrder
    preco?: SortOrder
    linkDeCompra?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    statusCompras_id?: SortOrder
  }

  export type solicitacaoDeComprasAvgOrderByAggregateInput = {
    preco?: SortOrder
  }

  export type solicitacaoDeComprasMaxOrderByAggregateInput = {
    id?: SortOrder
    itemSolicitado?: SortOrder
    solicitante?: SortOrder
    motivoDaSolicitacao?: SortOrder
    preco?: SortOrder
    linkDeCompra?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    statusCompras_id?: SortOrder
  }

  export type solicitacaoDeComprasMinOrderByAggregateInput = {
    id?: SortOrder
    itemSolicitado?: SortOrder
    solicitante?: SortOrder
    motivoDaSolicitacao?: SortOrder
    preco?: SortOrder
    linkDeCompra?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    statusCompras_id?: SortOrder
  }

  export type solicitacaoDeComprasSumOrderByAggregateInput = {
    preco?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SolicitacaoDeComprasListRelationFilter = {
    every?: solicitacaoDeComprasWhereInput
    some?: solicitacaoDeComprasWhereInput
    none?: solicitacaoDeComprasWhereInput
  }

  export type solicitacaoDeComprasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type statusComprasCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusComprasMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type statusComprasMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClienteCreateNestedOneWithoutUsersInput = {
    create?: XOR<ClienteCreateWithoutUsersInput, ClienteUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutUsersInput
    connect?: ClienteWhereUniqueInput
  }

  export type SetorCreateNestedOneWithoutUsersInput = {
    create?: XOR<SetorCreateWithoutUsersInput, SetorUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SetorCreateOrConnectWithoutUsersInput
    connect?: SetorWhereUniqueInput
  }

  export type InstituicaoUnidadeCreateNestedOneWithoutUsersInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutUsersInput, InstituicaoUnidadeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutUsersInput
    connect?: InstituicaoUnidadeWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ClienteUpdateOneWithoutUsersNestedInput = {
    create?: XOR<ClienteCreateWithoutUsersInput, ClienteUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutUsersInput
    upsert?: ClienteUpsertWithoutUsersInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutUsersInput, ClienteUpdateWithoutUsersInput>, ClienteUncheckedUpdateWithoutUsersInput>
  }

  export type SetorUpdateOneWithoutUsersNestedInput = {
    create?: XOR<SetorCreateWithoutUsersInput, SetorUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SetorCreateOrConnectWithoutUsersInput
    upsert?: SetorUpsertWithoutUsersInput
    disconnect?: SetorWhereInput | boolean
    delete?: SetorWhereInput | boolean
    connect?: SetorWhereUniqueInput
    update?: XOR<XOR<SetorUpdateToOneWithWhereWithoutUsersInput, SetorUpdateWithoutUsersInput>, SetorUncheckedUpdateWithoutUsersInput>
  }

  export type InstituicaoUnidadeUpdateOneWithoutUsersNestedInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutUsersInput, InstituicaoUnidadeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutUsersInput
    upsert?: InstituicaoUnidadeUpsertWithoutUsersInput
    disconnect?: InstituicaoUnidadeWhereInput | boolean
    delete?: InstituicaoUnidadeWhereInput | boolean
    connect?: InstituicaoUnidadeWhereUniqueInput
    update?: XOR<XOR<InstituicaoUnidadeUpdateToOneWithWhereWithoutUsersInput, InstituicaoUnidadeUpdateWithoutUsersInput>, InstituicaoUnidadeUncheckedUpdateWithoutUsersInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserCreateNestedManyWithoutClienteInput = {
    create?: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput> | UserCreateWithoutClienteInput[] | UserUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClienteInput | UserCreateOrConnectWithoutClienteInput[]
    createMany?: UserCreateManyClienteInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type OrdemdeServicoCreateNestedManyWithoutClienteInput = {
    create?: XOR<OrdemdeServicoCreateWithoutClienteInput, OrdemdeServicoUncheckedCreateWithoutClienteInput> | OrdemdeServicoCreateWithoutClienteInput[] | OrdemdeServicoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutClienteInput | OrdemdeServicoCreateOrConnectWithoutClienteInput[]
    createMany?: OrdemdeServicoCreateManyClienteInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaCreateNestedManyWithoutClienteInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutClienteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput> | controleDeAssistenciaTecnicaCreateWithoutClienteInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutClienteInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutClienteInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyClienteInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeLaboratioCreateNestedManyWithoutClienteInput = {
    create?: XOR<controleDeLaboratioCreateWithoutClienteInput, controleDeLaboratioUncheckedCreateWithoutClienteInput> | controleDeLaboratioCreateWithoutClienteInput[] | controleDeLaboratioUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutClienteInput | controleDeLaboratioCreateOrConnectWithoutClienteInput[]
    createMany?: controleDeLaboratioCreateManyClienteInputEnvelope
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
  }

  export type documentacaoTecnicaCreateNestedManyWithoutClienteInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutClienteInput, documentacaoTecnicaUncheckedCreateWithoutClienteInput> | documentacaoTecnicaCreateWithoutClienteInput[] | documentacaoTecnicaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutClienteInput | documentacaoTecnicaCreateOrConnectWithoutClienteInput[]
    createMany?: documentacaoTecnicaCreateManyClienteInputEnvelope
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput> | UserCreateWithoutClienteInput[] | UserUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClienteInput | UserCreateOrConnectWithoutClienteInput[]
    createMany?: UserCreateManyClienteInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type OrdemdeServicoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<OrdemdeServicoCreateWithoutClienteInput, OrdemdeServicoUncheckedCreateWithoutClienteInput> | OrdemdeServicoCreateWithoutClienteInput[] | OrdemdeServicoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutClienteInput | OrdemdeServicoCreateOrConnectWithoutClienteInput[]
    createMany?: OrdemdeServicoCreateManyClienteInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutClienteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput> | controleDeAssistenciaTecnicaCreateWithoutClienteInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutClienteInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutClienteInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyClienteInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeLaboratioUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<controleDeLaboratioCreateWithoutClienteInput, controleDeLaboratioUncheckedCreateWithoutClienteInput> | controleDeLaboratioCreateWithoutClienteInput[] | controleDeLaboratioUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutClienteInput | controleDeLaboratioCreateOrConnectWithoutClienteInput[]
    createMany?: controleDeLaboratioCreateManyClienteInputEnvelope
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
  }

  export type documentacaoTecnicaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutClienteInput, documentacaoTecnicaUncheckedCreateWithoutClienteInput> | documentacaoTecnicaCreateWithoutClienteInput[] | documentacaoTecnicaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutClienteInput | documentacaoTecnicaCreateOrConnectWithoutClienteInput[]
    createMany?: documentacaoTecnicaCreateManyClienteInputEnvelope
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutClienteNestedInput = {
    create?: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput> | UserCreateWithoutClienteInput[] | UserUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClienteInput | UserCreateOrConnectWithoutClienteInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutClienteInput | UserUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: UserCreateManyClienteInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutClienteInput | UserUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: UserUpdateManyWithWhereWithoutClienteInput | UserUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type OrdemdeServicoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutClienteInput, OrdemdeServicoUncheckedCreateWithoutClienteInput> | OrdemdeServicoCreateWithoutClienteInput[] | OrdemdeServicoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutClienteInput | OrdemdeServicoCreateOrConnectWithoutClienteInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutClienteInput | OrdemdeServicoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: OrdemdeServicoCreateManyClienteInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutClienteInput | OrdemdeServicoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutClienteInput | OrdemdeServicoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutClienteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput> | controleDeAssistenciaTecnicaCreateWithoutClienteInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutClienteInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutClienteInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutClienteInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyClienteInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutClienteInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutClienteInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeLaboratioUpdateManyWithoutClienteNestedInput = {
    create?: XOR<controleDeLaboratioCreateWithoutClienteInput, controleDeLaboratioUncheckedCreateWithoutClienteInput> | controleDeLaboratioCreateWithoutClienteInput[] | controleDeLaboratioUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutClienteInput | controleDeLaboratioCreateOrConnectWithoutClienteInput[]
    upsert?: controleDeLaboratioUpsertWithWhereUniqueWithoutClienteInput | controleDeLaboratioUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: controleDeLaboratioCreateManyClienteInputEnvelope
    set?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    disconnect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    delete?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    update?: controleDeLaboratioUpdateWithWhereUniqueWithoutClienteInput | controleDeLaboratioUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: controleDeLaboratioUpdateManyWithWhereWithoutClienteInput | controleDeLaboratioUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
  }

  export type documentacaoTecnicaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutClienteInput, documentacaoTecnicaUncheckedCreateWithoutClienteInput> | documentacaoTecnicaCreateWithoutClienteInput[] | documentacaoTecnicaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutClienteInput | documentacaoTecnicaCreateOrConnectWithoutClienteInput[]
    upsert?: documentacaoTecnicaUpsertWithWhereUniqueWithoutClienteInput | documentacaoTecnicaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: documentacaoTecnicaCreateManyClienteInputEnvelope
    set?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    disconnect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    delete?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    update?: documentacaoTecnicaUpdateWithWhereUniqueWithoutClienteInput | documentacaoTecnicaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: documentacaoTecnicaUpdateManyWithWhereWithoutClienteInput | documentacaoTecnicaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: documentacaoTecnicaScalarWhereInput | documentacaoTecnicaScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput> | UserCreateWithoutClienteInput[] | UserUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClienteInput | UserCreateOrConnectWithoutClienteInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutClienteInput | UserUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: UserCreateManyClienteInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutClienteInput | UserUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: UserUpdateManyWithWhereWithoutClienteInput | UserUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutClienteInput, OrdemdeServicoUncheckedCreateWithoutClienteInput> | OrdemdeServicoCreateWithoutClienteInput[] | OrdemdeServicoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutClienteInput | OrdemdeServicoCreateOrConnectWithoutClienteInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutClienteInput | OrdemdeServicoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: OrdemdeServicoCreateManyClienteInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutClienteInput | OrdemdeServicoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutClienteInput | OrdemdeServicoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutClienteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput> | controleDeAssistenciaTecnicaCreateWithoutClienteInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutClienteInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutClienteInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutClienteInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyClienteInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutClienteInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutClienteInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeLaboratioUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<controleDeLaboratioCreateWithoutClienteInput, controleDeLaboratioUncheckedCreateWithoutClienteInput> | controleDeLaboratioCreateWithoutClienteInput[] | controleDeLaboratioUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutClienteInput | controleDeLaboratioCreateOrConnectWithoutClienteInput[]
    upsert?: controleDeLaboratioUpsertWithWhereUniqueWithoutClienteInput | controleDeLaboratioUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: controleDeLaboratioCreateManyClienteInputEnvelope
    set?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    disconnect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    delete?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    update?: controleDeLaboratioUpdateWithWhereUniqueWithoutClienteInput | controleDeLaboratioUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: controleDeLaboratioUpdateManyWithWhereWithoutClienteInput | controleDeLaboratioUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
  }

  export type documentacaoTecnicaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutClienteInput, documentacaoTecnicaUncheckedCreateWithoutClienteInput> | documentacaoTecnicaCreateWithoutClienteInput[] | documentacaoTecnicaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutClienteInput | documentacaoTecnicaCreateOrConnectWithoutClienteInput[]
    upsert?: documentacaoTecnicaUpsertWithWhereUniqueWithoutClienteInput | documentacaoTecnicaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: documentacaoTecnicaCreateManyClienteInputEnvelope
    set?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    disconnect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    delete?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    update?: documentacaoTecnicaUpdateWithWhereUniqueWithoutClienteInput | documentacaoTecnicaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: documentacaoTecnicaUpdateManyWithWhereWithoutClienteInput | documentacaoTecnicaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: documentacaoTecnicaScalarWhereInput | documentacaoTecnicaScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutSetorInput = {
    create?: XOR<UserCreateWithoutSetorInput, UserUncheckedCreateWithoutSetorInput> | UserCreateWithoutSetorInput[] | UserUncheckedCreateWithoutSetorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSetorInput | UserCreateOrConnectWithoutSetorInput[]
    createMany?: UserCreateManySetorInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSetorInput = {
    create?: XOR<UserCreateWithoutSetorInput, UserUncheckedCreateWithoutSetorInput> | UserCreateWithoutSetorInput[] | UserUncheckedCreateWithoutSetorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSetorInput | UserCreateOrConnectWithoutSetorInput[]
    createMany?: UserCreateManySetorInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutSetorNestedInput = {
    create?: XOR<UserCreateWithoutSetorInput, UserUncheckedCreateWithoutSetorInput> | UserCreateWithoutSetorInput[] | UserUncheckedCreateWithoutSetorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSetorInput | UserCreateOrConnectWithoutSetorInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSetorInput | UserUpsertWithWhereUniqueWithoutSetorInput[]
    createMany?: UserCreateManySetorInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSetorInput | UserUpdateWithWhereUniqueWithoutSetorInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSetorInput | UserUpdateManyWithWhereWithoutSetorInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSetorNestedInput = {
    create?: XOR<UserCreateWithoutSetorInput, UserUncheckedCreateWithoutSetorInput> | UserCreateWithoutSetorInput[] | UserUncheckedCreateWithoutSetorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSetorInput | UserCreateOrConnectWithoutSetorInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSetorInput | UserUpsertWithWhereUniqueWithoutSetorInput[]
    createMany?: UserCreateManySetorInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSetorInput | UserUpdateWithWhereUniqueWithoutSetorInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSetorInput | UserUpdateManyWithWhereWithoutSetorInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<UserCreateWithoutInstituicaoInput, UserUncheckedCreateWithoutInstituicaoInput> | UserCreateWithoutInstituicaoInput[] | UserUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInstituicaoInput | UserCreateOrConnectWithoutInstituicaoInput[]
    createMany?: UserCreateManyInstituicaoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type OrdemdeServicoCreateNestedManyWithoutInstituicaoUnidadeInput = {
    create?: XOR<OrdemdeServicoCreateWithoutInstituicaoUnidadeInput, OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput> | OrdemdeServicoCreateWithoutInstituicaoUnidadeInput[] | OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutInstituicaoUnidadeInput | OrdemdeServicoCreateOrConnectWithoutInstituicaoUnidadeInput[]
    createMany?: OrdemdeServicoCreateManyInstituicaoUnidadeInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaCreateNestedManyWithoutInstituicaoUnidadeInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput> | controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutInstituicaoUnidadeInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyInstituicaoUnidadeInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeLaudoTecnicoCreateNestedManyWithoutInstituicaoUnidadeInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput, controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput> | controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoCreateOrConnectWithoutInstituicaoUnidadeInput[]
    createMany?: controleDeLaudoTecnicoCreateManyInstituicaoUnidadeInputEnvelope
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
  }

  export type controleDeLaboratioCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<controleDeLaboratioCreateWithoutInstituicaoInput, controleDeLaboratioUncheckedCreateWithoutInstituicaoInput> | controleDeLaboratioCreateWithoutInstituicaoInput[] | controleDeLaboratioUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutInstituicaoInput | controleDeLaboratioCreateOrConnectWithoutInstituicaoInput[]
    createMany?: controleDeLaboratioCreateManyInstituicaoInputEnvelope
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
  }

  export type controledeMaquinasPendentesOroCreateNestedManyWithoutInstituicaoUnidadeInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput, controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput> | controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroCreateOrConnectWithoutInstituicaoUnidadeInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyInstituicaoUnidadeInputEnvelope
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
  }

  export type documentacaoTecnicaCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutInstituicaoInput, documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput> | documentacaoTecnicaCreateWithoutInstituicaoInput[] | documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutInstituicaoInput | documentacaoTecnicaCreateOrConnectWithoutInstituicaoInput[]
    createMany?: documentacaoTecnicaCreateManyInstituicaoInputEnvelope
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<UserCreateWithoutInstituicaoInput, UserUncheckedCreateWithoutInstituicaoInput> | UserCreateWithoutInstituicaoInput[] | UserUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInstituicaoInput | UserCreateOrConnectWithoutInstituicaoInput[]
    createMany?: UserCreateManyInstituicaoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type OrdemdeServicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput = {
    create?: XOR<OrdemdeServicoCreateWithoutInstituicaoUnidadeInput, OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput> | OrdemdeServicoCreateWithoutInstituicaoUnidadeInput[] | OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutInstituicaoUnidadeInput | OrdemdeServicoCreateOrConnectWithoutInstituicaoUnidadeInput[]
    createMany?: OrdemdeServicoCreateManyInstituicaoUnidadeInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput> | controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutInstituicaoUnidadeInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyInstituicaoUnidadeInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput, controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput> | controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoCreateOrConnectWithoutInstituicaoUnidadeInput[]
    createMany?: controleDeLaudoTecnicoCreateManyInstituicaoUnidadeInputEnvelope
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
  }

  export type controleDeLaboratioUncheckedCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<controleDeLaboratioCreateWithoutInstituicaoInput, controleDeLaboratioUncheckedCreateWithoutInstituicaoInput> | controleDeLaboratioCreateWithoutInstituicaoInput[] | controleDeLaboratioUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutInstituicaoInput | controleDeLaboratioCreateOrConnectWithoutInstituicaoInput[]
    createMany?: controleDeLaboratioCreateManyInstituicaoInputEnvelope
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
  }

  export type controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput, controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput> | controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroCreateOrConnectWithoutInstituicaoUnidadeInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyInstituicaoUnidadeInputEnvelope
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
  }

  export type documentacaoTecnicaUncheckedCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutInstituicaoInput, documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput> | documentacaoTecnicaCreateWithoutInstituicaoInput[] | documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutInstituicaoInput | documentacaoTecnicaCreateOrConnectWithoutInstituicaoInput[]
    createMany?: documentacaoTecnicaCreateManyInstituicaoInputEnvelope
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<UserCreateWithoutInstituicaoInput, UserUncheckedCreateWithoutInstituicaoInput> | UserCreateWithoutInstituicaoInput[] | UserUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInstituicaoInput | UserCreateOrConnectWithoutInstituicaoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutInstituicaoInput | UserUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: UserCreateManyInstituicaoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutInstituicaoInput | UserUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutInstituicaoInput | UserUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type OrdemdeServicoUpdateManyWithoutInstituicaoUnidadeNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutInstituicaoUnidadeInput, OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput> | OrdemdeServicoCreateWithoutInstituicaoUnidadeInput[] | OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutInstituicaoUnidadeInput | OrdemdeServicoCreateOrConnectWithoutInstituicaoUnidadeInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput | OrdemdeServicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    createMany?: OrdemdeServicoCreateManyInstituicaoUnidadeInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput | OrdemdeServicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput | OrdemdeServicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithoutInstituicaoUnidadeNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput> | controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutInstituicaoUnidadeInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyInstituicaoUnidadeInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutInstituicaoUnidadeInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeLaudoTecnicoUpdateManyWithoutInstituicaoUnidadeNestedInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput, controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput> | controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoCreateOrConnectWithoutInstituicaoUnidadeInput[]
    upsert?: controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    createMany?: controleDeLaudoTecnicoCreateManyInstituicaoUnidadeInputEnvelope
    set?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    disconnect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    delete?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    update?: controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    updateMany?: controleDeLaudoTecnicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput[]
    deleteMany?: controleDeLaudoTecnicoScalarWhereInput | controleDeLaudoTecnicoScalarWhereInput[]
  }

  export type controleDeLaboratioUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<controleDeLaboratioCreateWithoutInstituicaoInput, controleDeLaboratioUncheckedCreateWithoutInstituicaoInput> | controleDeLaboratioCreateWithoutInstituicaoInput[] | controleDeLaboratioUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutInstituicaoInput | controleDeLaboratioCreateOrConnectWithoutInstituicaoInput[]
    upsert?: controleDeLaboratioUpsertWithWhereUniqueWithoutInstituicaoInput | controleDeLaboratioUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: controleDeLaboratioCreateManyInstituicaoInputEnvelope
    set?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    disconnect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    delete?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    update?: controleDeLaboratioUpdateWithWhereUniqueWithoutInstituicaoInput | controleDeLaboratioUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: controleDeLaboratioUpdateManyWithWhereWithoutInstituicaoInput | controleDeLaboratioUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
  }

  export type controledeMaquinasPendentesOroUpdateManyWithoutInstituicaoUnidadeNestedInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput, controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput> | controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroCreateOrConnectWithoutInstituicaoUnidadeInput[]
    upsert?: controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyInstituicaoUnidadeInputEnvelope
    set?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    disconnect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    delete?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    update?: controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    updateMany?: controledeMaquinasPendentesOroUpdateManyWithWhereWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroUpdateManyWithWhereWithoutInstituicaoUnidadeInput[]
    deleteMany?: controledeMaquinasPendentesOroScalarWhereInput | controledeMaquinasPendentesOroScalarWhereInput[]
  }

  export type documentacaoTecnicaUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutInstituicaoInput, documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput> | documentacaoTecnicaCreateWithoutInstituicaoInput[] | documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutInstituicaoInput | documentacaoTecnicaCreateOrConnectWithoutInstituicaoInput[]
    upsert?: documentacaoTecnicaUpsertWithWhereUniqueWithoutInstituicaoInput | documentacaoTecnicaUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: documentacaoTecnicaCreateManyInstituicaoInputEnvelope
    set?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    disconnect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    delete?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    update?: documentacaoTecnicaUpdateWithWhereUniqueWithoutInstituicaoInput | documentacaoTecnicaUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: documentacaoTecnicaUpdateManyWithWhereWithoutInstituicaoInput | documentacaoTecnicaUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: documentacaoTecnicaScalarWhereInput | documentacaoTecnicaScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<UserCreateWithoutInstituicaoInput, UserUncheckedCreateWithoutInstituicaoInput> | UserCreateWithoutInstituicaoInput[] | UserUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInstituicaoInput | UserCreateOrConnectWithoutInstituicaoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutInstituicaoInput | UserUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: UserCreateManyInstituicaoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutInstituicaoInput | UserUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutInstituicaoInput | UserUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutInstituicaoUnidadeInput, OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput> | OrdemdeServicoCreateWithoutInstituicaoUnidadeInput[] | OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutInstituicaoUnidadeInput | OrdemdeServicoCreateOrConnectWithoutInstituicaoUnidadeInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput | OrdemdeServicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    createMany?: OrdemdeServicoCreateManyInstituicaoUnidadeInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput | OrdemdeServicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput | OrdemdeServicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput> | controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutInstituicaoUnidadeInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyInstituicaoUnidadeInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutInstituicaoUnidadeInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutInstituicaoUnidadeInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput, controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput> | controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoCreateOrConnectWithoutInstituicaoUnidadeInput[]
    upsert?: controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    createMany?: controleDeLaudoTecnicoCreateManyInstituicaoUnidadeInputEnvelope
    set?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    disconnect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    delete?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    update?: controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    updateMany?: controleDeLaudoTecnicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput | controleDeLaudoTecnicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput[]
    deleteMany?: controleDeLaudoTecnicoScalarWhereInput | controleDeLaudoTecnicoScalarWhereInput[]
  }

  export type controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<controleDeLaboratioCreateWithoutInstituicaoInput, controleDeLaboratioUncheckedCreateWithoutInstituicaoInput> | controleDeLaboratioCreateWithoutInstituicaoInput[] | controleDeLaboratioUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutInstituicaoInput | controleDeLaboratioCreateOrConnectWithoutInstituicaoInput[]
    upsert?: controleDeLaboratioUpsertWithWhereUniqueWithoutInstituicaoInput | controleDeLaboratioUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: controleDeLaboratioCreateManyInstituicaoInputEnvelope
    set?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    disconnect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    delete?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    update?: controleDeLaboratioUpdateWithWhereUniqueWithoutInstituicaoInput | controleDeLaboratioUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: controleDeLaboratioUpdateManyWithWhereWithoutInstituicaoInput | controleDeLaboratioUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput, controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput> | controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroCreateOrConnectWithoutInstituicaoUnidadeInput[]
    upsert?: controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyInstituicaoUnidadeInputEnvelope
    set?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    disconnect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    delete?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    update?: controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput[]
    updateMany?: controledeMaquinasPendentesOroUpdateManyWithWhereWithoutInstituicaoUnidadeInput | controledeMaquinasPendentesOroUpdateManyWithWhereWithoutInstituicaoUnidadeInput[]
    deleteMany?: controledeMaquinasPendentesOroScalarWhereInput | controledeMaquinasPendentesOroScalarWhereInput[]
  }

  export type documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutInstituicaoInput, documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput> | documentacaoTecnicaCreateWithoutInstituicaoInput[] | documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutInstituicaoInput | documentacaoTecnicaCreateOrConnectWithoutInstituicaoInput[]
    upsert?: documentacaoTecnicaUpsertWithWhereUniqueWithoutInstituicaoInput | documentacaoTecnicaUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: documentacaoTecnicaCreateManyInstituicaoInputEnvelope
    set?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    disconnect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    delete?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    update?: documentacaoTecnicaUpdateWithWhereUniqueWithoutInstituicaoInput | documentacaoTecnicaUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: documentacaoTecnicaUpdateManyWithWhereWithoutInstituicaoInput | documentacaoTecnicaUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: documentacaoTecnicaScalarWhereInput | documentacaoTecnicaScalarWhereInput[]
  }

  export type OrdemdeServicoCreateNestedManyWithoutStatusOrdemdeServicoInput = {
    create?: XOR<OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput, OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput> | OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput[] | OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutStatusOrdemdeServicoInput | OrdemdeServicoCreateOrConnectWithoutStatusOrdemdeServicoInput[]
    createMany?: OrdemdeServicoCreateManyStatusOrdemdeServicoInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type FormTecnicoCreateNestedManyWithoutStatusOrdemdeServicoInput = {
    create?: XOR<FormTecnicoCreateWithoutStatusOrdemdeServicoInput, FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput> | FormTecnicoCreateWithoutStatusOrdemdeServicoInput[] | FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput[]
    connectOrCreate?: FormTecnicoCreateOrConnectWithoutStatusOrdemdeServicoInput | FormTecnicoCreateOrConnectWithoutStatusOrdemdeServicoInput[]
    createMany?: FormTecnicoCreateManyStatusOrdemdeServicoInputEnvelope
    connect?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
  }

  export type OrdemdeServicoUncheckedCreateNestedManyWithoutStatusOrdemdeServicoInput = {
    create?: XOR<OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput, OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput> | OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput[] | OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutStatusOrdemdeServicoInput | OrdemdeServicoCreateOrConnectWithoutStatusOrdemdeServicoInput[]
    createMany?: OrdemdeServicoCreateManyStatusOrdemdeServicoInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type FormTecnicoUncheckedCreateNestedManyWithoutStatusOrdemdeServicoInput = {
    create?: XOR<FormTecnicoCreateWithoutStatusOrdemdeServicoInput, FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput> | FormTecnicoCreateWithoutStatusOrdemdeServicoInput[] | FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput[]
    connectOrCreate?: FormTecnicoCreateOrConnectWithoutStatusOrdemdeServicoInput | FormTecnicoCreateOrConnectWithoutStatusOrdemdeServicoInput[]
    createMany?: FormTecnicoCreateManyStatusOrdemdeServicoInputEnvelope
    connect?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
  }

  export type OrdemdeServicoUpdateManyWithoutStatusOrdemdeServicoNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput, OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput> | OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput[] | OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutStatusOrdemdeServicoInput | OrdemdeServicoCreateOrConnectWithoutStatusOrdemdeServicoInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput | OrdemdeServicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput[]
    createMany?: OrdemdeServicoCreateManyStatusOrdemdeServicoInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput | OrdemdeServicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput | OrdemdeServicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type FormTecnicoUpdateManyWithoutStatusOrdemdeServicoNestedInput = {
    create?: XOR<FormTecnicoCreateWithoutStatusOrdemdeServicoInput, FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput> | FormTecnicoCreateWithoutStatusOrdemdeServicoInput[] | FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput[]
    connectOrCreate?: FormTecnicoCreateOrConnectWithoutStatusOrdemdeServicoInput | FormTecnicoCreateOrConnectWithoutStatusOrdemdeServicoInput[]
    upsert?: FormTecnicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput | FormTecnicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput[]
    createMany?: FormTecnicoCreateManyStatusOrdemdeServicoInputEnvelope
    set?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
    disconnect?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
    delete?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
    connect?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
    update?: FormTecnicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput | FormTecnicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput[]
    updateMany?: FormTecnicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput | FormTecnicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput[]
    deleteMany?: FormTecnicoScalarWhereInput | FormTecnicoScalarWhereInput[]
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutStatusOrdemdeServicoNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput, OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput> | OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput[] | OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutStatusOrdemdeServicoInput | OrdemdeServicoCreateOrConnectWithoutStatusOrdemdeServicoInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput | OrdemdeServicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput[]
    createMany?: OrdemdeServicoCreateManyStatusOrdemdeServicoInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput | OrdemdeServicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput | OrdemdeServicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type FormTecnicoUncheckedUpdateManyWithoutStatusOrdemdeServicoNestedInput = {
    create?: XOR<FormTecnicoCreateWithoutStatusOrdemdeServicoInput, FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput> | FormTecnicoCreateWithoutStatusOrdemdeServicoInput[] | FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput[]
    connectOrCreate?: FormTecnicoCreateOrConnectWithoutStatusOrdemdeServicoInput | FormTecnicoCreateOrConnectWithoutStatusOrdemdeServicoInput[]
    upsert?: FormTecnicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput | FormTecnicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput[]
    createMany?: FormTecnicoCreateManyStatusOrdemdeServicoInputEnvelope
    set?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
    disconnect?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
    delete?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
    connect?: FormTecnicoWhereUniqueInput | FormTecnicoWhereUniqueInput[]
    update?: FormTecnicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput | FormTecnicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput[]
    updateMany?: FormTecnicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput | FormTecnicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput[]
    deleteMany?: FormTecnicoScalarWhereInput | FormTecnicoScalarWhereInput[]
  }

  export type OrdemdeServicoCreateNestedManyWithoutTipodesolicitacaoInput = {
    create?: XOR<OrdemdeServicoCreateWithoutTipodesolicitacaoInput, OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput> | OrdemdeServicoCreateWithoutTipodesolicitacaoInput[] | OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutTipodesolicitacaoInput | OrdemdeServicoCreateOrConnectWithoutTipodesolicitacaoInput[]
    createMany?: OrdemdeServicoCreateManyTipodesolicitacaoInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type OrdemdeServicoUncheckedCreateNestedManyWithoutTipodesolicitacaoInput = {
    create?: XOR<OrdemdeServicoCreateWithoutTipodesolicitacaoInput, OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput> | OrdemdeServicoCreateWithoutTipodesolicitacaoInput[] | OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutTipodesolicitacaoInput | OrdemdeServicoCreateOrConnectWithoutTipodesolicitacaoInput[]
    createMany?: OrdemdeServicoCreateManyTipodesolicitacaoInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type OrdemdeServicoUpdateManyWithoutTipodesolicitacaoNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutTipodesolicitacaoInput, OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput> | OrdemdeServicoCreateWithoutTipodesolicitacaoInput[] | OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutTipodesolicitacaoInput | OrdemdeServicoCreateOrConnectWithoutTipodesolicitacaoInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutTipodesolicitacaoInput | OrdemdeServicoUpsertWithWhereUniqueWithoutTipodesolicitacaoInput[]
    createMany?: OrdemdeServicoCreateManyTipodesolicitacaoInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutTipodesolicitacaoInput | OrdemdeServicoUpdateWithWhereUniqueWithoutTipodesolicitacaoInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutTipodesolicitacaoInput | OrdemdeServicoUpdateManyWithWhereWithoutTipodesolicitacaoInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutTipodesolicitacaoNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutTipodesolicitacaoInput, OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput> | OrdemdeServicoCreateWithoutTipodesolicitacaoInput[] | OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutTipodesolicitacaoInput | OrdemdeServicoCreateOrConnectWithoutTipodesolicitacaoInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutTipodesolicitacaoInput | OrdemdeServicoUpsertWithWhereUniqueWithoutTipodesolicitacaoInput[]
    createMany?: OrdemdeServicoCreateManyTipodesolicitacaoInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutTipodesolicitacaoInput | OrdemdeServicoUpdateWithWhereUniqueWithoutTipodesolicitacaoInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutTipodesolicitacaoInput | OrdemdeServicoUpdateManyWithWhereWithoutTipodesolicitacaoInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type OrdemdeServicoCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<OrdemdeServicoCreateWithoutTecnicoInput, OrdemdeServicoUncheckedCreateWithoutTecnicoInput> | OrdemdeServicoCreateWithoutTecnicoInput[] | OrdemdeServicoUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutTecnicoInput | OrdemdeServicoCreateOrConnectWithoutTecnicoInput[]
    createMany?: OrdemdeServicoCreateManyTecnicoInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutTecnicoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput> | controleDeAssistenciaTecnicaCreateWithoutTecnicoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutTecnicoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutTecnicoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyTecnicoInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeLaudoTecnicoCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutTecnicoInput, controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput> | controleDeLaudoTecnicoCreateWithoutTecnicoInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutTecnicoInput | controleDeLaudoTecnicoCreateOrConnectWithoutTecnicoInput[]
    createMany?: controleDeLaudoTecnicoCreateManyTecnicoInputEnvelope
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
  }

  export type documentacaoTecnicaCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutTecnicoInput, documentacaoTecnicaUncheckedCreateWithoutTecnicoInput> | documentacaoTecnicaCreateWithoutTecnicoInput[] | documentacaoTecnicaUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutTecnicoInput | documentacaoTecnicaCreateOrConnectWithoutTecnicoInput[]
    createMany?: documentacaoTecnicaCreateManyTecnicoInputEnvelope
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
  }

  export type OrdemdeServicoUncheckedCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<OrdemdeServicoCreateWithoutTecnicoInput, OrdemdeServicoUncheckedCreateWithoutTecnicoInput> | OrdemdeServicoCreateWithoutTecnicoInput[] | OrdemdeServicoUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutTecnicoInput | OrdemdeServicoCreateOrConnectWithoutTecnicoInput[]
    createMany?: OrdemdeServicoCreateManyTecnicoInputEnvelope
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutTecnicoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput> | controleDeAssistenciaTecnicaCreateWithoutTecnicoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutTecnicoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutTecnicoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyTecnicoInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutTecnicoInput, controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput> | controleDeLaudoTecnicoCreateWithoutTecnicoInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutTecnicoInput | controleDeLaudoTecnicoCreateOrConnectWithoutTecnicoInput[]
    createMany?: controleDeLaudoTecnicoCreateManyTecnicoInputEnvelope
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
  }

  export type documentacaoTecnicaUncheckedCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutTecnicoInput, documentacaoTecnicaUncheckedCreateWithoutTecnicoInput> | documentacaoTecnicaCreateWithoutTecnicoInput[] | documentacaoTecnicaUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutTecnicoInput | documentacaoTecnicaCreateOrConnectWithoutTecnicoInput[]
    createMany?: documentacaoTecnicaCreateManyTecnicoInputEnvelope
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
  }

  export type OrdemdeServicoUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutTecnicoInput, OrdemdeServicoUncheckedCreateWithoutTecnicoInput> | OrdemdeServicoCreateWithoutTecnicoInput[] | OrdemdeServicoUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutTecnicoInput | OrdemdeServicoCreateOrConnectWithoutTecnicoInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutTecnicoInput | OrdemdeServicoUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: OrdemdeServicoCreateManyTecnicoInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutTecnicoInput | OrdemdeServicoUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutTecnicoInput | OrdemdeServicoUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutTecnicoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput> | controleDeAssistenciaTecnicaCreateWithoutTecnicoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutTecnicoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutTecnicoInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutTecnicoInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyTecnicoInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutTecnicoInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutTecnicoInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeLaudoTecnicoUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutTecnicoInput, controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput> | controleDeLaudoTecnicoCreateWithoutTecnicoInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutTecnicoInput | controleDeLaudoTecnicoCreateOrConnectWithoutTecnicoInput[]
    upsert?: controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutTecnicoInput | controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: controleDeLaudoTecnicoCreateManyTecnicoInputEnvelope
    set?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    disconnect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    delete?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    update?: controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutTecnicoInput | controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: controleDeLaudoTecnicoUpdateManyWithWhereWithoutTecnicoInput | controleDeLaudoTecnicoUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: controleDeLaudoTecnicoScalarWhereInput | controleDeLaudoTecnicoScalarWhereInput[]
  }

  export type documentacaoTecnicaUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutTecnicoInput, documentacaoTecnicaUncheckedCreateWithoutTecnicoInput> | documentacaoTecnicaCreateWithoutTecnicoInput[] | documentacaoTecnicaUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutTecnicoInput | documentacaoTecnicaCreateOrConnectWithoutTecnicoInput[]
    upsert?: documentacaoTecnicaUpsertWithWhereUniqueWithoutTecnicoInput | documentacaoTecnicaUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: documentacaoTecnicaCreateManyTecnicoInputEnvelope
    set?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    disconnect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    delete?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    update?: documentacaoTecnicaUpdateWithWhereUniqueWithoutTecnicoInput | documentacaoTecnicaUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: documentacaoTecnicaUpdateManyWithWhereWithoutTecnicoInput | documentacaoTecnicaUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: documentacaoTecnicaScalarWhereInput | documentacaoTecnicaScalarWhereInput[]
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutTecnicoInput, OrdemdeServicoUncheckedCreateWithoutTecnicoInput> | OrdemdeServicoCreateWithoutTecnicoInput[] | OrdemdeServicoUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutTecnicoInput | OrdemdeServicoCreateOrConnectWithoutTecnicoInput[]
    upsert?: OrdemdeServicoUpsertWithWhereUniqueWithoutTecnicoInput | OrdemdeServicoUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: OrdemdeServicoCreateManyTecnicoInputEnvelope
    set?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    disconnect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    delete?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    connect?: OrdemdeServicoWhereUniqueInput | OrdemdeServicoWhereUniqueInput[]
    update?: OrdemdeServicoUpdateWithWhereUniqueWithoutTecnicoInput | OrdemdeServicoUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: OrdemdeServicoUpdateManyWithWhereWithoutTecnicoInput | OrdemdeServicoUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutTecnicoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput> | controleDeAssistenciaTecnicaCreateWithoutTecnicoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutTecnicoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutTecnicoInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutTecnicoInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyTecnicoInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutTecnicoInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutTecnicoInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeLaudoTecnicoUncheckedUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutTecnicoInput, controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput> | controleDeLaudoTecnicoCreateWithoutTecnicoInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutTecnicoInput | controleDeLaudoTecnicoCreateOrConnectWithoutTecnicoInput[]
    upsert?: controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutTecnicoInput | controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: controleDeLaudoTecnicoCreateManyTecnicoInputEnvelope
    set?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    disconnect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    delete?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    update?: controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutTecnicoInput | controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: controleDeLaudoTecnicoUpdateManyWithWhereWithoutTecnicoInput | controleDeLaudoTecnicoUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: controleDeLaudoTecnicoScalarWhereInput | controleDeLaudoTecnicoScalarWhereInput[]
  }

  export type documentacaoTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<documentacaoTecnicaCreateWithoutTecnicoInput, documentacaoTecnicaUncheckedCreateWithoutTecnicoInput> | documentacaoTecnicaCreateWithoutTecnicoInput[] | documentacaoTecnicaUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: documentacaoTecnicaCreateOrConnectWithoutTecnicoInput | documentacaoTecnicaCreateOrConnectWithoutTecnicoInput[]
    upsert?: documentacaoTecnicaUpsertWithWhereUniqueWithoutTecnicoInput | documentacaoTecnicaUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: documentacaoTecnicaCreateManyTecnicoInputEnvelope
    set?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    disconnect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    delete?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    connect?: documentacaoTecnicaWhereUniqueInput | documentacaoTecnicaWhereUniqueInput[]
    update?: documentacaoTecnicaUpdateWithWhereUniqueWithoutTecnicoInput | documentacaoTecnicaUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: documentacaoTecnicaUpdateManyWithWhereWithoutTecnicoInput | documentacaoTecnicaUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: documentacaoTecnicaScalarWhereInput | documentacaoTecnicaScalarWhereInput[]
  }

  export type ClienteCreateNestedOneWithoutOrdensDeServicoInput = {
    create?: XOR<ClienteCreateWithoutOrdensDeServicoInput, ClienteUncheckedCreateWithoutOrdensDeServicoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutOrdensDeServicoInput
    connect?: ClienteWhereUniqueInput
  }

  export type TecnicoCreateNestedOneWithoutOrdensInput = {
    create?: XOR<TecnicoCreateWithoutOrdensInput, TecnicoUncheckedCreateWithoutOrdensInput>
    connectOrCreate?: TecnicoCreateOrConnectWithoutOrdensInput
    connect?: TecnicoWhereUniqueInput
  }

  export type statusOrdemdeServicoCreateNestedOneWithoutOrdensInput = {
    create?: XOR<statusOrdemdeServicoCreateWithoutOrdensInput, statusOrdemdeServicoUncheckedCreateWithoutOrdensInput>
    connectOrCreate?: statusOrdemdeServicoCreateOrConnectWithoutOrdensInput
    connect?: statusOrdemdeServicoWhereUniqueInput
  }

  export type TipodeSolicitacaoCreateNestedOneWithoutOrdensInput = {
    create?: XOR<TipodeSolicitacaoCreateWithoutOrdensInput, TipodeSolicitacaoUncheckedCreateWithoutOrdensInput>
    connectOrCreate?: TipodeSolicitacaoCreateOrConnectWithoutOrdensInput
    connect?: TipodeSolicitacaoWhereUniqueInput
  }

  export type InstituicaoUnidadeCreateNestedOneWithoutOrdensInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutOrdensInput, InstituicaoUnidadeUncheckedCreateWithoutOrdensInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutOrdensInput
    connect?: InstituicaoUnidadeWhereUniqueInput
  }

  export type FormTecnicoCreateNestedOneWithoutOrdemDeServicoInput = {
    create?: XOR<FormTecnicoCreateWithoutOrdemDeServicoInput, FormTecnicoUncheckedCreateWithoutOrdemDeServicoInput>
    connectOrCreate?: FormTecnicoCreateOrConnectWithoutOrdemDeServicoInput
    connect?: FormTecnicoWhereUniqueInput
  }

  export type FormTecnicoUncheckedCreateNestedOneWithoutOrdemDeServicoInput = {
    create?: XOR<FormTecnicoCreateWithoutOrdemDeServicoInput, FormTecnicoUncheckedCreateWithoutOrdemDeServicoInput>
    connectOrCreate?: FormTecnicoCreateOrConnectWithoutOrdemDeServicoInput
    connect?: FormTecnicoWhereUniqueInput
  }

  export type ClienteUpdateOneWithoutOrdensDeServicoNestedInput = {
    create?: XOR<ClienteCreateWithoutOrdensDeServicoInput, ClienteUncheckedCreateWithoutOrdensDeServicoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutOrdensDeServicoInput
    upsert?: ClienteUpsertWithoutOrdensDeServicoInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutOrdensDeServicoInput, ClienteUpdateWithoutOrdensDeServicoInput>, ClienteUncheckedUpdateWithoutOrdensDeServicoInput>
  }

  export type TecnicoUpdateOneRequiredWithoutOrdensNestedInput = {
    create?: XOR<TecnicoCreateWithoutOrdensInput, TecnicoUncheckedCreateWithoutOrdensInput>
    connectOrCreate?: TecnicoCreateOrConnectWithoutOrdensInput
    upsert?: TecnicoUpsertWithoutOrdensInput
    connect?: TecnicoWhereUniqueInput
    update?: XOR<XOR<TecnicoUpdateToOneWithWhereWithoutOrdensInput, TecnicoUpdateWithoutOrdensInput>, TecnicoUncheckedUpdateWithoutOrdensInput>
  }

  export type statusOrdemdeServicoUpdateOneRequiredWithoutOrdensNestedInput = {
    create?: XOR<statusOrdemdeServicoCreateWithoutOrdensInput, statusOrdemdeServicoUncheckedCreateWithoutOrdensInput>
    connectOrCreate?: statusOrdemdeServicoCreateOrConnectWithoutOrdensInput
    upsert?: statusOrdemdeServicoUpsertWithoutOrdensInput
    connect?: statusOrdemdeServicoWhereUniqueInput
    update?: XOR<XOR<statusOrdemdeServicoUpdateToOneWithWhereWithoutOrdensInput, statusOrdemdeServicoUpdateWithoutOrdensInput>, statusOrdemdeServicoUncheckedUpdateWithoutOrdensInput>
  }

  export type TipodeSolicitacaoUpdateOneRequiredWithoutOrdensNestedInput = {
    create?: XOR<TipodeSolicitacaoCreateWithoutOrdensInput, TipodeSolicitacaoUncheckedCreateWithoutOrdensInput>
    connectOrCreate?: TipodeSolicitacaoCreateOrConnectWithoutOrdensInput
    upsert?: TipodeSolicitacaoUpsertWithoutOrdensInput
    connect?: TipodeSolicitacaoWhereUniqueInput
    update?: XOR<XOR<TipodeSolicitacaoUpdateToOneWithWhereWithoutOrdensInput, TipodeSolicitacaoUpdateWithoutOrdensInput>, TipodeSolicitacaoUncheckedUpdateWithoutOrdensInput>
  }

  export type InstituicaoUnidadeUpdateOneRequiredWithoutOrdensNestedInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutOrdensInput, InstituicaoUnidadeUncheckedCreateWithoutOrdensInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutOrdensInput
    upsert?: InstituicaoUnidadeUpsertWithoutOrdensInput
    connect?: InstituicaoUnidadeWhereUniqueInput
    update?: XOR<XOR<InstituicaoUnidadeUpdateToOneWithWhereWithoutOrdensInput, InstituicaoUnidadeUpdateWithoutOrdensInput>, InstituicaoUnidadeUncheckedUpdateWithoutOrdensInput>
  }

  export type FormTecnicoUpdateOneWithoutOrdemDeServicoNestedInput = {
    create?: XOR<FormTecnicoCreateWithoutOrdemDeServicoInput, FormTecnicoUncheckedCreateWithoutOrdemDeServicoInput>
    connectOrCreate?: FormTecnicoCreateOrConnectWithoutOrdemDeServicoInput
    upsert?: FormTecnicoUpsertWithoutOrdemDeServicoInput
    disconnect?: FormTecnicoWhereInput | boolean
    delete?: FormTecnicoWhereInput | boolean
    connect?: FormTecnicoWhereUniqueInput
    update?: XOR<XOR<FormTecnicoUpdateToOneWithWhereWithoutOrdemDeServicoInput, FormTecnicoUpdateWithoutOrdemDeServicoInput>, FormTecnicoUncheckedUpdateWithoutOrdemDeServicoInput>
  }

  export type FormTecnicoUncheckedUpdateOneWithoutOrdemDeServicoNestedInput = {
    create?: XOR<FormTecnicoCreateWithoutOrdemDeServicoInput, FormTecnicoUncheckedCreateWithoutOrdemDeServicoInput>
    connectOrCreate?: FormTecnicoCreateOrConnectWithoutOrdemDeServicoInput
    upsert?: FormTecnicoUpsertWithoutOrdemDeServicoInput
    disconnect?: FormTecnicoWhereInput | boolean
    delete?: FormTecnicoWhereInput | boolean
    connect?: FormTecnicoWhereUniqueInput
    update?: XOR<XOR<FormTecnicoUpdateToOneWithWhereWithoutOrdemDeServicoInput, FormTecnicoUpdateWithoutOrdemDeServicoInput>, FormTecnicoUncheckedUpdateWithoutOrdemDeServicoInput>
  }

  export type statusOrdemdeServicoCreateNestedOneWithoutFormstecnicoInput = {
    create?: XOR<statusOrdemdeServicoCreateWithoutFormstecnicoInput, statusOrdemdeServicoUncheckedCreateWithoutFormstecnicoInput>
    connectOrCreate?: statusOrdemdeServicoCreateOrConnectWithoutFormstecnicoInput
    connect?: statusOrdemdeServicoWhereUniqueInput
  }

  export type OrdemdeServicoCreateNestedOneWithoutFormtecnicoInput = {
    create?: XOR<OrdemdeServicoCreateWithoutFormtecnicoInput, OrdemdeServicoUncheckedCreateWithoutFormtecnicoInput>
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutFormtecnicoInput
    connect?: OrdemdeServicoWhereUniqueInput
  }

  export type statusOrdemdeServicoUpdateOneRequiredWithoutFormstecnicoNestedInput = {
    create?: XOR<statusOrdemdeServicoCreateWithoutFormstecnicoInput, statusOrdemdeServicoUncheckedCreateWithoutFormstecnicoInput>
    connectOrCreate?: statusOrdemdeServicoCreateOrConnectWithoutFormstecnicoInput
    upsert?: statusOrdemdeServicoUpsertWithoutFormstecnicoInput
    connect?: statusOrdemdeServicoWhereUniqueInput
    update?: XOR<XOR<statusOrdemdeServicoUpdateToOneWithWhereWithoutFormstecnicoInput, statusOrdemdeServicoUpdateWithoutFormstecnicoInput>, statusOrdemdeServicoUncheckedUpdateWithoutFormstecnicoInput>
  }

  export type OrdemdeServicoUpdateOneRequiredWithoutFormtecnicoNestedInput = {
    create?: XOR<OrdemdeServicoCreateWithoutFormtecnicoInput, OrdemdeServicoUncheckedCreateWithoutFormtecnicoInput>
    connectOrCreate?: OrdemdeServicoCreateOrConnectWithoutFormtecnicoInput
    upsert?: OrdemdeServicoUpsertWithoutFormtecnicoInput
    connect?: OrdemdeServicoWhereUniqueInput
    update?: XOR<XOR<OrdemdeServicoUpdateToOneWithWhereWithoutFormtecnicoInput, OrdemdeServicoUpdateWithoutFormtecnicoInput>, OrdemdeServicoUncheckedUpdateWithoutFormtecnicoInput>
  }

  export type controleDeAssistenciaTecnicaCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput> | controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutEquipamentoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyEquipamentoInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeLaudoTecnicoCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutEquipamentoInput, controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput> | controleDeLaudoTecnicoCreateWithoutEquipamentoInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutEquipamentoInput | controleDeLaudoTecnicoCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controleDeLaudoTecnicoCreateManyEquipamentoInputEnvelope
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
  }

  export type controleDeLaboratioCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controleDeLaboratioCreateWithoutEquipamentoInput, controleDeLaboratioUncheckedCreateWithoutEquipamentoInput> | controleDeLaboratioCreateWithoutEquipamentoInput[] | controleDeLaboratioUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutEquipamentoInput | controleDeLaboratioCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controleDeLaboratioCreateManyEquipamentoInputEnvelope
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
  }

  export type controleDeMaquinasPendentesLaboratorioCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput> | controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput[] | controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controleDeMaquinasPendentesLaboratorioCreateManyEquipamentoInputEnvelope
    connect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
  }

  export type controledeMaquinasPendentesOroCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutEquipamentoInput, controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput> | controledeMaquinasPendentesOroCreateWithoutEquipamentoInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutEquipamentoInput | controledeMaquinasPendentesOroCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyEquipamentoInputEnvelope
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput> | controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutEquipamentoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyEquipamentoInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutEquipamentoInput, controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput> | controleDeLaudoTecnicoCreateWithoutEquipamentoInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutEquipamentoInput | controleDeLaudoTecnicoCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controleDeLaudoTecnicoCreateManyEquipamentoInputEnvelope
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
  }

  export type controleDeLaboratioUncheckedCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controleDeLaboratioCreateWithoutEquipamentoInput, controleDeLaboratioUncheckedCreateWithoutEquipamentoInput> | controleDeLaboratioCreateWithoutEquipamentoInput[] | controleDeLaboratioUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutEquipamentoInput | controleDeLaboratioCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controleDeLaboratioCreateManyEquipamentoInputEnvelope
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput> | controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput[] | controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controleDeMaquinasPendentesLaboratorioCreateManyEquipamentoInputEnvelope
    connect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
  }

  export type controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutEquipamentoInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutEquipamentoInput, controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput> | controledeMaquinasPendentesOroCreateWithoutEquipamentoInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutEquipamentoInput | controledeMaquinasPendentesOroCreateOrConnectWithoutEquipamentoInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyEquipamentoInputEnvelope
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput> | controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutEquipamentoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutEquipamentoInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyEquipamentoInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutEquipamentoInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutEquipamentoInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeLaudoTecnicoUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutEquipamentoInput, controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput> | controleDeLaudoTecnicoCreateWithoutEquipamentoInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutEquipamentoInput | controleDeLaudoTecnicoCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutEquipamentoInput | controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controleDeLaudoTecnicoCreateManyEquipamentoInputEnvelope
    set?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    disconnect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    delete?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    update?: controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutEquipamentoInput | controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controleDeLaudoTecnicoUpdateManyWithWhereWithoutEquipamentoInput | controleDeLaudoTecnicoUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controleDeLaudoTecnicoScalarWhereInput | controleDeLaudoTecnicoScalarWhereInput[]
  }

  export type controleDeLaboratioUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controleDeLaboratioCreateWithoutEquipamentoInput, controleDeLaboratioUncheckedCreateWithoutEquipamentoInput> | controleDeLaboratioCreateWithoutEquipamentoInput[] | controleDeLaboratioUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutEquipamentoInput | controleDeLaboratioCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controleDeLaboratioUpsertWithWhereUniqueWithoutEquipamentoInput | controleDeLaboratioUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controleDeLaboratioCreateManyEquipamentoInputEnvelope
    set?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    disconnect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    delete?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    update?: controleDeLaboratioUpdateWithWhereUniqueWithoutEquipamentoInput | controleDeLaboratioUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controleDeLaboratioUpdateManyWithWhereWithoutEquipamentoInput | controleDeLaboratioUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput> | controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput[] | controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controleDeMaquinasPendentesLaboratorioCreateManyEquipamentoInputEnvelope
    set?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    disconnect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    delete?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    connect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    update?: controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controleDeMaquinasPendentesLaboratorioScalarWhereInput | controleDeMaquinasPendentesLaboratorioScalarWhereInput[]
  }

  export type controledeMaquinasPendentesOroUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutEquipamentoInput, controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput> | controledeMaquinasPendentesOroCreateWithoutEquipamentoInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutEquipamentoInput | controledeMaquinasPendentesOroCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutEquipamentoInput | controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyEquipamentoInputEnvelope
    set?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    disconnect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    delete?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    update?: controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutEquipamentoInput | controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controledeMaquinasPendentesOroUpdateManyWithWhereWithoutEquipamentoInput | controledeMaquinasPendentesOroUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controledeMaquinasPendentesOroScalarWhereInput | controledeMaquinasPendentesOroScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput> | controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutEquipamentoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutEquipamentoInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyEquipamentoInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutEquipamentoInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutEquipamentoInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeLaudoTecnicoUncheckedUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controleDeLaudoTecnicoCreateWithoutEquipamentoInput, controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput> | controleDeLaudoTecnicoCreateWithoutEquipamentoInput[] | controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeLaudoTecnicoCreateOrConnectWithoutEquipamentoInput | controleDeLaudoTecnicoCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutEquipamentoInput | controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controleDeLaudoTecnicoCreateManyEquipamentoInputEnvelope
    set?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    disconnect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    delete?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    connect?: controleDeLaudoTecnicoWhereUniqueInput | controleDeLaudoTecnicoWhereUniqueInput[]
    update?: controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutEquipamentoInput | controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controleDeLaudoTecnicoUpdateManyWithWhereWithoutEquipamentoInput | controleDeLaudoTecnicoUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controleDeLaudoTecnicoScalarWhereInput | controleDeLaudoTecnicoScalarWhereInput[]
  }

  export type controleDeLaboratioUncheckedUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controleDeLaboratioCreateWithoutEquipamentoInput, controleDeLaboratioUncheckedCreateWithoutEquipamentoInput> | controleDeLaboratioCreateWithoutEquipamentoInput[] | controleDeLaboratioUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutEquipamentoInput | controleDeLaboratioCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controleDeLaboratioUpsertWithWhereUniqueWithoutEquipamentoInput | controleDeLaboratioUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controleDeLaboratioCreateManyEquipamentoInputEnvelope
    set?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    disconnect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    delete?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    update?: controleDeLaboratioUpdateWithWhereUniqueWithoutEquipamentoInput | controleDeLaboratioUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controleDeLaboratioUpdateManyWithWhereWithoutEquipamentoInput | controleDeLaboratioUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput> | controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput[] | controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controleDeMaquinasPendentesLaboratorioCreateManyEquipamentoInputEnvelope
    set?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    disconnect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    delete?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    connect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    update?: controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutEquipamentoInput | controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controleDeMaquinasPendentesLaboratorioScalarWhereInput | controleDeMaquinasPendentesLaboratorioScalarWhereInput[]
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateManyWithoutEquipamentoNestedInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutEquipamentoInput, controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput> | controledeMaquinasPendentesOroCreateWithoutEquipamentoInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutEquipamentoInput | controledeMaquinasPendentesOroCreateOrConnectWithoutEquipamentoInput[]
    upsert?: controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutEquipamentoInput | controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutEquipamentoInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyEquipamentoInputEnvelope
    set?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    disconnect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    delete?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    update?: controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutEquipamentoInput | controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutEquipamentoInput[]
    updateMany?: controledeMaquinasPendentesOroUpdateManyWithWhereWithoutEquipamentoInput | controledeMaquinasPendentesOroUpdateManyWithWhereWithoutEquipamentoInput[]
    deleteMany?: controledeMaquinasPendentesOroScalarWhereInput | controledeMaquinasPendentesOroScalarWhereInput[]
  }

  export type EquipamentoCreateNestedOneWithoutControlesDeAssistenciaInput = {
    create?: XOR<EquipamentoCreateWithoutControlesDeAssistenciaInput, EquipamentoUncheckedCreateWithoutControlesDeAssistenciaInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesDeAssistenciaInput
    connect?: EquipamentoWhereUniqueInput
  }

  export type statusReparoCreateNestedOneWithoutControleDeAssistenciaTecnicaInput = {
    create?: XOR<statusReparoCreateWithoutControleDeAssistenciaTecnicaInput, statusReparoUncheckedCreateWithoutControleDeAssistenciaTecnicaInput>
    connectOrCreate?: statusReparoCreateOrConnectWithoutControleDeAssistenciaTecnicaInput
    connect?: statusReparoWhereUniqueInput
  }

  export type StatusTesteCreateNestedOneWithoutControleDeAssistenciaTecnicaInput = {
    create?: XOR<StatusTesteCreateWithoutControleDeAssistenciaTecnicaInput, StatusTesteUncheckedCreateWithoutControleDeAssistenciaTecnicaInput>
    connectOrCreate?: StatusTesteCreateOrConnectWithoutControleDeAssistenciaTecnicaInput
    connect?: StatusTesteWhereUniqueInput
  }

  export type InstituicaoUnidadeCreateNestedOneWithoutControlesdeAssistenciaTecnicaInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutControlesdeAssistenciaTecnicaInput, InstituicaoUnidadeUncheckedCreateWithoutControlesdeAssistenciaTecnicaInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutControlesdeAssistenciaTecnicaInput
    connect?: InstituicaoUnidadeWhereUniqueInput
  }

  export type TecnicoCreateNestedOneWithoutControlesdeAssistenciatecnicaInput = {
    create?: XOR<TecnicoCreateWithoutControlesdeAssistenciatecnicaInput, TecnicoUncheckedCreateWithoutControlesdeAssistenciatecnicaInput>
    connectOrCreate?: TecnicoCreateOrConnectWithoutControlesdeAssistenciatecnicaInput
    connect?: TecnicoWhereUniqueInput
  }

  export type ClienteCreateNestedOneWithoutControlesdeAssistenciatecnicaInput = {
    create?: XOR<ClienteCreateWithoutControlesdeAssistenciatecnicaInput, ClienteUncheckedCreateWithoutControlesdeAssistenciatecnicaInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutControlesdeAssistenciatecnicaInput
    connect?: ClienteWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EquipamentoUpdateOneRequiredWithoutControlesDeAssistenciaNestedInput = {
    create?: XOR<EquipamentoCreateWithoutControlesDeAssistenciaInput, EquipamentoUncheckedCreateWithoutControlesDeAssistenciaInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesDeAssistenciaInput
    upsert?: EquipamentoUpsertWithoutControlesDeAssistenciaInput
    connect?: EquipamentoWhereUniqueInput
    update?: XOR<XOR<EquipamentoUpdateToOneWithWhereWithoutControlesDeAssistenciaInput, EquipamentoUpdateWithoutControlesDeAssistenciaInput>, EquipamentoUncheckedUpdateWithoutControlesDeAssistenciaInput>
  }

  export type statusReparoUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput = {
    create?: XOR<statusReparoCreateWithoutControleDeAssistenciaTecnicaInput, statusReparoUncheckedCreateWithoutControleDeAssistenciaTecnicaInput>
    connectOrCreate?: statusReparoCreateOrConnectWithoutControleDeAssistenciaTecnicaInput
    upsert?: statusReparoUpsertWithoutControleDeAssistenciaTecnicaInput
    connect?: statusReparoWhereUniqueInput
    update?: XOR<XOR<statusReparoUpdateToOneWithWhereWithoutControleDeAssistenciaTecnicaInput, statusReparoUpdateWithoutControleDeAssistenciaTecnicaInput>, statusReparoUncheckedUpdateWithoutControleDeAssistenciaTecnicaInput>
  }

  export type StatusTesteUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput = {
    create?: XOR<StatusTesteCreateWithoutControleDeAssistenciaTecnicaInput, StatusTesteUncheckedCreateWithoutControleDeAssistenciaTecnicaInput>
    connectOrCreate?: StatusTesteCreateOrConnectWithoutControleDeAssistenciaTecnicaInput
    upsert?: StatusTesteUpsertWithoutControleDeAssistenciaTecnicaInput
    connect?: StatusTesteWhereUniqueInput
    update?: XOR<XOR<StatusTesteUpdateToOneWithWhereWithoutControleDeAssistenciaTecnicaInput, StatusTesteUpdateWithoutControleDeAssistenciaTecnicaInput>, StatusTesteUncheckedUpdateWithoutControleDeAssistenciaTecnicaInput>
  }

  export type InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeAssistenciaTecnicaNestedInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutControlesdeAssistenciaTecnicaInput, InstituicaoUnidadeUncheckedCreateWithoutControlesdeAssistenciaTecnicaInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutControlesdeAssistenciaTecnicaInput
    upsert?: InstituicaoUnidadeUpsertWithoutControlesdeAssistenciaTecnicaInput
    connect?: InstituicaoUnidadeWhereUniqueInput
    update?: XOR<XOR<InstituicaoUnidadeUpdateToOneWithWhereWithoutControlesdeAssistenciaTecnicaInput, InstituicaoUnidadeUpdateWithoutControlesdeAssistenciaTecnicaInput>, InstituicaoUnidadeUncheckedUpdateWithoutControlesdeAssistenciaTecnicaInput>
  }

  export type TecnicoUpdateOneRequiredWithoutControlesdeAssistenciatecnicaNestedInput = {
    create?: XOR<TecnicoCreateWithoutControlesdeAssistenciatecnicaInput, TecnicoUncheckedCreateWithoutControlesdeAssistenciatecnicaInput>
    connectOrCreate?: TecnicoCreateOrConnectWithoutControlesdeAssistenciatecnicaInput
    upsert?: TecnicoUpsertWithoutControlesdeAssistenciatecnicaInput
    connect?: TecnicoWhereUniqueInput
    update?: XOR<XOR<TecnicoUpdateToOneWithWhereWithoutControlesdeAssistenciatecnicaInput, TecnicoUpdateWithoutControlesdeAssistenciatecnicaInput>, TecnicoUncheckedUpdateWithoutControlesdeAssistenciatecnicaInput>
  }

  export type ClienteUpdateOneWithoutControlesdeAssistenciatecnicaNestedInput = {
    create?: XOR<ClienteCreateWithoutControlesdeAssistenciatecnicaInput, ClienteUncheckedCreateWithoutControlesdeAssistenciatecnicaInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutControlesdeAssistenciatecnicaInput
    upsert?: ClienteUpsertWithoutControlesdeAssistenciatecnicaInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutControlesdeAssistenciatecnicaInput, ClienteUpdateWithoutControlesdeAssistenciatecnicaInput>, ClienteUncheckedUpdateWithoutControlesdeAssistenciatecnicaInput>
  }

  export type controleDeAssistenciaTecnicaCreateNestedManyWithoutStatusReparoInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput> | controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusReparoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusReparoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyStatusReparoInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutStatusReparoInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput> | controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusReparoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusReparoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyStatusReparoInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithoutStatusReparoNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput> | controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusReparoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusReparoInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusReparoInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusReparoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyStatusReparoInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusReparoInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusReparoInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusReparoInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusReparoInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutStatusReparoNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput> | controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusReparoInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusReparoInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusReparoInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusReparoInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyStatusReparoInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusReparoInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusReparoInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusReparoInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusReparoInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaCreateNestedManyWithoutStatusTesteInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput> | controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusTesteInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusTesteInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyStatusTesteInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutStatusTesteInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput> | controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusTesteInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusTesteInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyStatusTesteInputEnvelope
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithoutStatusTesteNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput> | controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusTesteInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusTesteInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusTesteInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusTesteInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyStatusTesteInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusTesteInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusTesteInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusTesteInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusTesteInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutStatusTesteNestedInput = {
    create?: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput> | controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput[] | controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput[]
    connectOrCreate?: controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusTesteInput | controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusTesteInput[]
    upsert?: controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusTesteInput | controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusTesteInput[]
    createMany?: controleDeAssistenciaTecnicaCreateManyStatusTesteInputEnvelope
    set?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    disconnect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    delete?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    connect?: controleDeAssistenciaTecnicaWhereUniqueInput | controleDeAssistenciaTecnicaWhereUniqueInput[]
    update?: controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusTesteInput | controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusTesteInput[]
    updateMany?: controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusTesteInput | controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusTesteInput[]
    deleteMany?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
  }

  export type InstituicaoUnidadeCreateNestedOneWithoutControlesdeLaudoTecnicoInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutControlesdeLaudoTecnicoInput, InstituicaoUnidadeUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutControlesdeLaudoTecnicoInput
    connect?: InstituicaoUnidadeWhereUniqueInput
  }

  export type EquipamentoCreateNestedOneWithoutControlesdeLaudoTecnicoInput = {
    create?: XOR<EquipamentoCreateWithoutControlesdeLaudoTecnicoInput, EquipamentoUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesdeLaudoTecnicoInput
    connect?: EquipamentoWhereUniqueInput
  }

  export type TecnicoCreateNestedOneWithoutControlesdeLaudoTecnicoInput = {
    create?: XOR<TecnicoCreateWithoutControlesdeLaudoTecnicoInput, TecnicoUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
    connectOrCreate?: TecnicoCreateOrConnectWithoutControlesdeLaudoTecnicoInput
    connect?: TecnicoWhereUniqueInput
  }

  export type InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutControlesdeLaudoTecnicoInput, InstituicaoUnidadeUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutControlesdeLaudoTecnicoInput
    upsert?: InstituicaoUnidadeUpsertWithoutControlesdeLaudoTecnicoInput
    connect?: InstituicaoUnidadeWhereUniqueInput
    update?: XOR<XOR<InstituicaoUnidadeUpdateToOneWithWhereWithoutControlesdeLaudoTecnicoInput, InstituicaoUnidadeUpdateWithoutControlesdeLaudoTecnicoInput>, InstituicaoUnidadeUncheckedUpdateWithoutControlesdeLaudoTecnicoInput>
  }

  export type EquipamentoUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput = {
    create?: XOR<EquipamentoCreateWithoutControlesdeLaudoTecnicoInput, EquipamentoUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesdeLaudoTecnicoInput
    upsert?: EquipamentoUpsertWithoutControlesdeLaudoTecnicoInput
    connect?: EquipamentoWhereUniqueInput
    update?: XOR<XOR<EquipamentoUpdateToOneWithWhereWithoutControlesdeLaudoTecnicoInput, EquipamentoUpdateWithoutControlesdeLaudoTecnicoInput>, EquipamentoUncheckedUpdateWithoutControlesdeLaudoTecnicoInput>
  }

  export type TecnicoUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput = {
    create?: XOR<TecnicoCreateWithoutControlesdeLaudoTecnicoInput, TecnicoUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
    connectOrCreate?: TecnicoCreateOrConnectWithoutControlesdeLaudoTecnicoInput
    upsert?: TecnicoUpsertWithoutControlesdeLaudoTecnicoInput
    connect?: TecnicoWhereUniqueInput
    update?: XOR<XOR<TecnicoUpdateToOneWithWhereWithoutControlesdeLaudoTecnicoInput, TecnicoUpdateWithoutControlesdeLaudoTecnicoInput>, TecnicoUncheckedUpdateWithoutControlesdeLaudoTecnicoInput>
  }

  export type statusControledeLaboratorioCreateNestedOneWithoutControlesDeLaboratioInput = {
    create?: XOR<statusControledeLaboratorioCreateWithoutControlesDeLaboratioInput, statusControledeLaboratorioUncheckedCreateWithoutControlesDeLaboratioInput>
    connectOrCreate?: statusControledeLaboratorioCreateOrConnectWithoutControlesDeLaboratioInput
    connect?: statusControledeLaboratorioWhereUniqueInput
  }

  export type InstituicaoUnidadeCreateNestedOneWithoutControlesDeLaboratioInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutControlesDeLaboratioInput, InstituicaoUnidadeUncheckedCreateWithoutControlesDeLaboratioInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutControlesDeLaboratioInput
    connect?: InstituicaoUnidadeWhereUniqueInput
  }

  export type ClienteCreateNestedOneWithoutControlesDeLaboratioInput = {
    create?: XOR<ClienteCreateWithoutControlesDeLaboratioInput, ClienteUncheckedCreateWithoutControlesDeLaboratioInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutControlesDeLaboratioInput
    connect?: ClienteWhereUniqueInput
  }

  export type EquipamentoCreateNestedOneWithoutControlesDeLaboratioInput = {
    create?: XOR<EquipamentoCreateWithoutControlesDeLaboratioInput, EquipamentoUncheckedCreateWithoutControlesDeLaboratioInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesDeLaboratioInput
    connect?: EquipamentoWhereUniqueInput
  }

  export type statusControledeLaboratorioUpdateOneRequiredWithoutControlesDeLaboratioNestedInput = {
    create?: XOR<statusControledeLaboratorioCreateWithoutControlesDeLaboratioInput, statusControledeLaboratorioUncheckedCreateWithoutControlesDeLaboratioInput>
    connectOrCreate?: statusControledeLaboratorioCreateOrConnectWithoutControlesDeLaboratioInput
    upsert?: statusControledeLaboratorioUpsertWithoutControlesDeLaboratioInput
    connect?: statusControledeLaboratorioWhereUniqueInput
    update?: XOR<XOR<statusControledeLaboratorioUpdateToOneWithWhereWithoutControlesDeLaboratioInput, statusControledeLaboratorioUpdateWithoutControlesDeLaboratioInput>, statusControledeLaboratorioUncheckedUpdateWithoutControlesDeLaboratioInput>
  }

  export type InstituicaoUnidadeUpdateOneWithoutControlesDeLaboratioNestedInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutControlesDeLaboratioInput, InstituicaoUnidadeUncheckedCreateWithoutControlesDeLaboratioInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutControlesDeLaboratioInput
    upsert?: InstituicaoUnidadeUpsertWithoutControlesDeLaboratioInput
    disconnect?: InstituicaoUnidadeWhereInput | boolean
    delete?: InstituicaoUnidadeWhereInput | boolean
    connect?: InstituicaoUnidadeWhereUniqueInput
    update?: XOR<XOR<InstituicaoUnidadeUpdateToOneWithWhereWithoutControlesDeLaboratioInput, InstituicaoUnidadeUpdateWithoutControlesDeLaboratioInput>, InstituicaoUnidadeUncheckedUpdateWithoutControlesDeLaboratioInput>
  }

  export type ClienteUpdateOneWithoutControlesDeLaboratioNestedInput = {
    create?: XOR<ClienteCreateWithoutControlesDeLaboratioInput, ClienteUncheckedCreateWithoutControlesDeLaboratioInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutControlesDeLaboratioInput
    upsert?: ClienteUpsertWithoutControlesDeLaboratioInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutControlesDeLaboratioInput, ClienteUpdateWithoutControlesDeLaboratioInput>, ClienteUncheckedUpdateWithoutControlesDeLaboratioInput>
  }

  export type EquipamentoUpdateOneRequiredWithoutControlesDeLaboratioNestedInput = {
    create?: XOR<EquipamentoCreateWithoutControlesDeLaboratioInput, EquipamentoUncheckedCreateWithoutControlesDeLaboratioInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesDeLaboratioInput
    upsert?: EquipamentoUpsertWithoutControlesDeLaboratioInput
    connect?: EquipamentoWhereUniqueInput
    update?: XOR<XOR<EquipamentoUpdateToOneWithWhereWithoutControlesDeLaboratioInput, EquipamentoUpdateWithoutControlesDeLaboratioInput>, EquipamentoUncheckedUpdateWithoutControlesDeLaboratioInput>
  }

  export type controleDeLaboratioCreateNestedManyWithoutStatusControledeLaboratorioInput = {
    create?: XOR<controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput, controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput> | controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput[] | controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutStatusControledeLaboratorioInput | controleDeLaboratioCreateOrConnectWithoutStatusControledeLaboratorioInput[]
    createMany?: controleDeLaboratioCreateManyStatusControledeLaboratorioInputEnvelope
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
  }

  export type controleDeLaboratioUncheckedCreateNestedManyWithoutStatusControledeLaboratorioInput = {
    create?: XOR<controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput, controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput> | controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput[] | controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutStatusControledeLaboratorioInput | controleDeLaboratioCreateOrConnectWithoutStatusControledeLaboratorioInput[]
    createMany?: controleDeLaboratioCreateManyStatusControledeLaboratorioInputEnvelope
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
  }

  export type controleDeLaboratioUpdateManyWithoutStatusControledeLaboratorioNestedInput = {
    create?: XOR<controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput, controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput> | controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput[] | controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutStatusControledeLaboratorioInput | controleDeLaboratioCreateOrConnectWithoutStatusControledeLaboratorioInput[]
    upsert?: controleDeLaboratioUpsertWithWhereUniqueWithoutStatusControledeLaboratorioInput | controleDeLaboratioUpsertWithWhereUniqueWithoutStatusControledeLaboratorioInput[]
    createMany?: controleDeLaboratioCreateManyStatusControledeLaboratorioInputEnvelope
    set?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    disconnect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    delete?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    update?: controleDeLaboratioUpdateWithWhereUniqueWithoutStatusControledeLaboratorioInput | controleDeLaboratioUpdateWithWhereUniqueWithoutStatusControledeLaboratorioInput[]
    updateMany?: controleDeLaboratioUpdateManyWithWhereWithoutStatusControledeLaboratorioInput | controleDeLaboratioUpdateManyWithWhereWithoutStatusControledeLaboratorioInput[]
    deleteMany?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
  }

  export type controleDeLaboratioUncheckedUpdateManyWithoutStatusControledeLaboratorioNestedInput = {
    create?: XOR<controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput, controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput> | controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput[] | controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput[]
    connectOrCreate?: controleDeLaboratioCreateOrConnectWithoutStatusControledeLaboratorioInput | controleDeLaboratioCreateOrConnectWithoutStatusControledeLaboratorioInput[]
    upsert?: controleDeLaboratioUpsertWithWhereUniqueWithoutStatusControledeLaboratorioInput | controleDeLaboratioUpsertWithWhereUniqueWithoutStatusControledeLaboratorioInput[]
    createMany?: controleDeLaboratioCreateManyStatusControledeLaboratorioInputEnvelope
    set?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    disconnect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    delete?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    connect?: controleDeLaboratioWhereUniqueInput | controleDeLaboratioWhereUniqueInput[]
    update?: controleDeLaboratioUpdateWithWhereUniqueWithoutStatusControledeLaboratorioInput | controleDeLaboratioUpdateWithWhereUniqueWithoutStatusControledeLaboratorioInput[]
    updateMany?: controleDeLaboratioUpdateManyWithWhereWithoutStatusControledeLaboratorioInput | controleDeLaboratioUpdateManyWithWhereWithoutStatusControledeLaboratorioInput[]
    deleteMany?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
  }

  export type EquipamentoCreateNestedOneWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    create?: XOR<EquipamentoCreateWithoutControlesDeMaquinasPendentesLaboratorioInput, EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesDeMaquinasPendentesLaboratorioInput
    connect?: EquipamentoWhereUniqueInput
  }

  export type statusMaquinasPendentesLabCreateNestedOneWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    create?: XOR<statusMaquinasPendentesLabCreateWithoutControlesDeMaquinasPendentesLaboratorioInput, statusMaquinasPendentesLabUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput>
    connectOrCreate?: statusMaquinasPendentesLabCreateOrConnectWithoutControlesDeMaquinasPendentesLaboratorioInput
    connect?: statusMaquinasPendentesLabWhereUniqueInput
  }

  export type EquipamentoUpdateOneRequiredWithoutControlesDeMaquinasPendentesLaboratorioNestedInput = {
    create?: XOR<EquipamentoCreateWithoutControlesDeMaquinasPendentesLaboratorioInput, EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesDeMaquinasPendentesLaboratorioInput
    upsert?: EquipamentoUpsertWithoutControlesDeMaquinasPendentesLaboratorioInput
    connect?: EquipamentoWhereUniqueInput
    update?: XOR<XOR<EquipamentoUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesLaboratorioInput, EquipamentoUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput>, EquipamentoUncheckedUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput>
  }

  export type statusMaquinasPendentesLabUpdateOneRequiredWithoutControlesDeMaquinasPendentesLaboratorioNestedInput = {
    create?: XOR<statusMaquinasPendentesLabCreateWithoutControlesDeMaquinasPendentesLaboratorioInput, statusMaquinasPendentesLabUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput>
    connectOrCreate?: statusMaquinasPendentesLabCreateOrConnectWithoutControlesDeMaquinasPendentesLaboratorioInput
    upsert?: statusMaquinasPendentesLabUpsertWithoutControlesDeMaquinasPendentesLaboratorioInput
    connect?: statusMaquinasPendentesLabWhereUniqueInput
    update?: XOR<XOR<statusMaquinasPendentesLabUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesLaboratorioInput, statusMaquinasPendentesLabUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput>, statusMaquinasPendentesLabUncheckedUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput>
  }

  export type controleDeMaquinasPendentesLaboratorioCreateNestedManyWithoutStatusMaquinasPendentesLabInput = {
    create?: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput> | controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput[] | controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput[]
    connectOrCreate?: controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutStatusMaquinasPendentesLabInput[]
    createMany?: controleDeMaquinasPendentesLaboratorioCreateManyStatusMaquinasPendentesLabInputEnvelope
    connect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedCreateNestedManyWithoutStatusMaquinasPendentesLabInput = {
    create?: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput> | controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput[] | controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput[]
    connectOrCreate?: controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutStatusMaquinasPendentesLabInput[]
    createMany?: controleDeMaquinasPendentesLaboratorioCreateManyStatusMaquinasPendentesLabInputEnvelope
    connect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateManyWithoutStatusMaquinasPendentesLabNestedInput = {
    create?: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput> | controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput[] | controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput[]
    connectOrCreate?: controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutStatusMaquinasPendentesLabInput[]
    upsert?: controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutStatusMaquinasPendentesLabInput[]
    createMany?: controleDeMaquinasPendentesLaboratorioCreateManyStatusMaquinasPendentesLabInputEnvelope
    set?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    disconnect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    delete?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    connect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    update?: controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutStatusMaquinasPendentesLabInput[]
    updateMany?: controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutStatusMaquinasPendentesLabInput[]
    deleteMany?: controleDeMaquinasPendentesLaboratorioScalarWhereInput | controleDeMaquinasPendentesLaboratorioScalarWhereInput[]
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutStatusMaquinasPendentesLabNestedInput = {
    create?: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput> | controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput[] | controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput[]
    connectOrCreate?: controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutStatusMaquinasPendentesLabInput[]
    upsert?: controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutStatusMaquinasPendentesLabInput[]
    createMany?: controleDeMaquinasPendentesLaboratorioCreateManyStatusMaquinasPendentesLabInputEnvelope
    set?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    disconnect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    delete?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    connect?: controleDeMaquinasPendentesLaboratorioWhereUniqueInput | controleDeMaquinasPendentesLaboratorioWhereUniqueInput[]
    update?: controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutStatusMaquinasPendentesLabInput[]
    updateMany?: controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutStatusMaquinasPendentesLabInput[]
    deleteMany?: controleDeMaquinasPendentesLaboratorioScalarWhereInput | controleDeMaquinasPendentesLaboratorioScalarWhereInput[]
  }

  export type EquipamentoCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput = {
    create?: XOR<EquipamentoCreateWithoutControlesDeMaquinasPendentesOroInput, EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesDeMaquinasPendentesOroInput
    connect?: EquipamentoWhereUniqueInput
  }

  export type InstituicaoUnidadeCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutControlesDeMaquinasPendentesOroInput, InstituicaoUnidadeUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutControlesDeMaquinasPendentesOroInput
    connect?: InstituicaoUnidadeWhereUniqueInput
  }

  export type statusMaquinasPendentesOroCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput = {
    create?: XOR<statusMaquinasPendentesOroCreateWithoutControlesDeMaquinasPendentesOroInput, statusMaquinasPendentesOroUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
    connectOrCreate?: statusMaquinasPendentesOroCreateOrConnectWithoutControlesDeMaquinasPendentesOroInput
    connect?: statusMaquinasPendentesOroWhereUniqueInput
  }

  export type EquipamentoUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput = {
    create?: XOR<EquipamentoCreateWithoutControlesDeMaquinasPendentesOroInput, EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutControlesDeMaquinasPendentesOroInput
    upsert?: EquipamentoUpsertWithoutControlesDeMaquinasPendentesOroInput
    connect?: EquipamentoWhereUniqueInput
    update?: XOR<XOR<EquipamentoUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesOroInput, EquipamentoUpdateWithoutControlesDeMaquinasPendentesOroInput>, EquipamentoUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput>
  }

  export type InstituicaoUnidadeUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutControlesDeMaquinasPendentesOroInput, InstituicaoUnidadeUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutControlesDeMaquinasPendentesOroInput
    upsert?: InstituicaoUnidadeUpsertWithoutControlesDeMaquinasPendentesOroInput
    connect?: InstituicaoUnidadeWhereUniqueInput
    update?: XOR<XOR<InstituicaoUnidadeUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesOroInput, InstituicaoUnidadeUpdateWithoutControlesDeMaquinasPendentesOroInput>, InstituicaoUnidadeUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput>
  }

  export type statusMaquinasPendentesOroUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput = {
    create?: XOR<statusMaquinasPendentesOroCreateWithoutControlesDeMaquinasPendentesOroInput, statusMaquinasPendentesOroUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
    connectOrCreate?: statusMaquinasPendentesOroCreateOrConnectWithoutControlesDeMaquinasPendentesOroInput
    upsert?: statusMaquinasPendentesOroUpsertWithoutControlesDeMaquinasPendentesOroInput
    connect?: statusMaquinasPendentesOroWhereUniqueInput
    update?: XOR<XOR<statusMaquinasPendentesOroUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesOroInput, statusMaquinasPendentesOroUpdateWithoutControlesDeMaquinasPendentesOroInput>, statusMaquinasPendentesOroUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput>
  }

  export type controledeMaquinasPendentesOroCreateNestedManyWithoutStatusMaquinasPendentesOroInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput, controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput> | controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroCreateOrConnectWithoutStatusMaquinasPendentesOroInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyStatusMaquinasPendentesOroInputEnvelope
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
  }

  export type controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutStatusMaquinasPendentesOroInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput, controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput> | controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroCreateOrConnectWithoutStatusMaquinasPendentesOroInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyStatusMaquinasPendentesOroInputEnvelope
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
  }

  export type controledeMaquinasPendentesOroUpdateManyWithoutStatusMaquinasPendentesOroNestedInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput, controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput> | controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroCreateOrConnectWithoutStatusMaquinasPendentesOroInput[]
    upsert?: controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutStatusMaquinasPendentesOroInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyStatusMaquinasPendentesOroInputEnvelope
    set?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    disconnect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    delete?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    update?: controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutStatusMaquinasPendentesOroInput[]
    updateMany?: controledeMaquinasPendentesOroUpdateManyWithWhereWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroUpdateManyWithWhereWithoutStatusMaquinasPendentesOroInput[]
    deleteMany?: controledeMaquinasPendentesOroScalarWhereInput | controledeMaquinasPendentesOroScalarWhereInput[]
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateManyWithoutStatusMaquinasPendentesOroNestedInput = {
    create?: XOR<controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput, controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput> | controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput[] | controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput[]
    connectOrCreate?: controledeMaquinasPendentesOroCreateOrConnectWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroCreateOrConnectWithoutStatusMaquinasPendentesOroInput[]
    upsert?: controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutStatusMaquinasPendentesOroInput[]
    createMany?: controledeMaquinasPendentesOroCreateManyStatusMaquinasPendentesOroInputEnvelope
    set?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    disconnect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    delete?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    connect?: controledeMaquinasPendentesOroWhereUniqueInput | controledeMaquinasPendentesOroWhereUniqueInput[]
    update?: controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutStatusMaquinasPendentesOroInput[]
    updateMany?: controledeMaquinasPendentesOroUpdateManyWithWhereWithoutStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroUpdateManyWithWhereWithoutStatusMaquinasPendentesOroInput[]
    deleteMany?: controledeMaquinasPendentesOroScalarWhereInput | controledeMaquinasPendentesOroScalarWhereInput[]
  }

  export type ClienteCreateNestedOneWithoutDocumentacoesTecnicasInput = {
    create?: XOR<ClienteCreateWithoutDocumentacoesTecnicasInput, ClienteUncheckedCreateWithoutDocumentacoesTecnicasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutDocumentacoesTecnicasInput
    connect?: ClienteWhereUniqueInput
  }

  export type TecnicoCreateNestedOneWithoutDocumentacoesTecnicasInput = {
    create?: XOR<TecnicoCreateWithoutDocumentacoesTecnicasInput, TecnicoUncheckedCreateWithoutDocumentacoesTecnicasInput>
    connectOrCreate?: TecnicoCreateOrConnectWithoutDocumentacoesTecnicasInput
    connect?: TecnicoWhereUniqueInput
  }

  export type InstituicaoUnidadeCreateNestedOneWithoutDocumentacoesTecnicasInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutDocumentacoesTecnicasInput, InstituicaoUnidadeUncheckedCreateWithoutDocumentacoesTecnicasInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutDocumentacoesTecnicasInput
    connect?: InstituicaoUnidadeWhereUniqueInput
  }

  export type ClienteUpdateOneWithoutDocumentacoesTecnicasNestedInput = {
    create?: XOR<ClienteCreateWithoutDocumentacoesTecnicasInput, ClienteUncheckedCreateWithoutDocumentacoesTecnicasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutDocumentacoesTecnicasInput
    upsert?: ClienteUpsertWithoutDocumentacoesTecnicasInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutDocumentacoesTecnicasInput, ClienteUpdateWithoutDocumentacoesTecnicasInput>, ClienteUncheckedUpdateWithoutDocumentacoesTecnicasInput>
  }

  export type TecnicoUpdateOneRequiredWithoutDocumentacoesTecnicasNestedInput = {
    create?: XOR<TecnicoCreateWithoutDocumentacoesTecnicasInput, TecnicoUncheckedCreateWithoutDocumentacoesTecnicasInput>
    connectOrCreate?: TecnicoCreateOrConnectWithoutDocumentacoesTecnicasInput
    upsert?: TecnicoUpsertWithoutDocumentacoesTecnicasInput
    connect?: TecnicoWhereUniqueInput
    update?: XOR<XOR<TecnicoUpdateToOneWithWhereWithoutDocumentacoesTecnicasInput, TecnicoUpdateWithoutDocumentacoesTecnicasInput>, TecnicoUncheckedUpdateWithoutDocumentacoesTecnicasInput>
  }

  export type InstituicaoUnidadeUpdateOneWithoutDocumentacoesTecnicasNestedInput = {
    create?: XOR<InstituicaoUnidadeCreateWithoutDocumentacoesTecnicasInput, InstituicaoUnidadeUncheckedCreateWithoutDocumentacoesTecnicasInput>
    connectOrCreate?: InstituicaoUnidadeCreateOrConnectWithoutDocumentacoesTecnicasInput
    upsert?: InstituicaoUnidadeUpsertWithoutDocumentacoesTecnicasInput
    disconnect?: InstituicaoUnidadeWhereInput | boolean
    delete?: InstituicaoUnidadeWhereInput | boolean
    connect?: InstituicaoUnidadeWhereUniqueInput
    update?: XOR<XOR<InstituicaoUnidadeUpdateToOneWithWhereWithoutDocumentacoesTecnicasInput, InstituicaoUnidadeUpdateWithoutDocumentacoesTecnicasInput>, InstituicaoUnidadeUncheckedUpdateWithoutDocumentacoesTecnicasInput>
  }

  export type statusComprasCreateNestedOneWithoutSolicitacoesDeComprasInput = {
    create?: XOR<statusComprasCreateWithoutSolicitacoesDeComprasInput, statusComprasUncheckedCreateWithoutSolicitacoesDeComprasInput>
    connectOrCreate?: statusComprasCreateOrConnectWithoutSolicitacoesDeComprasInput
    connect?: statusComprasWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type statusComprasUpdateOneWithoutSolicitacoesDeComprasNestedInput = {
    create?: XOR<statusComprasCreateWithoutSolicitacoesDeComprasInput, statusComprasUncheckedCreateWithoutSolicitacoesDeComprasInput>
    connectOrCreate?: statusComprasCreateOrConnectWithoutSolicitacoesDeComprasInput
    upsert?: statusComprasUpsertWithoutSolicitacoesDeComprasInput
    disconnect?: statusComprasWhereInput | boolean
    delete?: statusComprasWhereInput | boolean
    connect?: statusComprasWhereUniqueInput
    update?: XOR<XOR<statusComprasUpdateToOneWithWhereWithoutSolicitacoesDeComprasInput, statusComprasUpdateWithoutSolicitacoesDeComprasInput>, statusComprasUncheckedUpdateWithoutSolicitacoesDeComprasInput>
  }

  export type solicitacaoDeComprasCreateNestedManyWithoutStatusComprasInput = {
    create?: XOR<solicitacaoDeComprasCreateWithoutStatusComprasInput, solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput> | solicitacaoDeComprasCreateWithoutStatusComprasInput[] | solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput[]
    connectOrCreate?: solicitacaoDeComprasCreateOrConnectWithoutStatusComprasInput | solicitacaoDeComprasCreateOrConnectWithoutStatusComprasInput[]
    createMany?: solicitacaoDeComprasCreateManyStatusComprasInputEnvelope
    connect?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
  }

  export type solicitacaoDeComprasUncheckedCreateNestedManyWithoutStatusComprasInput = {
    create?: XOR<solicitacaoDeComprasCreateWithoutStatusComprasInput, solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput> | solicitacaoDeComprasCreateWithoutStatusComprasInput[] | solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput[]
    connectOrCreate?: solicitacaoDeComprasCreateOrConnectWithoutStatusComprasInput | solicitacaoDeComprasCreateOrConnectWithoutStatusComprasInput[]
    createMany?: solicitacaoDeComprasCreateManyStatusComprasInputEnvelope
    connect?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
  }

  export type solicitacaoDeComprasUpdateManyWithoutStatusComprasNestedInput = {
    create?: XOR<solicitacaoDeComprasCreateWithoutStatusComprasInput, solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput> | solicitacaoDeComprasCreateWithoutStatusComprasInput[] | solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput[]
    connectOrCreate?: solicitacaoDeComprasCreateOrConnectWithoutStatusComprasInput | solicitacaoDeComprasCreateOrConnectWithoutStatusComprasInput[]
    upsert?: solicitacaoDeComprasUpsertWithWhereUniqueWithoutStatusComprasInput | solicitacaoDeComprasUpsertWithWhereUniqueWithoutStatusComprasInput[]
    createMany?: solicitacaoDeComprasCreateManyStatusComprasInputEnvelope
    set?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
    disconnect?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
    delete?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
    connect?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
    update?: solicitacaoDeComprasUpdateWithWhereUniqueWithoutStatusComprasInput | solicitacaoDeComprasUpdateWithWhereUniqueWithoutStatusComprasInput[]
    updateMany?: solicitacaoDeComprasUpdateManyWithWhereWithoutStatusComprasInput | solicitacaoDeComprasUpdateManyWithWhereWithoutStatusComprasInput[]
    deleteMany?: solicitacaoDeComprasScalarWhereInput | solicitacaoDeComprasScalarWhereInput[]
  }

  export type solicitacaoDeComprasUncheckedUpdateManyWithoutStatusComprasNestedInput = {
    create?: XOR<solicitacaoDeComprasCreateWithoutStatusComprasInput, solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput> | solicitacaoDeComprasCreateWithoutStatusComprasInput[] | solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput[]
    connectOrCreate?: solicitacaoDeComprasCreateOrConnectWithoutStatusComprasInput | solicitacaoDeComprasCreateOrConnectWithoutStatusComprasInput[]
    upsert?: solicitacaoDeComprasUpsertWithWhereUniqueWithoutStatusComprasInput | solicitacaoDeComprasUpsertWithWhereUniqueWithoutStatusComprasInput[]
    createMany?: solicitacaoDeComprasCreateManyStatusComprasInputEnvelope
    set?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
    disconnect?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
    delete?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
    connect?: solicitacaoDeComprasWhereUniqueInput | solicitacaoDeComprasWhereUniqueInput[]
    update?: solicitacaoDeComprasUpdateWithWhereUniqueWithoutStatusComprasInput | solicitacaoDeComprasUpdateWithWhereUniqueWithoutStatusComprasInput[]
    updateMany?: solicitacaoDeComprasUpdateManyWithWhereWithoutStatusComprasInput | solicitacaoDeComprasUpdateManyWithWhereWithoutStatusComprasInput[]
    deleteMany?: solicitacaoDeComprasScalarWhereInput | solicitacaoDeComprasScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ClienteCreateWithoutUsersInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordensDeServico?: OrdemdeServicoCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordensDeServico?: OrdemdeServicoUncheckedCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutUsersInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutUsersInput, ClienteUncheckedCreateWithoutUsersInput>
  }

  export type SetorCreateWithoutUsersInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type SetorUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type SetorCreateOrConnectWithoutUsersInput = {
    where: SetorWhereUniqueInput
    create: XOR<SetorCreateWithoutUsersInput, SetorUncheckedCreateWithoutUsersInput>
  }

  export type InstituicaoUnidadeCreateWithoutUsersInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeCreateOrConnectWithoutUsersInput = {
    where: InstituicaoUnidadeWhereUniqueInput
    create: XOR<InstituicaoUnidadeCreateWithoutUsersInput, InstituicaoUnidadeUncheckedCreateWithoutUsersInput>
  }

  export type ClienteUpsertWithoutUsersInput = {
    update: XOR<ClienteUpdateWithoutUsersInput, ClienteUncheckedUpdateWithoutUsersInput>
    create: XOR<ClienteCreateWithoutUsersInput, ClienteUncheckedCreateWithoutUsersInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutUsersInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutUsersInput, ClienteUncheckedUpdateWithoutUsersInput>
  }

  export type ClienteUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordensDeServico?: OrdemdeServicoUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordensDeServico?: OrdemdeServicoUncheckedUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type SetorUpsertWithoutUsersInput = {
    update: XOR<SetorUpdateWithoutUsersInput, SetorUncheckedUpdateWithoutUsersInput>
    create: XOR<SetorCreateWithoutUsersInput, SetorUncheckedCreateWithoutUsersInput>
    where?: SetorWhereInput
  }

  export type SetorUpdateToOneWithWhereWithoutUsersInput = {
    where?: SetorWhereInput
    data: XOR<SetorUpdateWithoutUsersInput, SetorUncheckedUpdateWithoutUsersInput>
  }

  export type SetorUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SetorUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InstituicaoUnidadeUpsertWithoutUsersInput = {
    update: XOR<InstituicaoUnidadeUpdateWithoutUsersInput, InstituicaoUnidadeUncheckedUpdateWithoutUsersInput>
    create: XOR<InstituicaoUnidadeCreateWithoutUsersInput, InstituicaoUnidadeUncheckedCreateWithoutUsersInput>
    where?: InstituicaoUnidadeWhereInput
  }

  export type InstituicaoUnidadeUpdateToOneWithWhereWithoutUsersInput = {
    where?: InstituicaoUnidadeWhereInput
    data: XOR<InstituicaoUnidadeUpdateWithoutUsersInput, InstituicaoUnidadeUncheckedUpdateWithoutUsersInput>
  }

  export type InstituicaoUnidadeUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUnidadeUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type UserCreateWithoutClienteInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    setor?: SetorCreateNestedOneWithoutUsersInput
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutClienteInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    setor_id?: string | null
    instituicao_id?: string | null
  }

  export type UserCreateOrConnectWithoutClienteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
  }

  export type UserCreateManyClienteInputEnvelope = {
    data: UserCreateManyClienteInput | UserCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type OrdemdeServicoCreateWithoutClienteInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    tecnico: TecnicoCreateNestedOneWithoutOrdensInput
    statusOrdemdeServico: statusOrdemdeServicoCreateNestedOneWithoutOrdensInput
    tipodesolicitacao: TipodeSolicitacaoCreateNestedOneWithoutOrdensInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutOrdensInput
    formtecnico?: FormTecnicoCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoUncheckedCreateWithoutClienteInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
    formtecnico?: FormTecnicoUncheckedCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoCreateOrConnectWithoutClienteInput = {
    where: OrdemdeServicoWhereUniqueInput
    create: XOR<OrdemdeServicoCreateWithoutClienteInput, OrdemdeServicoUncheckedCreateWithoutClienteInput>
  }

  export type OrdemdeServicoCreateManyClienteInputEnvelope = {
    data: OrdemdeServicoCreateManyClienteInput | OrdemdeServicoCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type controleDeAssistenciaTecnicaCreateWithoutClienteInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeAssistenciaInput
    statusReparo: statusReparoCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    statusTeste: StatusTesteCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesdeAssistenciaTecnicaInput
    tecnico: TecnicoCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaCreateOrConnectWithoutClienteInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutClienteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput>
  }

  export type controleDeAssistenciaTecnicaCreateManyClienteInputEnvelope = {
    data: controleDeAssistenciaTecnicaCreateManyClienteInput | controleDeAssistenciaTecnicaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type controleDeLaboratioCreateWithoutClienteInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio: statusControledeLaboratorioCreateNestedOneWithoutControlesDeLaboratioInput
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutControlesDeLaboratioInput
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeLaboratioInput
  }

  export type controleDeLaboratioUncheckedCreateWithoutClienteInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio_id: string
    instituicao_id: string
    equipamento_id: string
  }

  export type controleDeLaboratioCreateOrConnectWithoutClienteInput = {
    where: controleDeLaboratioWhereUniqueInput
    create: XOR<controleDeLaboratioCreateWithoutClienteInput, controleDeLaboratioUncheckedCreateWithoutClienteInput>
  }

  export type controleDeLaboratioCreateManyClienteInputEnvelope = {
    data: controleDeLaboratioCreateManyClienteInput | controleDeLaboratioCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type documentacaoTecnicaCreateWithoutClienteInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    tecnico: TecnicoCreateNestedOneWithoutDocumentacoesTecnicasInput
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutDocumentacoesTecnicasInput
  }

  export type documentacaoTecnicaUncheckedCreateWithoutClienteInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    tecnico_id: string
    instituicao_id?: string | null
  }

  export type documentacaoTecnicaCreateOrConnectWithoutClienteInput = {
    where: documentacaoTecnicaWhereUniqueInput
    create: XOR<documentacaoTecnicaCreateWithoutClienteInput, documentacaoTecnicaUncheckedCreateWithoutClienteInput>
  }

  export type documentacaoTecnicaCreateManyClienteInputEnvelope = {
    data: documentacaoTecnicaCreateManyClienteInput | documentacaoTecnicaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutClienteInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutClienteInput, UserUncheckedUpdateWithoutClienteInput>
    create: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
  }

  export type UserUpdateWithWhereUniqueWithoutClienteInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutClienteInput, UserUncheckedUpdateWithoutClienteInput>
  }

  export type UserUpdateManyWithWhereWithoutClienteInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutClienteInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    create_at?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    cliente_id?: StringNullableFilter<"User"> | string | null
    setor_id?: StringNullableFilter<"User"> | string | null
    instituicao_id?: StringNullableFilter<"User"> | string | null
  }

  export type OrdemdeServicoUpsertWithWhereUniqueWithoutClienteInput = {
    where: OrdemdeServicoWhereUniqueInput
    update: XOR<OrdemdeServicoUpdateWithoutClienteInput, OrdemdeServicoUncheckedUpdateWithoutClienteInput>
    create: XOR<OrdemdeServicoCreateWithoutClienteInput, OrdemdeServicoUncheckedCreateWithoutClienteInput>
  }

  export type OrdemdeServicoUpdateWithWhereUniqueWithoutClienteInput = {
    where: OrdemdeServicoWhereUniqueInput
    data: XOR<OrdemdeServicoUpdateWithoutClienteInput, OrdemdeServicoUncheckedUpdateWithoutClienteInput>
  }

  export type OrdemdeServicoUpdateManyWithWhereWithoutClienteInput = {
    where: OrdemdeServicoScalarWhereInput
    data: XOR<OrdemdeServicoUpdateManyMutationInput, OrdemdeServicoUncheckedUpdateManyWithoutClienteInput>
  }

  export type OrdemdeServicoScalarWhereInput = {
    AND?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
    OR?: OrdemdeServicoScalarWhereInput[]
    NOT?: OrdemdeServicoScalarWhereInput | OrdemdeServicoScalarWhereInput[]
    id?: StringFilter<"OrdemdeServico"> | string
    name?: StringFilter<"OrdemdeServico"> | string
    problemaOuSolicitacao?: StringFilter<"OrdemdeServico"> | string
    created_at?: DateTimeNullableFilter<"OrdemdeServico"> | Date | string | null
    update_at?: DateTimeNullableFilter<"OrdemdeServico"> | Date | string | null
    cliente_id?: StringNullableFilter<"OrdemdeServico"> | string | null
    tecnico_id?: StringFilter<"OrdemdeServico"> | string
    statusOrdemdeServico_id?: StringFilter<"OrdemdeServico"> | string
    tipodesolicitacao_id?: StringFilter<"OrdemdeServico"> | string
    instituicaoUnidade_id?: StringFilter<"OrdemdeServico"> | string
  }

  export type controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutClienteInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    update: XOR<controleDeAssistenciaTecnicaUpdateWithoutClienteInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutClienteInput>
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutClienteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutClienteInput>
  }

  export type controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutClienteInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    data: XOR<controleDeAssistenciaTecnicaUpdateWithoutClienteInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutClienteInput>
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutClienteInput = {
    where: controleDeAssistenciaTecnicaScalarWhereInput
    data: XOR<controleDeAssistenciaTecnicaUpdateManyMutationInput, controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutClienteInput>
  }

  export type controleDeAssistenciaTecnicaScalarWhereInput = {
    AND?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
    OR?: controleDeAssistenciaTecnicaScalarWhereInput[]
    NOT?: controleDeAssistenciaTecnicaScalarWhereInput | controleDeAssistenciaTecnicaScalarWhereInput[]
    id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    name?: StringFilter<"controleDeAssistenciaTecnica"> | string
    mesAno?: DateTimeFilter<"controleDeAssistenciaTecnica"> | Date | string
    idChamado?: StringFilter<"controleDeAssistenciaTecnica"> | string
    assistencia?: StringFilter<"controleDeAssistenciaTecnica"> | string
    observacoes?: StringFilter<"controleDeAssistenciaTecnica"> | string
    osDaAssistencia?: StringFilter<"controleDeAssistenciaTecnica"> | string
    dataDeRetirada?: DateTimeFilter<"controleDeAssistenciaTecnica"> | Date | string
    equipamento_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    statusReparo_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    statusTeste_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    instituicaoUnidade_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    tecnico_id?: StringFilter<"controleDeAssistenciaTecnica"> | string
    cliente_id?: StringNullableFilter<"controleDeAssistenciaTecnica"> | string | null
    create_at?: DateTimeNullableFilter<"controleDeAssistenciaTecnica"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controleDeAssistenciaTecnica"> | Date | string | null
  }

  export type controleDeLaboratioUpsertWithWhereUniqueWithoutClienteInput = {
    where: controleDeLaboratioWhereUniqueInput
    update: XOR<controleDeLaboratioUpdateWithoutClienteInput, controleDeLaboratioUncheckedUpdateWithoutClienteInput>
    create: XOR<controleDeLaboratioCreateWithoutClienteInput, controleDeLaboratioUncheckedCreateWithoutClienteInput>
  }

  export type controleDeLaboratioUpdateWithWhereUniqueWithoutClienteInput = {
    where: controleDeLaboratioWhereUniqueInput
    data: XOR<controleDeLaboratioUpdateWithoutClienteInput, controleDeLaboratioUncheckedUpdateWithoutClienteInput>
  }

  export type controleDeLaboratioUpdateManyWithWhereWithoutClienteInput = {
    where: controleDeLaboratioScalarWhereInput
    data: XOR<controleDeLaboratioUpdateManyMutationInput, controleDeLaboratioUncheckedUpdateManyWithoutClienteInput>
  }

  export type controleDeLaboratioScalarWhereInput = {
    AND?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
    OR?: controleDeLaboratioScalarWhereInput[]
    NOT?: controleDeLaboratioScalarWhereInput | controleDeLaboratioScalarWhereInput[]
    id?: StringFilter<"controleDeLaboratio"> | string
    nomedoEquipamento?: StringFilter<"controleDeLaboratio"> | string
    marca?: StringFilter<"controleDeLaboratio"> | string
    defeito?: StringFilter<"controleDeLaboratio"> | string
    osDeAbertura?: StringFilter<"controleDeLaboratio"> | string
    osDeDevolucao?: StringFilter<"controleDeLaboratio"> | string
    data_de_Chegada?: DateTimeFilter<"controleDeLaboratio"> | Date | string
    data_de_Finalizacao?: DateTimeFilter<"controleDeLaboratio"> | Date | string
    statusControledeLaboratorio_id?: StringFilter<"controleDeLaboratio"> | string
    instituicao_id?: StringFilter<"controleDeLaboratio"> | string
    cliente_id?: StringFilter<"controleDeLaboratio"> | string
    equipamento_id?: StringFilter<"controleDeLaboratio"> | string
  }

  export type documentacaoTecnicaUpsertWithWhereUniqueWithoutClienteInput = {
    where: documentacaoTecnicaWhereUniqueInput
    update: XOR<documentacaoTecnicaUpdateWithoutClienteInput, documentacaoTecnicaUncheckedUpdateWithoutClienteInput>
    create: XOR<documentacaoTecnicaCreateWithoutClienteInput, documentacaoTecnicaUncheckedCreateWithoutClienteInput>
  }

  export type documentacaoTecnicaUpdateWithWhereUniqueWithoutClienteInput = {
    where: documentacaoTecnicaWhereUniqueInput
    data: XOR<documentacaoTecnicaUpdateWithoutClienteInput, documentacaoTecnicaUncheckedUpdateWithoutClienteInput>
  }

  export type documentacaoTecnicaUpdateManyWithWhereWithoutClienteInput = {
    where: documentacaoTecnicaScalarWhereInput
    data: XOR<documentacaoTecnicaUpdateManyMutationInput, documentacaoTecnicaUncheckedUpdateManyWithoutClienteInput>
  }

  export type documentacaoTecnicaScalarWhereInput = {
    AND?: documentacaoTecnicaScalarWhereInput | documentacaoTecnicaScalarWhereInput[]
    OR?: documentacaoTecnicaScalarWhereInput[]
    NOT?: documentacaoTecnicaScalarWhereInput | documentacaoTecnicaScalarWhereInput[]
    id?: StringFilter<"documentacaoTecnica"> | string
    titulo?: StringFilter<"documentacaoTecnica"> | string
    descricao?: StringFilter<"documentacaoTecnica"> | string
    create_at?: DateTimeNullableFilter<"documentacaoTecnica"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"documentacaoTecnica"> | Date | string | null
    cliente_id?: StringNullableFilter<"documentacaoTecnica"> | string | null
    tecnico_id?: StringFilter<"documentacaoTecnica"> | string
    instituicao_id?: StringNullableFilter<"documentacaoTecnica"> | string | null
  }

  export type UserCreateWithoutSetorInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutUsersInput
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutSetorInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    instituicao_id?: string | null
  }

  export type UserCreateOrConnectWithoutSetorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSetorInput, UserUncheckedCreateWithoutSetorInput>
  }

  export type UserCreateManySetorInputEnvelope = {
    data: UserCreateManySetorInput | UserCreateManySetorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutSetorInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSetorInput, UserUncheckedUpdateWithoutSetorInput>
    create: XOR<UserCreateWithoutSetorInput, UserUncheckedCreateWithoutSetorInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSetorInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSetorInput, UserUncheckedUpdateWithoutSetorInput>
  }

  export type UserUpdateManyWithWhereWithoutSetorInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSetorInput>
  }

  export type UserCreateWithoutInstituicaoInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutUsersInput
    setor?: SetorCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutInstituicaoInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    setor_id?: string | null
  }

  export type UserCreateOrConnectWithoutInstituicaoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInstituicaoInput, UserUncheckedCreateWithoutInstituicaoInput>
  }

  export type UserCreateManyInstituicaoInputEnvelope = {
    data: UserCreateManyInstituicaoInput | UserCreateManyInstituicaoInput[]
    skipDuplicates?: boolean
  }

  export type OrdemdeServicoCreateWithoutInstituicaoUnidadeInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutOrdensDeServicoInput
    tecnico: TecnicoCreateNestedOneWithoutOrdensInput
    statusOrdemdeServico: statusOrdemdeServicoCreateNestedOneWithoutOrdensInput
    tipodesolicitacao: TipodeSolicitacaoCreateNestedOneWithoutOrdensInput
    formtecnico?: FormTecnicoCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
    formtecnico?: FormTecnicoUncheckedCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoCreateOrConnectWithoutInstituicaoUnidadeInput = {
    where: OrdemdeServicoWhereUniqueInput
    create: XOR<OrdemdeServicoCreateWithoutInstituicaoUnidadeInput, OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput>
  }

  export type OrdemdeServicoCreateManyInstituicaoUnidadeInputEnvelope = {
    data: OrdemdeServicoCreateManyInstituicaoUnidadeInput | OrdemdeServicoCreateManyInstituicaoUnidadeInput[]
    skipDuplicates?: boolean
  }

  export type controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeAssistenciaInput
    statusReparo: statusReparoCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    statusTeste: StatusTesteCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    tecnico: TecnicoCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
    cliente?: ClienteCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    statusTeste_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaCreateOrConnectWithoutInstituicaoUnidadeInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput>
  }

  export type controleDeAssistenciaTecnicaCreateManyInstituicaoUnidadeInputEnvelope = {
    data: controleDeAssistenciaTecnicaCreateManyInstituicaoUnidadeInput | controleDeAssistenciaTecnicaCreateManyInstituicaoUnidadeInput[]
    skipDuplicates?: boolean
  }

  export type controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesdeLaudoTecnicoInput
    tecnico: TecnicoCreateNestedOneWithoutControlesdeLaudoTecnicoInput
  }

  export type controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    equipamento_id: string
    tecnico_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaudoTecnicoCreateOrConnectWithoutInstituicaoUnidadeInput = {
    where: controleDeLaudoTecnicoWhereUniqueInput
    create: XOR<controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput, controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput>
  }

  export type controleDeLaudoTecnicoCreateManyInstituicaoUnidadeInputEnvelope = {
    data: controleDeLaudoTecnicoCreateManyInstituicaoUnidadeInput | controleDeLaudoTecnicoCreateManyInstituicaoUnidadeInput[]
    skipDuplicates?: boolean
  }

  export type controleDeLaboratioCreateWithoutInstituicaoInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio: statusControledeLaboratorioCreateNestedOneWithoutControlesDeLaboratioInput
    cliente?: ClienteCreateNestedOneWithoutControlesDeLaboratioInput
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeLaboratioInput
  }

  export type controleDeLaboratioUncheckedCreateWithoutInstituicaoInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio_id: string
    cliente_id: string
    equipamento_id: string
  }

  export type controleDeLaboratioCreateOrConnectWithoutInstituicaoInput = {
    where: controleDeLaboratioWhereUniqueInput
    create: XOR<controleDeLaboratioCreateWithoutInstituicaoInput, controleDeLaboratioUncheckedCreateWithoutInstituicaoInput>
  }

  export type controleDeLaboratioCreateManyInstituicaoInputEnvelope = {
    data: controleDeLaboratioCreateManyInstituicaoInput | controleDeLaboratioCreateManyInstituicaoInput[]
    skipDuplicates?: boolean
  }

  export type controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput
    statusMaquinasPendentesOro: statusMaquinasPendentesOroCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput
  }

  export type controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
    statusMaquinasPendentesOro_id: string
  }

  export type controledeMaquinasPendentesOroCreateOrConnectWithoutInstituicaoUnidadeInput = {
    where: controledeMaquinasPendentesOroWhereUniqueInput
    create: XOR<controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput, controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput>
  }

  export type controledeMaquinasPendentesOroCreateManyInstituicaoUnidadeInputEnvelope = {
    data: controledeMaquinasPendentesOroCreateManyInstituicaoUnidadeInput | controledeMaquinasPendentesOroCreateManyInstituicaoUnidadeInput[]
    skipDuplicates?: boolean
  }

  export type documentacaoTecnicaCreateWithoutInstituicaoInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutDocumentacoesTecnicasInput
    tecnico: TecnicoCreateNestedOneWithoutDocumentacoesTecnicasInput
  }

  export type documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
  }

  export type documentacaoTecnicaCreateOrConnectWithoutInstituicaoInput = {
    where: documentacaoTecnicaWhereUniqueInput
    create: XOR<documentacaoTecnicaCreateWithoutInstituicaoInput, documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput>
  }

  export type documentacaoTecnicaCreateManyInstituicaoInputEnvelope = {
    data: documentacaoTecnicaCreateManyInstituicaoInput | documentacaoTecnicaCreateManyInstituicaoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutInstituicaoInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutInstituicaoInput, UserUncheckedUpdateWithoutInstituicaoInput>
    create: XOR<UserCreateWithoutInstituicaoInput, UserUncheckedCreateWithoutInstituicaoInput>
  }

  export type UserUpdateWithWhereUniqueWithoutInstituicaoInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutInstituicaoInput, UserUncheckedUpdateWithoutInstituicaoInput>
  }

  export type UserUpdateManyWithWhereWithoutInstituicaoInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutInstituicaoInput>
  }

  export type OrdemdeServicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput = {
    where: OrdemdeServicoWhereUniqueInput
    update: XOR<OrdemdeServicoUpdateWithoutInstituicaoUnidadeInput, OrdemdeServicoUncheckedUpdateWithoutInstituicaoUnidadeInput>
    create: XOR<OrdemdeServicoCreateWithoutInstituicaoUnidadeInput, OrdemdeServicoUncheckedCreateWithoutInstituicaoUnidadeInput>
  }

  export type OrdemdeServicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput = {
    where: OrdemdeServicoWhereUniqueInput
    data: XOR<OrdemdeServicoUpdateWithoutInstituicaoUnidadeInput, OrdemdeServicoUncheckedUpdateWithoutInstituicaoUnidadeInput>
  }

  export type OrdemdeServicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput = {
    where: OrdemdeServicoScalarWhereInput
    data: XOR<OrdemdeServicoUpdateManyMutationInput, OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeInput>
  }

  export type controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    update: XOR<controleDeAssistenciaTecnicaUpdateWithoutInstituicaoUnidadeInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutInstituicaoUnidadeInput>
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutInstituicaoUnidadeInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutInstituicaoUnidadeInput>
  }

  export type controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    data: XOR<controleDeAssistenciaTecnicaUpdateWithoutInstituicaoUnidadeInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutInstituicaoUnidadeInput>
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutInstituicaoUnidadeInput = {
    where: controleDeAssistenciaTecnicaScalarWhereInput
    data: XOR<controleDeAssistenciaTecnicaUpdateManyMutationInput, controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeInput>
  }

  export type controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput = {
    where: controleDeLaudoTecnicoWhereUniqueInput
    update: XOR<controleDeLaudoTecnicoUpdateWithoutInstituicaoUnidadeInput, controleDeLaudoTecnicoUncheckedUpdateWithoutInstituicaoUnidadeInput>
    create: XOR<controleDeLaudoTecnicoCreateWithoutInstituicaoUnidadeInput, controleDeLaudoTecnicoUncheckedCreateWithoutInstituicaoUnidadeInput>
  }

  export type controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput = {
    where: controleDeLaudoTecnicoWhereUniqueInput
    data: XOR<controleDeLaudoTecnicoUpdateWithoutInstituicaoUnidadeInput, controleDeLaudoTecnicoUncheckedUpdateWithoutInstituicaoUnidadeInput>
  }

  export type controleDeLaudoTecnicoUpdateManyWithWhereWithoutInstituicaoUnidadeInput = {
    where: controleDeLaudoTecnicoScalarWhereInput
    data: XOR<controleDeLaudoTecnicoUpdateManyMutationInput, controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeInput>
  }

  export type controleDeLaudoTecnicoScalarWhereInput = {
    AND?: controleDeLaudoTecnicoScalarWhereInput | controleDeLaudoTecnicoScalarWhereInput[]
    OR?: controleDeLaudoTecnicoScalarWhereInput[]
    NOT?: controleDeLaudoTecnicoScalarWhereInput | controleDeLaudoTecnicoScalarWhereInput[]
    id?: StringFilter<"controleDeLaudoTecnico"> | string
    descricaodoProblema?: StringFilter<"controleDeLaudoTecnico"> | string
    mesAno?: DateTimeFilter<"controleDeLaudoTecnico"> | Date | string
    osLab?: StringFilter<"controleDeLaudoTecnico"> | string
    instituicaoUnidade_id?: StringFilter<"controleDeLaudoTecnico"> | string
    equipamento_id?: StringFilter<"controleDeLaudoTecnico"> | string
    tecnico_id?: StringFilter<"controleDeLaudoTecnico"> | string
    create_at?: DateTimeNullableFilter<"controleDeLaudoTecnico"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controleDeLaudoTecnico"> | Date | string | null
  }

  export type controleDeLaboratioUpsertWithWhereUniqueWithoutInstituicaoInput = {
    where: controleDeLaboratioWhereUniqueInput
    update: XOR<controleDeLaboratioUpdateWithoutInstituicaoInput, controleDeLaboratioUncheckedUpdateWithoutInstituicaoInput>
    create: XOR<controleDeLaboratioCreateWithoutInstituicaoInput, controleDeLaboratioUncheckedCreateWithoutInstituicaoInput>
  }

  export type controleDeLaboratioUpdateWithWhereUniqueWithoutInstituicaoInput = {
    where: controleDeLaboratioWhereUniqueInput
    data: XOR<controleDeLaboratioUpdateWithoutInstituicaoInput, controleDeLaboratioUncheckedUpdateWithoutInstituicaoInput>
  }

  export type controleDeLaboratioUpdateManyWithWhereWithoutInstituicaoInput = {
    where: controleDeLaboratioScalarWhereInput
    data: XOR<controleDeLaboratioUpdateManyMutationInput, controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoInput>
  }

  export type controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutInstituicaoUnidadeInput = {
    where: controledeMaquinasPendentesOroWhereUniqueInput
    update: XOR<controledeMaquinasPendentesOroUpdateWithoutInstituicaoUnidadeInput, controledeMaquinasPendentesOroUncheckedUpdateWithoutInstituicaoUnidadeInput>
    create: XOR<controledeMaquinasPendentesOroCreateWithoutInstituicaoUnidadeInput, controledeMaquinasPendentesOroUncheckedCreateWithoutInstituicaoUnidadeInput>
  }

  export type controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutInstituicaoUnidadeInput = {
    where: controledeMaquinasPendentesOroWhereUniqueInput
    data: XOR<controledeMaquinasPendentesOroUpdateWithoutInstituicaoUnidadeInput, controledeMaquinasPendentesOroUncheckedUpdateWithoutInstituicaoUnidadeInput>
  }

  export type controledeMaquinasPendentesOroUpdateManyWithWhereWithoutInstituicaoUnidadeInput = {
    where: controledeMaquinasPendentesOroScalarWhereInput
    data: XOR<controledeMaquinasPendentesOroUpdateManyMutationInput, controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeInput>
  }

  export type controledeMaquinasPendentesOroScalarWhereInput = {
    AND?: controledeMaquinasPendentesOroScalarWhereInput | controledeMaquinasPendentesOroScalarWhereInput[]
    OR?: controledeMaquinasPendentesOroScalarWhereInput[]
    NOT?: controledeMaquinasPendentesOroScalarWhereInput | controledeMaquinasPendentesOroScalarWhereInput[]
    id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    datadaInstalacao?: DateTimeFilter<"controledeMaquinasPendentesOro"> | Date | string
    osInstalacao?: StringFilter<"controledeMaquinasPendentesOro"> | string
    osRetirada?: StringFilter<"controledeMaquinasPendentesOro"> | string
    create_at?: DateTimeNullableFilter<"controledeMaquinasPendentesOro"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controledeMaquinasPendentesOro"> | Date | string | null
    equipamento_id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    instituicaoUnidade_id?: StringFilter<"controledeMaquinasPendentesOro"> | string
    statusMaquinasPendentesOro_id?: StringFilter<"controledeMaquinasPendentesOro"> | string
  }

  export type documentacaoTecnicaUpsertWithWhereUniqueWithoutInstituicaoInput = {
    where: documentacaoTecnicaWhereUniqueInput
    update: XOR<documentacaoTecnicaUpdateWithoutInstituicaoInput, documentacaoTecnicaUncheckedUpdateWithoutInstituicaoInput>
    create: XOR<documentacaoTecnicaCreateWithoutInstituicaoInput, documentacaoTecnicaUncheckedCreateWithoutInstituicaoInput>
  }

  export type documentacaoTecnicaUpdateWithWhereUniqueWithoutInstituicaoInput = {
    where: documentacaoTecnicaWhereUniqueInput
    data: XOR<documentacaoTecnicaUpdateWithoutInstituicaoInput, documentacaoTecnicaUncheckedUpdateWithoutInstituicaoInput>
  }

  export type documentacaoTecnicaUpdateManyWithWhereWithoutInstituicaoInput = {
    where: documentacaoTecnicaScalarWhereInput
    data: XOR<documentacaoTecnicaUpdateManyMutationInput, documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoInput>
  }

  export type OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutOrdensDeServicoInput
    tecnico: TecnicoCreateNestedOneWithoutOrdensInput
    tipodesolicitacao: TipodeSolicitacaoCreateNestedOneWithoutOrdensInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutOrdensInput
    formtecnico?: FormTecnicoCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
    formtecnico?: FormTecnicoUncheckedCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoCreateOrConnectWithoutStatusOrdemdeServicoInput = {
    where: OrdemdeServicoWhereUniqueInput
    create: XOR<OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput, OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput>
  }

  export type OrdemdeServicoCreateManyStatusOrdemdeServicoInputEnvelope = {
    data: OrdemdeServicoCreateManyStatusOrdemdeServicoInput | OrdemdeServicoCreateManyStatusOrdemdeServicoInput[]
    skipDuplicates?: boolean
  }

  export type FormTecnicoCreateWithoutStatusOrdemdeServicoInput = {
    id?: string
    name: string
    diagnostico: string
    solucao: string
    assinatura: string
    status_id: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    ordemDeServico: OrdemdeServicoCreateNestedOneWithoutFormtecnicoInput
  }

  export type FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput = {
    id?: string
    name: string
    diagnostico: string
    solucao: string
    assinatura: string
    status_id: string
    ordemDeServico_id: string
    created_at?: Date | string | null
    update_at?: Date | string | null
  }

  export type FormTecnicoCreateOrConnectWithoutStatusOrdemdeServicoInput = {
    where: FormTecnicoWhereUniqueInput
    create: XOR<FormTecnicoCreateWithoutStatusOrdemdeServicoInput, FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput>
  }

  export type FormTecnicoCreateManyStatusOrdemdeServicoInputEnvelope = {
    data: FormTecnicoCreateManyStatusOrdemdeServicoInput | FormTecnicoCreateManyStatusOrdemdeServicoInput[]
    skipDuplicates?: boolean
  }

  export type OrdemdeServicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput = {
    where: OrdemdeServicoWhereUniqueInput
    update: XOR<OrdemdeServicoUpdateWithoutStatusOrdemdeServicoInput, OrdemdeServicoUncheckedUpdateWithoutStatusOrdemdeServicoInput>
    create: XOR<OrdemdeServicoCreateWithoutStatusOrdemdeServicoInput, OrdemdeServicoUncheckedCreateWithoutStatusOrdemdeServicoInput>
  }

  export type OrdemdeServicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput = {
    where: OrdemdeServicoWhereUniqueInput
    data: XOR<OrdemdeServicoUpdateWithoutStatusOrdemdeServicoInput, OrdemdeServicoUncheckedUpdateWithoutStatusOrdemdeServicoInput>
  }

  export type OrdemdeServicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput = {
    where: OrdemdeServicoScalarWhereInput
    data: XOR<OrdemdeServicoUpdateManyMutationInput, OrdemdeServicoUncheckedUpdateManyWithoutStatusOrdemdeServicoInput>
  }

  export type FormTecnicoUpsertWithWhereUniqueWithoutStatusOrdemdeServicoInput = {
    where: FormTecnicoWhereUniqueInput
    update: XOR<FormTecnicoUpdateWithoutStatusOrdemdeServicoInput, FormTecnicoUncheckedUpdateWithoutStatusOrdemdeServicoInput>
    create: XOR<FormTecnicoCreateWithoutStatusOrdemdeServicoInput, FormTecnicoUncheckedCreateWithoutStatusOrdemdeServicoInput>
  }

  export type FormTecnicoUpdateWithWhereUniqueWithoutStatusOrdemdeServicoInput = {
    where: FormTecnicoWhereUniqueInput
    data: XOR<FormTecnicoUpdateWithoutStatusOrdemdeServicoInput, FormTecnicoUncheckedUpdateWithoutStatusOrdemdeServicoInput>
  }

  export type FormTecnicoUpdateManyWithWhereWithoutStatusOrdemdeServicoInput = {
    where: FormTecnicoScalarWhereInput
    data: XOR<FormTecnicoUpdateManyMutationInput, FormTecnicoUncheckedUpdateManyWithoutStatusOrdemdeServicoInput>
  }

  export type FormTecnicoScalarWhereInput = {
    AND?: FormTecnicoScalarWhereInput | FormTecnicoScalarWhereInput[]
    OR?: FormTecnicoScalarWhereInput[]
    NOT?: FormTecnicoScalarWhereInput | FormTecnicoScalarWhereInput[]
    id?: StringFilter<"FormTecnico"> | string
    name?: StringFilter<"FormTecnico"> | string
    diagnostico?: StringFilter<"FormTecnico"> | string
    solucao?: StringFilter<"FormTecnico"> | string
    assinatura?: StringFilter<"FormTecnico"> | string
    status_id?: StringFilter<"FormTecnico"> | string
    statusOrdemdeServico_id?: StringFilter<"FormTecnico"> | string
    ordemDeServico_id?: StringFilter<"FormTecnico"> | string
    created_at?: DateTimeNullableFilter<"FormTecnico"> | Date | string | null
    update_at?: DateTimeNullableFilter<"FormTecnico"> | Date | string | null
  }

  export type OrdemdeServicoCreateWithoutTipodesolicitacaoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutOrdensDeServicoInput
    tecnico: TecnicoCreateNestedOneWithoutOrdensInput
    statusOrdemdeServico: statusOrdemdeServicoCreateNestedOneWithoutOrdensInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutOrdensInput
    formtecnico?: FormTecnicoCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    instituicaoUnidade_id: string
    formtecnico?: FormTecnicoUncheckedCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoCreateOrConnectWithoutTipodesolicitacaoInput = {
    where: OrdemdeServicoWhereUniqueInput
    create: XOR<OrdemdeServicoCreateWithoutTipodesolicitacaoInput, OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput>
  }

  export type OrdemdeServicoCreateManyTipodesolicitacaoInputEnvelope = {
    data: OrdemdeServicoCreateManyTipodesolicitacaoInput | OrdemdeServicoCreateManyTipodesolicitacaoInput[]
    skipDuplicates?: boolean
  }

  export type OrdemdeServicoUpsertWithWhereUniqueWithoutTipodesolicitacaoInput = {
    where: OrdemdeServicoWhereUniqueInput
    update: XOR<OrdemdeServicoUpdateWithoutTipodesolicitacaoInput, OrdemdeServicoUncheckedUpdateWithoutTipodesolicitacaoInput>
    create: XOR<OrdemdeServicoCreateWithoutTipodesolicitacaoInput, OrdemdeServicoUncheckedCreateWithoutTipodesolicitacaoInput>
  }

  export type OrdemdeServicoUpdateWithWhereUniqueWithoutTipodesolicitacaoInput = {
    where: OrdemdeServicoWhereUniqueInput
    data: XOR<OrdemdeServicoUpdateWithoutTipodesolicitacaoInput, OrdemdeServicoUncheckedUpdateWithoutTipodesolicitacaoInput>
  }

  export type OrdemdeServicoUpdateManyWithWhereWithoutTipodesolicitacaoInput = {
    where: OrdemdeServicoScalarWhereInput
    data: XOR<OrdemdeServicoUpdateManyMutationInput, OrdemdeServicoUncheckedUpdateManyWithoutTipodesolicitacaoInput>
  }

  export type OrdemdeServicoCreateWithoutTecnicoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutOrdensDeServicoInput
    statusOrdemdeServico: statusOrdemdeServicoCreateNestedOneWithoutOrdensInput
    tipodesolicitacao: TipodeSolicitacaoCreateNestedOneWithoutOrdensInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutOrdensInput
    formtecnico?: FormTecnicoCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoUncheckedCreateWithoutTecnicoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
    formtecnico?: FormTecnicoUncheckedCreateNestedOneWithoutOrdemDeServicoInput
  }

  export type OrdemdeServicoCreateOrConnectWithoutTecnicoInput = {
    where: OrdemdeServicoWhereUniqueInput
    create: XOR<OrdemdeServicoCreateWithoutTecnicoInput, OrdemdeServicoUncheckedCreateWithoutTecnicoInput>
  }

  export type OrdemdeServicoCreateManyTecnicoInputEnvelope = {
    data: OrdemdeServicoCreateManyTecnicoInput | OrdemdeServicoCreateManyTecnicoInput[]
    skipDuplicates?: boolean
  }

  export type controleDeAssistenciaTecnicaCreateWithoutTecnicoInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeAssistenciaInput
    statusReparo: statusReparoCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    statusTeste: StatusTesteCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesdeAssistenciaTecnicaInput
    cliente?: ClienteCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaCreateOrConnectWithoutTecnicoInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutTecnicoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput>
  }

  export type controleDeAssistenciaTecnicaCreateManyTecnicoInputEnvelope = {
    data: controleDeAssistenciaTecnicaCreateManyTecnicoInput | controleDeAssistenciaTecnicaCreateManyTecnicoInput[]
    skipDuplicates?: boolean
  }

  export type controleDeLaudoTecnicoCreateWithoutTecnicoInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesdeLaudoTecnicoInput
    equipamento: EquipamentoCreateNestedOneWithoutControlesdeLaudoTecnicoInput
  }

  export type controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    instituicaoUnidade_id: string
    equipamento_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaudoTecnicoCreateOrConnectWithoutTecnicoInput = {
    where: controleDeLaudoTecnicoWhereUniqueInput
    create: XOR<controleDeLaudoTecnicoCreateWithoutTecnicoInput, controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput>
  }

  export type controleDeLaudoTecnicoCreateManyTecnicoInputEnvelope = {
    data: controleDeLaudoTecnicoCreateManyTecnicoInput | controleDeLaudoTecnicoCreateManyTecnicoInput[]
    skipDuplicates?: boolean
  }

  export type documentacaoTecnicaCreateWithoutTecnicoInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutDocumentacoesTecnicasInput
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutDocumentacoesTecnicasInput
  }

  export type documentacaoTecnicaUncheckedCreateWithoutTecnicoInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    instituicao_id?: string | null
  }

  export type documentacaoTecnicaCreateOrConnectWithoutTecnicoInput = {
    where: documentacaoTecnicaWhereUniqueInput
    create: XOR<documentacaoTecnicaCreateWithoutTecnicoInput, documentacaoTecnicaUncheckedCreateWithoutTecnicoInput>
  }

  export type documentacaoTecnicaCreateManyTecnicoInputEnvelope = {
    data: documentacaoTecnicaCreateManyTecnicoInput | documentacaoTecnicaCreateManyTecnicoInput[]
    skipDuplicates?: boolean
  }

  export type OrdemdeServicoUpsertWithWhereUniqueWithoutTecnicoInput = {
    where: OrdemdeServicoWhereUniqueInput
    update: XOR<OrdemdeServicoUpdateWithoutTecnicoInput, OrdemdeServicoUncheckedUpdateWithoutTecnicoInput>
    create: XOR<OrdemdeServicoCreateWithoutTecnicoInput, OrdemdeServicoUncheckedCreateWithoutTecnicoInput>
  }

  export type OrdemdeServicoUpdateWithWhereUniqueWithoutTecnicoInput = {
    where: OrdemdeServicoWhereUniqueInput
    data: XOR<OrdemdeServicoUpdateWithoutTecnicoInput, OrdemdeServicoUncheckedUpdateWithoutTecnicoInput>
  }

  export type OrdemdeServicoUpdateManyWithWhereWithoutTecnicoInput = {
    where: OrdemdeServicoScalarWhereInput
    data: XOR<OrdemdeServicoUpdateManyMutationInput, OrdemdeServicoUncheckedUpdateManyWithoutTecnicoInput>
  }

  export type controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutTecnicoInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    update: XOR<controleDeAssistenciaTecnicaUpdateWithoutTecnicoInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutTecnicoInput>
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutTecnicoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutTecnicoInput>
  }

  export type controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutTecnicoInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    data: XOR<controleDeAssistenciaTecnicaUpdateWithoutTecnicoInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutTecnicoInput>
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutTecnicoInput = {
    where: controleDeAssistenciaTecnicaScalarWhereInput
    data: XOR<controleDeAssistenciaTecnicaUpdateManyMutationInput, controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutTecnicoInput>
  }

  export type controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutTecnicoInput = {
    where: controleDeLaudoTecnicoWhereUniqueInput
    update: XOR<controleDeLaudoTecnicoUpdateWithoutTecnicoInput, controleDeLaudoTecnicoUncheckedUpdateWithoutTecnicoInput>
    create: XOR<controleDeLaudoTecnicoCreateWithoutTecnicoInput, controleDeLaudoTecnicoUncheckedCreateWithoutTecnicoInput>
  }

  export type controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutTecnicoInput = {
    where: controleDeLaudoTecnicoWhereUniqueInput
    data: XOR<controleDeLaudoTecnicoUpdateWithoutTecnicoInput, controleDeLaudoTecnicoUncheckedUpdateWithoutTecnicoInput>
  }

  export type controleDeLaudoTecnicoUpdateManyWithWhereWithoutTecnicoInput = {
    where: controleDeLaudoTecnicoScalarWhereInput
    data: XOR<controleDeLaudoTecnicoUpdateManyMutationInput, controleDeLaudoTecnicoUncheckedUpdateManyWithoutTecnicoInput>
  }

  export type documentacaoTecnicaUpsertWithWhereUniqueWithoutTecnicoInput = {
    where: documentacaoTecnicaWhereUniqueInput
    update: XOR<documentacaoTecnicaUpdateWithoutTecnicoInput, documentacaoTecnicaUncheckedUpdateWithoutTecnicoInput>
    create: XOR<documentacaoTecnicaCreateWithoutTecnicoInput, documentacaoTecnicaUncheckedCreateWithoutTecnicoInput>
  }

  export type documentacaoTecnicaUpdateWithWhereUniqueWithoutTecnicoInput = {
    where: documentacaoTecnicaWhereUniqueInput
    data: XOR<documentacaoTecnicaUpdateWithoutTecnicoInput, documentacaoTecnicaUncheckedUpdateWithoutTecnicoInput>
  }

  export type documentacaoTecnicaUpdateManyWithWhereWithoutTecnicoInput = {
    where: documentacaoTecnicaScalarWhereInput
    data: XOR<documentacaoTecnicaUpdateManyMutationInput, documentacaoTecnicaUncheckedUpdateManyWithoutTecnicoInput>
  }

  export type ClienteCreateWithoutOrdensDeServicoInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutOrdensDeServicoInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutOrdensDeServicoInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutOrdensDeServicoInput, ClienteUncheckedCreateWithoutOrdensDeServicoInput>
  }

  export type TecnicoCreateWithoutOrdensInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutTecnicoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutTecnicoInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoUncheckedCreateWithoutOrdensInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutTecnicoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutTecnicoInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoCreateOrConnectWithoutOrdensInput = {
    where: TecnicoWhereUniqueInput
    create: XOR<TecnicoCreateWithoutOrdensInput, TecnicoUncheckedCreateWithoutOrdensInput>
  }

  export type statusOrdemdeServicoCreateWithoutOrdensInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    formstecnico?: FormTecnicoCreateNestedManyWithoutStatusOrdemdeServicoInput
  }

  export type statusOrdemdeServicoUncheckedCreateWithoutOrdensInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    formstecnico?: FormTecnicoUncheckedCreateNestedManyWithoutStatusOrdemdeServicoInput
  }

  export type statusOrdemdeServicoCreateOrConnectWithoutOrdensInput = {
    where: statusOrdemdeServicoWhereUniqueInput
    create: XOR<statusOrdemdeServicoCreateWithoutOrdensInput, statusOrdemdeServicoUncheckedCreateWithoutOrdensInput>
  }

  export type TipodeSolicitacaoCreateWithoutOrdensInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type TipodeSolicitacaoUncheckedCreateWithoutOrdensInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type TipodeSolicitacaoCreateOrConnectWithoutOrdensInput = {
    where: TipodeSolicitacaoWhereUniqueInput
    create: XOR<TipodeSolicitacaoCreateWithoutOrdensInput, TipodeSolicitacaoUncheckedCreateWithoutOrdensInput>
  }

  export type InstituicaoUnidadeCreateWithoutOrdensInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutInstituicaoInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeUncheckedCreateWithoutOrdensInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutInstituicaoInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeCreateOrConnectWithoutOrdensInput = {
    where: InstituicaoUnidadeWhereUniqueInput
    create: XOR<InstituicaoUnidadeCreateWithoutOrdensInput, InstituicaoUnidadeUncheckedCreateWithoutOrdensInput>
  }

  export type FormTecnicoCreateWithoutOrdemDeServicoInput = {
    id?: string
    name: string
    diagnostico: string
    solucao: string
    assinatura: string
    status_id: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    statusOrdemdeServico: statusOrdemdeServicoCreateNestedOneWithoutFormstecnicoInput
  }

  export type FormTecnicoUncheckedCreateWithoutOrdemDeServicoInput = {
    id?: string
    name: string
    diagnostico: string
    solucao: string
    assinatura: string
    status_id: string
    statusOrdemdeServico_id: string
    created_at?: Date | string | null
    update_at?: Date | string | null
  }

  export type FormTecnicoCreateOrConnectWithoutOrdemDeServicoInput = {
    where: FormTecnicoWhereUniqueInput
    create: XOR<FormTecnicoCreateWithoutOrdemDeServicoInput, FormTecnicoUncheckedCreateWithoutOrdemDeServicoInput>
  }

  export type ClienteUpsertWithoutOrdensDeServicoInput = {
    update: XOR<ClienteUpdateWithoutOrdensDeServicoInput, ClienteUncheckedUpdateWithoutOrdensDeServicoInput>
    create: XOR<ClienteCreateWithoutOrdensDeServicoInput, ClienteUncheckedCreateWithoutOrdensDeServicoInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutOrdensDeServicoInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutOrdensDeServicoInput, ClienteUncheckedUpdateWithoutOrdensDeServicoInput>
  }

  export type ClienteUpdateWithoutOrdensDeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutOrdensDeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type TecnicoUpsertWithoutOrdensInput = {
    update: XOR<TecnicoUpdateWithoutOrdensInput, TecnicoUncheckedUpdateWithoutOrdensInput>
    create: XOR<TecnicoCreateWithoutOrdensInput, TecnicoUncheckedCreateWithoutOrdensInput>
    where?: TecnicoWhereInput
  }

  export type TecnicoUpdateToOneWithWhereWithoutOrdensInput = {
    where?: TecnicoWhereInput
    data: XOR<TecnicoUpdateWithoutOrdensInput, TecnicoUncheckedUpdateWithoutOrdensInput>
  }

  export type TecnicoUpdateWithoutOrdensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutTecnicoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutTecnicoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutTecnicoNestedInput
  }

  export type TecnicoUncheckedUpdateWithoutOrdensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutTecnicoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput
  }

  export type statusOrdemdeServicoUpsertWithoutOrdensInput = {
    update: XOR<statusOrdemdeServicoUpdateWithoutOrdensInput, statusOrdemdeServicoUncheckedUpdateWithoutOrdensInput>
    create: XOR<statusOrdemdeServicoCreateWithoutOrdensInput, statusOrdemdeServicoUncheckedCreateWithoutOrdensInput>
    where?: statusOrdemdeServicoWhereInput
  }

  export type statusOrdemdeServicoUpdateToOneWithWhereWithoutOrdensInput = {
    where?: statusOrdemdeServicoWhereInput
    data: XOR<statusOrdemdeServicoUpdateWithoutOrdensInput, statusOrdemdeServicoUncheckedUpdateWithoutOrdensInput>
  }

  export type statusOrdemdeServicoUpdateWithoutOrdensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    formstecnico?: FormTecnicoUpdateManyWithoutStatusOrdemdeServicoNestedInput
  }

  export type statusOrdemdeServicoUncheckedUpdateWithoutOrdensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    formstecnico?: FormTecnicoUncheckedUpdateManyWithoutStatusOrdemdeServicoNestedInput
  }

  export type TipodeSolicitacaoUpsertWithoutOrdensInput = {
    update: XOR<TipodeSolicitacaoUpdateWithoutOrdensInput, TipodeSolicitacaoUncheckedUpdateWithoutOrdensInput>
    create: XOR<TipodeSolicitacaoCreateWithoutOrdensInput, TipodeSolicitacaoUncheckedCreateWithoutOrdensInput>
    where?: TipodeSolicitacaoWhereInput
  }

  export type TipodeSolicitacaoUpdateToOneWithWhereWithoutOrdensInput = {
    where?: TipodeSolicitacaoWhereInput
    data: XOR<TipodeSolicitacaoUpdateWithoutOrdensInput, TipodeSolicitacaoUncheckedUpdateWithoutOrdensInput>
  }

  export type TipodeSolicitacaoUpdateWithoutOrdensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TipodeSolicitacaoUncheckedUpdateWithoutOrdensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InstituicaoUnidadeUpsertWithoutOrdensInput = {
    update: XOR<InstituicaoUnidadeUpdateWithoutOrdensInput, InstituicaoUnidadeUncheckedUpdateWithoutOrdensInput>
    create: XOR<InstituicaoUnidadeCreateWithoutOrdensInput, InstituicaoUnidadeUncheckedCreateWithoutOrdensInput>
    where?: InstituicaoUnidadeWhereInput
  }

  export type InstituicaoUnidadeUpdateToOneWithWhereWithoutOrdensInput = {
    where?: InstituicaoUnidadeWhereInput
    data: XOR<InstituicaoUnidadeUpdateWithoutOrdensInput, InstituicaoUnidadeUncheckedUpdateWithoutOrdensInput>
  }

  export type InstituicaoUnidadeUpdateWithoutOrdensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutInstituicaoNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUnidadeUncheckedUpdateWithoutOrdensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutInstituicaoNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type FormTecnicoUpsertWithoutOrdemDeServicoInput = {
    update: XOR<FormTecnicoUpdateWithoutOrdemDeServicoInput, FormTecnicoUncheckedUpdateWithoutOrdemDeServicoInput>
    create: XOR<FormTecnicoCreateWithoutOrdemDeServicoInput, FormTecnicoUncheckedCreateWithoutOrdemDeServicoInput>
    where?: FormTecnicoWhereInput
  }

  export type FormTecnicoUpdateToOneWithWhereWithoutOrdemDeServicoInput = {
    where?: FormTecnicoWhereInput
    data: XOR<FormTecnicoUpdateWithoutOrdemDeServicoInput, FormTecnicoUncheckedUpdateWithoutOrdemDeServicoInput>
  }

  export type FormTecnicoUpdateWithoutOrdemDeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    diagnostico?: StringFieldUpdateOperationsInput | string
    solucao?: StringFieldUpdateOperationsInput | string
    assinatura?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusOrdemdeServico?: statusOrdemdeServicoUpdateOneRequiredWithoutFormstecnicoNestedInput
  }

  export type FormTecnicoUncheckedUpdateWithoutOrdemDeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    diagnostico?: StringFieldUpdateOperationsInput | string
    solucao?: StringFieldUpdateOperationsInput | string
    assinatura?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusOrdemdeServicoCreateWithoutFormstecnicoInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoCreateNestedManyWithoutStatusOrdemdeServicoInput
  }

  export type statusOrdemdeServicoUncheckedCreateWithoutFormstecnicoInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutStatusOrdemdeServicoInput
  }

  export type statusOrdemdeServicoCreateOrConnectWithoutFormstecnicoInput = {
    where: statusOrdemdeServicoWhereUniqueInput
    create: XOR<statusOrdemdeServicoCreateWithoutFormstecnicoInput, statusOrdemdeServicoUncheckedCreateWithoutFormstecnicoInput>
  }

  export type OrdemdeServicoCreateWithoutFormtecnicoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente?: ClienteCreateNestedOneWithoutOrdensDeServicoInput
    tecnico: TecnicoCreateNestedOneWithoutOrdensInput
    statusOrdemdeServico: statusOrdemdeServicoCreateNestedOneWithoutOrdensInput
    tipodesolicitacao: TipodeSolicitacaoCreateNestedOneWithoutOrdensInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutOrdensInput
  }

  export type OrdemdeServicoUncheckedCreateWithoutFormtecnicoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
  }

  export type OrdemdeServicoCreateOrConnectWithoutFormtecnicoInput = {
    where: OrdemdeServicoWhereUniqueInput
    create: XOR<OrdemdeServicoCreateWithoutFormtecnicoInput, OrdemdeServicoUncheckedCreateWithoutFormtecnicoInput>
  }

  export type statusOrdemdeServicoUpsertWithoutFormstecnicoInput = {
    update: XOR<statusOrdemdeServicoUpdateWithoutFormstecnicoInput, statusOrdemdeServicoUncheckedUpdateWithoutFormstecnicoInput>
    create: XOR<statusOrdemdeServicoCreateWithoutFormstecnicoInput, statusOrdemdeServicoUncheckedCreateWithoutFormstecnicoInput>
    where?: statusOrdemdeServicoWhereInput
  }

  export type statusOrdemdeServicoUpdateToOneWithWhereWithoutFormstecnicoInput = {
    where?: statusOrdemdeServicoWhereInput
    data: XOR<statusOrdemdeServicoUpdateWithoutFormstecnicoInput, statusOrdemdeServicoUncheckedUpdateWithoutFormstecnicoInput>
  }

  export type statusOrdemdeServicoUpdateWithoutFormstecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUpdateManyWithoutStatusOrdemdeServicoNestedInput
  }

  export type statusOrdemdeServicoUncheckedUpdateWithoutFormstecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutStatusOrdemdeServicoNestedInput
  }

  export type OrdemdeServicoUpsertWithoutFormtecnicoInput = {
    update: XOR<OrdemdeServicoUpdateWithoutFormtecnicoInput, OrdemdeServicoUncheckedUpdateWithoutFormtecnicoInput>
    create: XOR<OrdemdeServicoCreateWithoutFormtecnicoInput, OrdemdeServicoUncheckedCreateWithoutFormtecnicoInput>
    where?: OrdemdeServicoWhereInput
  }

  export type OrdemdeServicoUpdateToOneWithWhereWithoutFormtecnicoInput = {
    where?: OrdemdeServicoWhereInput
    data: XOR<OrdemdeServicoUpdateWithoutFormtecnicoInput, OrdemdeServicoUncheckedUpdateWithoutFormtecnicoInput>
  }

  export type OrdemdeServicoUpdateWithoutFormtecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutOrdensDeServicoNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutOrdensNestedInput
    statusOrdemdeServico?: statusOrdemdeServicoUpdateOneRequiredWithoutOrdensNestedInput
    tipodesolicitacao?: TipodeSolicitacaoUpdateOneRequiredWithoutOrdensNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutOrdensNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateWithoutFormtecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    statusReparo: statusReparoCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    statusTeste: StatusTesteCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesdeAssistenciaTecnicaInput
    tecnico: TecnicoCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
    cliente?: ClienteCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    statusReparo_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaCreateOrConnectWithoutEquipamentoInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput>
  }

  export type controleDeAssistenciaTecnicaCreateManyEquipamentoInputEnvelope = {
    data: controleDeAssistenciaTecnicaCreateManyEquipamentoInput | controleDeAssistenciaTecnicaCreateManyEquipamentoInput[]
    skipDuplicates?: boolean
  }

  export type controleDeLaudoTecnicoCreateWithoutEquipamentoInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesdeLaudoTecnicoInput
    tecnico: TecnicoCreateNestedOneWithoutControlesdeLaudoTecnicoInput
  }

  export type controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    instituicaoUnidade_id: string
    tecnico_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaudoTecnicoCreateOrConnectWithoutEquipamentoInput = {
    where: controleDeLaudoTecnicoWhereUniqueInput
    create: XOR<controleDeLaudoTecnicoCreateWithoutEquipamentoInput, controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput>
  }

  export type controleDeLaudoTecnicoCreateManyEquipamentoInputEnvelope = {
    data: controleDeLaudoTecnicoCreateManyEquipamentoInput | controleDeLaudoTecnicoCreateManyEquipamentoInput[]
    skipDuplicates?: boolean
  }

  export type controleDeLaboratioCreateWithoutEquipamentoInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio: statusControledeLaboratorioCreateNestedOneWithoutControlesDeLaboratioInput
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutControlesDeLaboratioInput
    cliente?: ClienteCreateNestedOneWithoutControlesDeLaboratioInput
  }

  export type controleDeLaboratioUncheckedCreateWithoutEquipamentoInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio_id: string
    instituicao_id: string
    cliente_id: string
  }

  export type controleDeLaboratioCreateOrConnectWithoutEquipamentoInput = {
    where: controleDeLaboratioWhereUniqueInput
    create: XOR<controleDeLaboratioCreateWithoutEquipamentoInput, controleDeLaboratioUncheckedCreateWithoutEquipamentoInput>
  }

  export type controleDeLaboratioCreateManyEquipamentoInputEnvelope = {
    data: controleDeLaboratioCreateManyEquipamentoInput | controleDeLaboratioCreateManyEquipamentoInput[]
    skipDuplicates?: boolean
  }

  export type controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput = {
    id?: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    statusMaquinasPendentesLab: statusMaquinasPendentesLabCreateNestedOneWithoutControlesDeMaquinasPendentesLaboratorioInput
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput = {
    id?: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    statusMaquinasPendentesLab_id: string
  }

  export type controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutEquipamentoInput = {
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    create: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput>
  }

  export type controleDeMaquinasPendentesLaboratorioCreateManyEquipamentoInputEnvelope = {
    data: controleDeMaquinasPendentesLaboratorioCreateManyEquipamentoInput | controleDeMaquinasPendentesLaboratorioCreateManyEquipamentoInput[]
    skipDuplicates?: boolean
  }

  export type controledeMaquinasPendentesOroCreateWithoutEquipamentoInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput
    statusMaquinasPendentesOro: statusMaquinasPendentesOroCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput
  }

  export type controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    instituicaoUnidade_id: string
    statusMaquinasPendentesOro_id: string
  }

  export type controledeMaquinasPendentesOroCreateOrConnectWithoutEquipamentoInput = {
    where: controledeMaquinasPendentesOroWhereUniqueInput
    create: XOR<controledeMaquinasPendentesOroCreateWithoutEquipamentoInput, controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput>
  }

  export type controledeMaquinasPendentesOroCreateManyEquipamentoInputEnvelope = {
    data: controledeMaquinasPendentesOroCreateManyEquipamentoInput | controledeMaquinasPendentesOroCreateManyEquipamentoInput[]
    skipDuplicates?: boolean
  }

  export type controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutEquipamentoInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    update: XOR<controleDeAssistenciaTecnicaUpdateWithoutEquipamentoInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutEquipamentoInput>
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutEquipamentoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutEquipamentoInput>
  }

  export type controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutEquipamentoInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    data: XOR<controleDeAssistenciaTecnicaUpdateWithoutEquipamentoInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutEquipamentoInput>
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutEquipamentoInput = {
    where: controleDeAssistenciaTecnicaScalarWhereInput
    data: XOR<controleDeAssistenciaTecnicaUpdateManyMutationInput, controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutEquipamentoInput>
  }

  export type controleDeLaudoTecnicoUpsertWithWhereUniqueWithoutEquipamentoInput = {
    where: controleDeLaudoTecnicoWhereUniqueInput
    update: XOR<controleDeLaudoTecnicoUpdateWithoutEquipamentoInput, controleDeLaudoTecnicoUncheckedUpdateWithoutEquipamentoInput>
    create: XOR<controleDeLaudoTecnicoCreateWithoutEquipamentoInput, controleDeLaudoTecnicoUncheckedCreateWithoutEquipamentoInput>
  }

  export type controleDeLaudoTecnicoUpdateWithWhereUniqueWithoutEquipamentoInput = {
    where: controleDeLaudoTecnicoWhereUniqueInput
    data: XOR<controleDeLaudoTecnicoUpdateWithoutEquipamentoInput, controleDeLaudoTecnicoUncheckedUpdateWithoutEquipamentoInput>
  }

  export type controleDeLaudoTecnicoUpdateManyWithWhereWithoutEquipamentoInput = {
    where: controleDeLaudoTecnicoScalarWhereInput
    data: XOR<controleDeLaudoTecnicoUpdateManyMutationInput, controleDeLaudoTecnicoUncheckedUpdateManyWithoutEquipamentoInput>
  }

  export type controleDeLaboratioUpsertWithWhereUniqueWithoutEquipamentoInput = {
    where: controleDeLaboratioWhereUniqueInput
    update: XOR<controleDeLaboratioUpdateWithoutEquipamentoInput, controleDeLaboratioUncheckedUpdateWithoutEquipamentoInput>
    create: XOR<controleDeLaboratioCreateWithoutEquipamentoInput, controleDeLaboratioUncheckedCreateWithoutEquipamentoInput>
  }

  export type controleDeLaboratioUpdateWithWhereUniqueWithoutEquipamentoInput = {
    where: controleDeLaboratioWhereUniqueInput
    data: XOR<controleDeLaboratioUpdateWithoutEquipamentoInput, controleDeLaboratioUncheckedUpdateWithoutEquipamentoInput>
  }

  export type controleDeLaboratioUpdateManyWithWhereWithoutEquipamentoInput = {
    where: controleDeLaboratioScalarWhereInput
    data: XOR<controleDeLaboratioUpdateManyMutationInput, controleDeLaboratioUncheckedUpdateManyWithoutEquipamentoInput>
  }

  export type controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutEquipamentoInput = {
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    update: XOR<controleDeMaquinasPendentesLaboratorioUpdateWithoutEquipamentoInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateWithoutEquipamentoInput>
    create: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutEquipamentoInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutEquipamentoInput>
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutEquipamentoInput = {
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    data: XOR<controleDeMaquinasPendentesLaboratorioUpdateWithoutEquipamentoInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateWithoutEquipamentoInput>
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutEquipamentoInput = {
    where: controleDeMaquinasPendentesLaboratorioScalarWhereInput
    data: XOR<controleDeMaquinasPendentesLaboratorioUpdateManyMutationInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutEquipamentoInput>
  }

  export type controleDeMaquinasPendentesLaboratorioScalarWhereInput = {
    AND?: controleDeMaquinasPendentesLaboratorioScalarWhereInput | controleDeMaquinasPendentesLaboratorioScalarWhereInput[]
    OR?: controleDeMaquinasPendentesLaboratorioScalarWhereInput[]
    NOT?: controleDeMaquinasPendentesLaboratorioScalarWhereInput | controleDeMaquinasPendentesLaboratorioScalarWhereInput[]
    id?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    numeroDeSerie?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    ssd?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    idDaOs?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    obs?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    create_at?: DateTimeNullableFilter<"controleDeMaquinasPendentesLaboratorio"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"controleDeMaquinasPendentesLaboratorio"> | Date | string | null
    equipamento_id?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
    statusMaquinasPendentesLab_id?: StringFilter<"controleDeMaquinasPendentesLaboratorio"> | string
  }

  export type controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutEquipamentoInput = {
    where: controledeMaquinasPendentesOroWhereUniqueInput
    update: XOR<controledeMaquinasPendentesOroUpdateWithoutEquipamentoInput, controledeMaquinasPendentesOroUncheckedUpdateWithoutEquipamentoInput>
    create: XOR<controledeMaquinasPendentesOroCreateWithoutEquipamentoInput, controledeMaquinasPendentesOroUncheckedCreateWithoutEquipamentoInput>
  }

  export type controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutEquipamentoInput = {
    where: controledeMaquinasPendentesOroWhereUniqueInput
    data: XOR<controledeMaquinasPendentesOroUpdateWithoutEquipamentoInput, controledeMaquinasPendentesOroUncheckedUpdateWithoutEquipamentoInput>
  }

  export type controledeMaquinasPendentesOroUpdateManyWithWhereWithoutEquipamentoInput = {
    where: controledeMaquinasPendentesOroScalarWhereInput
    data: XOR<controledeMaquinasPendentesOroUpdateManyMutationInput, controledeMaquinasPendentesOroUncheckedUpdateManyWithoutEquipamentoInput>
  }

  export type EquipamentoCreateWithoutControlesDeAssistenciaInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoUncheckedCreateWithoutControlesDeAssistenciaInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoCreateOrConnectWithoutControlesDeAssistenciaInput = {
    where: EquipamentoWhereUniqueInput
    create: XOR<EquipamentoCreateWithoutControlesDeAssistenciaInput, EquipamentoUncheckedCreateWithoutControlesDeAssistenciaInput>
  }

  export type statusReparoCreateWithoutControleDeAssistenciaTecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusReparoUncheckedCreateWithoutControleDeAssistenciaTecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusReparoCreateOrConnectWithoutControleDeAssistenciaTecnicaInput = {
    where: statusReparoWhereUniqueInput
    create: XOR<statusReparoCreateWithoutControleDeAssistenciaTecnicaInput, statusReparoUncheckedCreateWithoutControleDeAssistenciaTecnicaInput>
  }

  export type StatusTesteCreateWithoutControleDeAssistenciaTecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type StatusTesteUncheckedCreateWithoutControleDeAssistenciaTecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type StatusTesteCreateOrConnectWithoutControleDeAssistenciaTecnicaInput = {
    where: StatusTesteWhereUniqueInput
    create: XOR<StatusTesteCreateWithoutControleDeAssistenciaTecnicaInput, StatusTesteUncheckedCreateWithoutControleDeAssistenciaTecnicaInput>
  }

  export type InstituicaoUnidadeCreateWithoutControlesdeAssistenciaTecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeUncheckedCreateWithoutControlesdeAssistenciaTecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeCreateOrConnectWithoutControlesdeAssistenciaTecnicaInput = {
    where: InstituicaoUnidadeWhereUniqueInput
    create: XOR<InstituicaoUnidadeCreateWithoutControlesdeAssistenciaTecnicaInput, InstituicaoUnidadeUncheckedCreateWithoutControlesdeAssistenciaTecnicaInput>
  }

  export type TecnicoCreateWithoutControlesdeAssistenciatecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoCreateNestedManyWithoutTecnicoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutTecnicoInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoUncheckedCreateWithoutControlesdeAssistenciatecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutTecnicoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutTecnicoInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoCreateOrConnectWithoutControlesdeAssistenciatecnicaInput = {
    where: TecnicoWhereUniqueInput
    create: XOR<TecnicoCreateWithoutControlesdeAssistenciatecnicaInput, TecnicoUncheckedCreateWithoutControlesdeAssistenciatecnicaInput>
  }

  export type ClienteCreateWithoutControlesdeAssistenciatecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutClienteInput
    ordensDeServico?: OrdemdeServicoCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutControlesdeAssistenciatecnicaInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutClienteInput
    ordensDeServico?: OrdemdeServicoUncheckedCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutControlesdeAssistenciatecnicaInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutControlesdeAssistenciatecnicaInput, ClienteUncheckedCreateWithoutControlesdeAssistenciatecnicaInput>
  }

  export type EquipamentoUpsertWithoutControlesDeAssistenciaInput = {
    update: XOR<EquipamentoUpdateWithoutControlesDeAssistenciaInput, EquipamentoUncheckedUpdateWithoutControlesDeAssistenciaInput>
    create: XOR<EquipamentoCreateWithoutControlesDeAssistenciaInput, EquipamentoUncheckedCreateWithoutControlesDeAssistenciaInput>
    where?: EquipamentoWhereInput
  }

  export type EquipamentoUpdateToOneWithWhereWithoutControlesDeAssistenciaInput = {
    where?: EquipamentoWhereInput
    data: XOR<EquipamentoUpdateWithoutControlesDeAssistenciaInput, EquipamentoUncheckedUpdateWithoutControlesDeAssistenciaInput>
  }

  export type EquipamentoUpdateWithoutControlesDeAssistenciaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutEquipamentoNestedInput
  }

  export type EquipamentoUncheckedUpdateWithoutControlesDeAssistenciaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutEquipamentoNestedInput
  }

  export type statusReparoUpsertWithoutControleDeAssistenciaTecnicaInput = {
    update: XOR<statusReparoUpdateWithoutControleDeAssistenciaTecnicaInput, statusReparoUncheckedUpdateWithoutControleDeAssistenciaTecnicaInput>
    create: XOR<statusReparoCreateWithoutControleDeAssistenciaTecnicaInput, statusReparoUncheckedCreateWithoutControleDeAssistenciaTecnicaInput>
    where?: statusReparoWhereInput
  }

  export type statusReparoUpdateToOneWithWhereWithoutControleDeAssistenciaTecnicaInput = {
    where?: statusReparoWhereInput
    data: XOR<statusReparoUpdateWithoutControleDeAssistenciaTecnicaInput, statusReparoUncheckedUpdateWithoutControleDeAssistenciaTecnicaInput>
  }

  export type statusReparoUpdateWithoutControleDeAssistenciaTecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusReparoUncheckedUpdateWithoutControleDeAssistenciaTecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StatusTesteUpsertWithoutControleDeAssistenciaTecnicaInput = {
    update: XOR<StatusTesteUpdateWithoutControleDeAssistenciaTecnicaInput, StatusTesteUncheckedUpdateWithoutControleDeAssistenciaTecnicaInput>
    create: XOR<StatusTesteCreateWithoutControleDeAssistenciaTecnicaInput, StatusTesteUncheckedCreateWithoutControleDeAssistenciaTecnicaInput>
    where?: StatusTesteWhereInput
  }

  export type StatusTesteUpdateToOneWithWhereWithoutControleDeAssistenciaTecnicaInput = {
    where?: StatusTesteWhereInput
    data: XOR<StatusTesteUpdateWithoutControleDeAssistenciaTecnicaInput, StatusTesteUncheckedUpdateWithoutControleDeAssistenciaTecnicaInput>
  }

  export type StatusTesteUpdateWithoutControleDeAssistenciaTecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StatusTesteUncheckedUpdateWithoutControleDeAssistenciaTecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InstituicaoUnidadeUpsertWithoutControlesdeAssistenciaTecnicaInput = {
    update: XOR<InstituicaoUnidadeUpdateWithoutControlesdeAssistenciaTecnicaInput, InstituicaoUnidadeUncheckedUpdateWithoutControlesdeAssistenciaTecnicaInput>
    create: XOR<InstituicaoUnidadeCreateWithoutControlesdeAssistenciaTecnicaInput, InstituicaoUnidadeUncheckedCreateWithoutControlesdeAssistenciaTecnicaInput>
    where?: InstituicaoUnidadeWhereInput
  }

  export type InstituicaoUnidadeUpdateToOneWithWhereWithoutControlesdeAssistenciaTecnicaInput = {
    where?: InstituicaoUnidadeWhereInput
    data: XOR<InstituicaoUnidadeUpdateWithoutControlesdeAssistenciaTecnicaInput, InstituicaoUnidadeUncheckedUpdateWithoutControlesdeAssistenciaTecnicaInput>
  }

  export type InstituicaoUnidadeUpdateWithoutControlesdeAssistenciaTecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUnidadeUncheckedUpdateWithoutControlesdeAssistenciaTecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type TecnicoUpsertWithoutControlesdeAssistenciatecnicaInput = {
    update: XOR<TecnicoUpdateWithoutControlesdeAssistenciatecnicaInput, TecnicoUncheckedUpdateWithoutControlesdeAssistenciatecnicaInput>
    create: XOR<TecnicoCreateWithoutControlesdeAssistenciatecnicaInput, TecnicoUncheckedCreateWithoutControlesdeAssistenciatecnicaInput>
    where?: TecnicoWhereInput
  }

  export type TecnicoUpdateToOneWithWhereWithoutControlesdeAssistenciatecnicaInput = {
    where?: TecnicoWhereInput
    data: XOR<TecnicoUpdateWithoutControlesdeAssistenciatecnicaInput, TecnicoUncheckedUpdateWithoutControlesdeAssistenciatecnicaInput>
  }

  export type TecnicoUpdateWithoutControlesdeAssistenciatecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUpdateManyWithoutTecnicoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutTecnicoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutTecnicoNestedInput
  }

  export type TecnicoUncheckedUpdateWithoutControlesdeAssistenciatecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutTecnicoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutTecnicoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput
  }

  export type ClienteUpsertWithoutControlesdeAssistenciatecnicaInput = {
    update: XOR<ClienteUpdateWithoutControlesdeAssistenciatecnicaInput, ClienteUncheckedUpdateWithoutControlesdeAssistenciatecnicaInput>
    create: XOR<ClienteCreateWithoutControlesdeAssistenciatecnicaInput, ClienteUncheckedCreateWithoutControlesdeAssistenciatecnicaInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutControlesdeAssistenciatecnicaInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutControlesdeAssistenciatecnicaInput, ClienteUncheckedUpdateWithoutControlesdeAssistenciatecnicaInput>
  }

  export type ClienteUpdateWithoutControlesdeAssistenciatecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutClienteNestedInput
    ordensDeServico?: OrdemdeServicoUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutControlesdeAssistenciatecnicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutClienteNestedInput
    ordensDeServico?: OrdemdeServicoUncheckedUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeAssistenciaInput
    statusTeste: StatusTesteCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesdeAssistenciaTecnicaInput
    tecnico: TecnicoCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
    cliente?: ClienteCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusReparoInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput>
  }

  export type controleDeAssistenciaTecnicaCreateManyStatusReparoInputEnvelope = {
    data: controleDeAssistenciaTecnicaCreateManyStatusReparoInput | controleDeAssistenciaTecnicaCreateManyStatusReparoInput[]
    skipDuplicates?: boolean
  }

  export type controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusReparoInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    update: XOR<controleDeAssistenciaTecnicaUpdateWithoutStatusReparoInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutStatusReparoInput>
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusReparoInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusReparoInput>
  }

  export type controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusReparoInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    data: XOR<controleDeAssistenciaTecnicaUpdateWithoutStatusReparoInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutStatusReparoInput>
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusReparoInput = {
    where: controleDeAssistenciaTecnicaScalarWhereInput
    data: XOR<controleDeAssistenciaTecnicaUpdateManyMutationInput, controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutStatusReparoInput>
  }

  export type controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeAssistenciaInput
    statusReparo: statusReparoCreateNestedOneWithoutControleDeAssistenciaTecnicaInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesdeAssistenciaTecnicaInput
    tecnico: TecnicoCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
    cliente?: ClienteCreateNestedOneWithoutControlesdeAssistenciatecnicaInput
  }

  export type controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaCreateOrConnectWithoutStatusTesteInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput>
  }

  export type controleDeAssistenciaTecnicaCreateManyStatusTesteInputEnvelope = {
    data: controleDeAssistenciaTecnicaCreateManyStatusTesteInput | controleDeAssistenciaTecnicaCreateManyStatusTesteInput[]
    skipDuplicates?: boolean
  }

  export type controleDeAssistenciaTecnicaUpsertWithWhereUniqueWithoutStatusTesteInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    update: XOR<controleDeAssistenciaTecnicaUpdateWithoutStatusTesteInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutStatusTesteInput>
    create: XOR<controleDeAssistenciaTecnicaCreateWithoutStatusTesteInput, controleDeAssistenciaTecnicaUncheckedCreateWithoutStatusTesteInput>
  }

  export type controleDeAssistenciaTecnicaUpdateWithWhereUniqueWithoutStatusTesteInput = {
    where: controleDeAssistenciaTecnicaWhereUniqueInput
    data: XOR<controleDeAssistenciaTecnicaUpdateWithoutStatusTesteInput, controleDeAssistenciaTecnicaUncheckedUpdateWithoutStatusTesteInput>
  }

  export type controleDeAssistenciaTecnicaUpdateManyWithWhereWithoutStatusTesteInput = {
    where: controleDeAssistenciaTecnicaScalarWhereInput
    data: XOR<controleDeAssistenciaTecnicaUpdateManyMutationInput, controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutStatusTesteInput>
  }

  export type InstituicaoUnidadeCreateWithoutControlesdeLaudoTecnicoInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeUncheckedCreateWithoutControlesdeLaudoTecnicoInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeCreateOrConnectWithoutControlesdeLaudoTecnicoInput = {
    where: InstituicaoUnidadeWhereUniqueInput
    create: XOR<InstituicaoUnidadeCreateWithoutControlesdeLaudoTecnicoInput, InstituicaoUnidadeUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
  }

  export type EquipamentoCreateWithoutControlesdeLaudoTecnicoInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoUncheckedCreateWithoutControlesdeLaudoTecnicoInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoCreateOrConnectWithoutControlesdeLaudoTecnicoInput = {
    where: EquipamentoWhereUniqueInput
    create: XOR<EquipamentoCreateWithoutControlesdeLaudoTecnicoInput, EquipamentoUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
  }

  export type TecnicoCreateWithoutControlesdeLaudoTecnicoInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoCreateNestedManyWithoutTecnicoInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutTecnicoInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoUncheckedCreateWithoutControlesdeLaudoTecnicoInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutTecnicoInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutTecnicoInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoCreateOrConnectWithoutControlesdeLaudoTecnicoInput = {
    where: TecnicoWhereUniqueInput
    create: XOR<TecnicoCreateWithoutControlesdeLaudoTecnicoInput, TecnicoUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
  }

  export type InstituicaoUnidadeUpsertWithoutControlesdeLaudoTecnicoInput = {
    update: XOR<InstituicaoUnidadeUpdateWithoutControlesdeLaudoTecnicoInput, InstituicaoUnidadeUncheckedUpdateWithoutControlesdeLaudoTecnicoInput>
    create: XOR<InstituicaoUnidadeCreateWithoutControlesdeLaudoTecnicoInput, InstituicaoUnidadeUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
    where?: InstituicaoUnidadeWhereInput
  }

  export type InstituicaoUnidadeUpdateToOneWithWhereWithoutControlesdeLaudoTecnicoInput = {
    where?: InstituicaoUnidadeWhereInput
    data: XOR<InstituicaoUnidadeUpdateWithoutControlesdeLaudoTecnicoInput, InstituicaoUnidadeUncheckedUpdateWithoutControlesdeLaudoTecnicoInput>
  }

  export type InstituicaoUnidadeUpdateWithoutControlesdeLaudoTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUnidadeUncheckedUpdateWithoutControlesdeLaudoTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type EquipamentoUpsertWithoutControlesdeLaudoTecnicoInput = {
    update: XOR<EquipamentoUpdateWithoutControlesdeLaudoTecnicoInput, EquipamentoUncheckedUpdateWithoutControlesdeLaudoTecnicoInput>
    create: XOR<EquipamentoCreateWithoutControlesdeLaudoTecnicoInput, EquipamentoUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
    where?: EquipamentoWhereInput
  }

  export type EquipamentoUpdateToOneWithWhereWithoutControlesdeLaudoTecnicoInput = {
    where?: EquipamentoWhereInput
    data: XOR<EquipamentoUpdateWithoutControlesdeLaudoTecnicoInput, EquipamentoUncheckedUpdateWithoutControlesdeLaudoTecnicoInput>
  }

  export type EquipamentoUpdateWithoutControlesdeLaudoTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutEquipamentoNestedInput
  }

  export type EquipamentoUncheckedUpdateWithoutControlesdeLaudoTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutEquipamentoNestedInput
  }

  export type TecnicoUpsertWithoutControlesdeLaudoTecnicoInput = {
    update: XOR<TecnicoUpdateWithoutControlesdeLaudoTecnicoInput, TecnicoUncheckedUpdateWithoutControlesdeLaudoTecnicoInput>
    create: XOR<TecnicoCreateWithoutControlesdeLaudoTecnicoInput, TecnicoUncheckedCreateWithoutControlesdeLaudoTecnicoInput>
    where?: TecnicoWhereInput
  }

  export type TecnicoUpdateToOneWithWhereWithoutControlesdeLaudoTecnicoInput = {
    where?: TecnicoWhereInput
    data: XOR<TecnicoUpdateWithoutControlesdeLaudoTecnicoInput, TecnicoUncheckedUpdateWithoutControlesdeLaudoTecnicoInput>
  }

  export type TecnicoUpdateWithoutControlesdeLaudoTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUpdateManyWithoutTecnicoNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutTecnicoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutTecnicoNestedInput
  }

  export type TecnicoUncheckedUpdateWithoutControlesdeLaudoTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutTecnicoNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput
  }

  export type statusControledeLaboratorioCreateWithoutControlesDeLaboratioInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusControledeLaboratorioUncheckedCreateWithoutControlesDeLaboratioInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusControledeLaboratorioCreateOrConnectWithoutControlesDeLaboratioInput = {
    where: statusControledeLaboratorioWhereUniqueInput
    create: XOR<statusControledeLaboratorioCreateWithoutControlesDeLaboratioInput, statusControledeLaboratorioUncheckedCreateWithoutControlesDeLaboratioInput>
  }

  export type InstituicaoUnidadeCreateWithoutControlesDeLaboratioInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeUncheckedCreateWithoutControlesDeLaboratioInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeCreateOrConnectWithoutControlesDeLaboratioInput = {
    where: InstituicaoUnidadeWhereUniqueInput
    create: XOR<InstituicaoUnidadeCreateWithoutControlesDeLaboratioInput, InstituicaoUnidadeUncheckedCreateWithoutControlesDeLaboratioInput>
  }

  export type ClienteCreateWithoutControlesDeLaboratioInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutClienteInput
    ordensDeServico?: OrdemdeServicoCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutControlesDeLaboratioInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutClienteInput
    ordensDeServico?: OrdemdeServicoUncheckedCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutClienteInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutControlesDeLaboratioInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutControlesDeLaboratioInput, ClienteUncheckedCreateWithoutControlesDeLaboratioInput>
  }

  export type EquipamentoCreateWithoutControlesDeLaboratioInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaCreateNestedManyWithoutEquipamentoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoUncheckedCreateWithoutControlesDeLaboratioInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoCreateOrConnectWithoutControlesDeLaboratioInput = {
    where: EquipamentoWhereUniqueInput
    create: XOR<EquipamentoCreateWithoutControlesDeLaboratioInput, EquipamentoUncheckedCreateWithoutControlesDeLaboratioInput>
  }

  export type statusControledeLaboratorioUpsertWithoutControlesDeLaboratioInput = {
    update: XOR<statusControledeLaboratorioUpdateWithoutControlesDeLaboratioInput, statusControledeLaboratorioUncheckedUpdateWithoutControlesDeLaboratioInput>
    create: XOR<statusControledeLaboratorioCreateWithoutControlesDeLaboratioInput, statusControledeLaboratorioUncheckedCreateWithoutControlesDeLaboratioInput>
    where?: statusControledeLaboratorioWhereInput
  }

  export type statusControledeLaboratorioUpdateToOneWithWhereWithoutControlesDeLaboratioInput = {
    where?: statusControledeLaboratorioWhereInput
    data: XOR<statusControledeLaboratorioUpdateWithoutControlesDeLaboratioInput, statusControledeLaboratorioUncheckedUpdateWithoutControlesDeLaboratioInput>
  }

  export type statusControledeLaboratorioUpdateWithoutControlesDeLaboratioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusControledeLaboratorioUncheckedUpdateWithoutControlesDeLaboratioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InstituicaoUnidadeUpsertWithoutControlesDeLaboratioInput = {
    update: XOR<InstituicaoUnidadeUpdateWithoutControlesDeLaboratioInput, InstituicaoUnidadeUncheckedUpdateWithoutControlesDeLaboratioInput>
    create: XOR<InstituicaoUnidadeCreateWithoutControlesDeLaboratioInput, InstituicaoUnidadeUncheckedCreateWithoutControlesDeLaboratioInput>
    where?: InstituicaoUnidadeWhereInput
  }

  export type InstituicaoUnidadeUpdateToOneWithWhereWithoutControlesDeLaboratioInput = {
    where?: InstituicaoUnidadeWhereInput
    data: XOR<InstituicaoUnidadeUpdateWithoutControlesDeLaboratioInput, InstituicaoUnidadeUncheckedUpdateWithoutControlesDeLaboratioInput>
  }

  export type InstituicaoUnidadeUpdateWithoutControlesDeLaboratioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUnidadeUncheckedUpdateWithoutControlesDeLaboratioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type ClienteUpsertWithoutControlesDeLaboratioInput = {
    update: XOR<ClienteUpdateWithoutControlesDeLaboratioInput, ClienteUncheckedUpdateWithoutControlesDeLaboratioInput>
    create: XOR<ClienteCreateWithoutControlesDeLaboratioInput, ClienteUncheckedCreateWithoutControlesDeLaboratioInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutControlesDeLaboratioInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutControlesDeLaboratioInput, ClienteUncheckedUpdateWithoutControlesDeLaboratioInput>
  }

  export type ClienteUpdateWithoutControlesDeLaboratioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutClienteNestedInput
    ordensDeServico?: OrdemdeServicoUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutControlesDeLaboratioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutClienteNestedInput
    ordensDeServico?: OrdemdeServicoUncheckedUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutClienteNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type EquipamentoUpsertWithoutControlesDeLaboratioInput = {
    update: XOR<EquipamentoUpdateWithoutControlesDeLaboratioInput, EquipamentoUncheckedUpdateWithoutControlesDeLaboratioInput>
    create: XOR<EquipamentoCreateWithoutControlesDeLaboratioInput, EquipamentoUncheckedCreateWithoutControlesDeLaboratioInput>
    where?: EquipamentoWhereInput
  }

  export type EquipamentoUpdateToOneWithWhereWithoutControlesDeLaboratioInput = {
    where?: EquipamentoWhereInput
    data: XOR<EquipamentoUpdateWithoutControlesDeLaboratioInput, EquipamentoUncheckedUpdateWithoutControlesDeLaboratioInput>
  }

  export type EquipamentoUpdateWithoutControlesDeLaboratioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUpdateManyWithoutEquipamentoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutEquipamentoNestedInput
  }

  export type EquipamentoUncheckedUpdateWithoutControlesDeLaboratioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutEquipamentoNestedInput
  }

  export type controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    instituicao?: InstituicaoUnidadeCreateNestedOneWithoutControlesDeLaboratioInput
    cliente?: ClienteCreateNestedOneWithoutControlesDeLaboratioInput
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeLaboratioInput
  }

  export type controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    instituicao_id: string
    cliente_id: string
    equipamento_id: string
  }

  export type controleDeLaboratioCreateOrConnectWithoutStatusControledeLaboratorioInput = {
    where: controleDeLaboratioWhereUniqueInput
    create: XOR<controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput, controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput>
  }

  export type controleDeLaboratioCreateManyStatusControledeLaboratorioInputEnvelope = {
    data: controleDeLaboratioCreateManyStatusControledeLaboratorioInput | controleDeLaboratioCreateManyStatusControledeLaboratorioInput[]
    skipDuplicates?: boolean
  }

  export type controleDeLaboratioUpsertWithWhereUniqueWithoutStatusControledeLaboratorioInput = {
    where: controleDeLaboratioWhereUniqueInput
    update: XOR<controleDeLaboratioUpdateWithoutStatusControledeLaboratorioInput, controleDeLaboratioUncheckedUpdateWithoutStatusControledeLaboratorioInput>
    create: XOR<controleDeLaboratioCreateWithoutStatusControledeLaboratorioInput, controleDeLaboratioUncheckedCreateWithoutStatusControledeLaboratorioInput>
  }

  export type controleDeLaboratioUpdateWithWhereUniqueWithoutStatusControledeLaboratorioInput = {
    where: controleDeLaboratioWhereUniqueInput
    data: XOR<controleDeLaboratioUpdateWithoutStatusControledeLaboratorioInput, controleDeLaboratioUncheckedUpdateWithoutStatusControledeLaboratorioInput>
  }

  export type controleDeLaboratioUpdateManyWithWhereWithoutStatusControledeLaboratorioInput = {
    where: controleDeLaboratioScalarWhereInput
    data: XOR<controleDeLaboratioUpdateManyMutationInput, controleDeLaboratioUncheckedUpdateManyWithoutStatusControledeLaboratorioInput>
  }

  export type EquipamentoCreateWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaCreateNestedManyWithoutEquipamentoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoCreateOrConnectWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    where: EquipamentoWhereUniqueInput
    create: XOR<EquipamentoCreateWithoutControlesDeMaquinasPendentesLaboratorioInput, EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput>
  }

  export type statusMaquinasPendentesLabCreateWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusMaquinasPendentesLabUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusMaquinasPendentesLabCreateOrConnectWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    where: statusMaquinasPendentesLabWhereUniqueInput
    create: XOR<statusMaquinasPendentesLabCreateWithoutControlesDeMaquinasPendentesLaboratorioInput, statusMaquinasPendentesLabUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput>
  }

  export type EquipamentoUpsertWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    update: XOR<EquipamentoUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput, EquipamentoUncheckedUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput>
    create: XOR<EquipamentoCreateWithoutControlesDeMaquinasPendentesLaboratorioInput, EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput>
    where?: EquipamentoWhereInput
  }

  export type EquipamentoUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    where?: EquipamentoWhereInput
    data: XOR<EquipamentoUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput, EquipamentoUncheckedUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput>
  }

  export type EquipamentoUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUpdateManyWithoutEquipamentoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutEquipamentoNestedInput
  }

  export type EquipamentoUncheckedUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutEquipamentoNestedInput
  }

  export type statusMaquinasPendentesLabUpsertWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    update: XOR<statusMaquinasPendentesLabUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput, statusMaquinasPendentesLabUncheckedUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput>
    create: XOR<statusMaquinasPendentesLabCreateWithoutControlesDeMaquinasPendentesLaboratorioInput, statusMaquinasPendentesLabUncheckedCreateWithoutControlesDeMaquinasPendentesLaboratorioInput>
    where?: statusMaquinasPendentesLabWhereInput
  }

  export type statusMaquinasPendentesLabUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    where?: statusMaquinasPendentesLabWhereInput
    data: XOR<statusMaquinasPendentesLabUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput, statusMaquinasPendentesLabUncheckedUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput>
  }

  export type statusMaquinasPendentesLabUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusMaquinasPendentesLabUncheckedUpdateWithoutControlesDeMaquinasPendentesLaboratorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput = {
    id?: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeMaquinasPendentesLaboratorioInput
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput = {
    id?: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
  }

  export type controleDeMaquinasPendentesLaboratorioCreateOrConnectWithoutStatusMaquinasPendentesLabInput = {
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    create: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput>
  }

  export type controleDeMaquinasPendentesLaboratorioCreateManyStatusMaquinasPendentesLabInputEnvelope = {
    data: controleDeMaquinasPendentesLaboratorioCreateManyStatusMaquinasPendentesLabInput | controleDeMaquinasPendentesLaboratorioCreateManyStatusMaquinasPendentesLabInput[]
    skipDuplicates?: boolean
  }

  export type controleDeMaquinasPendentesLaboratorioUpsertWithWhereUniqueWithoutStatusMaquinasPendentesLabInput = {
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    update: XOR<controleDeMaquinasPendentesLaboratorioUpdateWithoutStatusMaquinasPendentesLabInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateWithoutStatusMaquinasPendentesLabInput>
    create: XOR<controleDeMaquinasPendentesLaboratorioCreateWithoutStatusMaquinasPendentesLabInput, controleDeMaquinasPendentesLaboratorioUncheckedCreateWithoutStatusMaquinasPendentesLabInput>
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateWithWhereUniqueWithoutStatusMaquinasPendentesLabInput = {
    where: controleDeMaquinasPendentesLaboratorioWhereUniqueInput
    data: XOR<controleDeMaquinasPendentesLaboratorioUpdateWithoutStatusMaquinasPendentesLabInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateWithoutStatusMaquinasPendentesLabInput>
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateManyWithWhereWithoutStatusMaquinasPendentesLabInput = {
    where: controleDeMaquinasPendentesLaboratorioScalarWhereInput
    data: XOR<controleDeMaquinasPendentesLaboratorioUpdateManyMutationInput, controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutStatusMaquinasPendentesLabInput>
  }

  export type EquipamentoCreateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaCreateNestedManyWithoutEquipamentoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: string
    name: string
    patrimonio: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutEquipamentoInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedCreateNestedManyWithoutEquipamentoInput
  }

  export type EquipamentoCreateOrConnectWithoutControlesDeMaquinasPendentesOroInput = {
    where: EquipamentoWhereUniqueInput
    create: XOR<EquipamentoCreateWithoutControlesDeMaquinasPendentesOroInput, EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
  }

  export type InstituicaoUnidadeCreateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutInstituicaoInput
    documentacoesTecnicas?: documentacaoTecnicaCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutInstituicaoInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUnidadeCreateOrConnectWithoutControlesDeMaquinasPendentesOroInput = {
    where: InstituicaoUnidadeWhereUniqueInput
    create: XOR<InstituicaoUnidadeCreateWithoutControlesDeMaquinasPendentesOroInput, InstituicaoUnidadeUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
  }

  export type statusMaquinasPendentesOroCreateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusMaquinasPendentesOroUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusMaquinasPendentesOroCreateOrConnectWithoutControlesDeMaquinasPendentesOroInput = {
    where: statusMaquinasPendentesOroWhereUniqueInput
    create: XOR<statusMaquinasPendentesOroCreateWithoutControlesDeMaquinasPendentesOroInput, statusMaquinasPendentesOroUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
  }

  export type EquipamentoUpsertWithoutControlesDeMaquinasPendentesOroInput = {
    update: XOR<EquipamentoUpdateWithoutControlesDeMaquinasPendentesOroInput, EquipamentoUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput>
    create: XOR<EquipamentoCreateWithoutControlesDeMaquinasPendentesOroInput, EquipamentoUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
    where?: EquipamentoWhereInput
  }

  export type EquipamentoUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesOroInput = {
    where?: EquipamentoWhereInput
    data: XOR<EquipamentoUpdateWithoutControlesDeMaquinasPendentesOroInput, EquipamentoUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput>
  }

  export type EquipamentoUpdateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUpdateManyWithoutEquipamentoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUpdateManyWithoutEquipamentoNestedInput
  }

  export type EquipamentoUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patrimonio?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    controlesDeAssistencia?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutEquipamentoNestedInput
    controlesDeMaquinasPendentesLaboratorio?: controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutEquipamentoNestedInput
  }

  export type InstituicaoUnidadeUpsertWithoutControlesDeMaquinasPendentesOroInput = {
    update: XOR<InstituicaoUnidadeUpdateWithoutControlesDeMaquinasPendentesOroInput, InstituicaoUnidadeUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput>
    create: XOR<InstituicaoUnidadeCreateWithoutControlesDeMaquinasPendentesOroInput, InstituicaoUnidadeUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
    where?: InstituicaoUnidadeWhereInput
  }

  export type InstituicaoUnidadeUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesOroInput = {
    where?: InstituicaoUnidadeWhereInput
    data: XOR<InstituicaoUnidadeUpdateWithoutControlesDeMaquinasPendentesOroInput, InstituicaoUnidadeUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput>
  }

  export type InstituicaoUnidadeUpdateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutInstituicaoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUnidadeUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoNestedInput
    documentacoesTecnicas?: documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type statusMaquinasPendentesOroUpsertWithoutControlesDeMaquinasPendentesOroInput = {
    update: XOR<statusMaquinasPendentesOroUpdateWithoutControlesDeMaquinasPendentesOroInput, statusMaquinasPendentesOroUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput>
    create: XOR<statusMaquinasPendentesOroCreateWithoutControlesDeMaquinasPendentesOroInput, statusMaquinasPendentesOroUncheckedCreateWithoutControlesDeMaquinasPendentesOroInput>
    where?: statusMaquinasPendentesOroWhereInput
  }

  export type statusMaquinasPendentesOroUpdateToOneWithWhereWithoutControlesDeMaquinasPendentesOroInput = {
    where?: statusMaquinasPendentesOroWhereInput
    data: XOR<statusMaquinasPendentesOroUpdateWithoutControlesDeMaquinasPendentesOroInput, statusMaquinasPendentesOroUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput>
  }

  export type statusMaquinasPendentesOroUpdateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusMaquinasPendentesOroUncheckedUpdateWithoutControlesDeMaquinasPendentesOroInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento: EquipamentoCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput
    instituicaoUnidade: InstituicaoUnidadeCreateNestedOneWithoutControlesDeMaquinasPendentesOroInput
  }

  export type controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
    instituicaoUnidade_id: string
  }

  export type controledeMaquinasPendentesOroCreateOrConnectWithoutStatusMaquinasPendentesOroInput = {
    where: controledeMaquinasPendentesOroWhereUniqueInput
    create: XOR<controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput, controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput>
  }

  export type controledeMaquinasPendentesOroCreateManyStatusMaquinasPendentesOroInputEnvelope = {
    data: controledeMaquinasPendentesOroCreateManyStatusMaquinasPendentesOroInput | controledeMaquinasPendentesOroCreateManyStatusMaquinasPendentesOroInput[]
    skipDuplicates?: boolean
  }

  export type controledeMaquinasPendentesOroUpsertWithWhereUniqueWithoutStatusMaquinasPendentesOroInput = {
    where: controledeMaquinasPendentesOroWhereUniqueInput
    update: XOR<controledeMaquinasPendentesOroUpdateWithoutStatusMaquinasPendentesOroInput, controledeMaquinasPendentesOroUncheckedUpdateWithoutStatusMaquinasPendentesOroInput>
    create: XOR<controledeMaquinasPendentesOroCreateWithoutStatusMaquinasPendentesOroInput, controledeMaquinasPendentesOroUncheckedCreateWithoutStatusMaquinasPendentesOroInput>
  }

  export type controledeMaquinasPendentesOroUpdateWithWhereUniqueWithoutStatusMaquinasPendentesOroInput = {
    where: controledeMaquinasPendentesOroWhereUniqueInput
    data: XOR<controledeMaquinasPendentesOroUpdateWithoutStatusMaquinasPendentesOroInput, controledeMaquinasPendentesOroUncheckedUpdateWithoutStatusMaquinasPendentesOroInput>
  }

  export type controledeMaquinasPendentesOroUpdateManyWithWhereWithoutStatusMaquinasPendentesOroInput = {
    where: controledeMaquinasPendentesOroScalarWhereInput
    data: XOR<controledeMaquinasPendentesOroUpdateManyMutationInput, controledeMaquinasPendentesOroUncheckedUpdateManyWithoutStatusMaquinasPendentesOroInput>
  }

  export type ClienteCreateWithoutDocumentacoesTecnicasInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutClienteInput
    ordensDeServico?: OrdemdeServicoCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutDocumentacoesTecnicasInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutClienteInput
    ordensDeServico?: OrdemdeServicoUncheckedCreateNestedManyWithoutClienteInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutClienteInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutDocumentacoesTecnicasInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutDocumentacoesTecnicasInput, ClienteUncheckedCreateWithoutDocumentacoesTecnicasInput>
  }

  export type TecnicoCreateWithoutDocumentacoesTecnicasInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoCreateNestedManyWithoutTecnicoInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutTecnicoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoUncheckedCreateWithoutDocumentacoesTecnicasInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutTecnicoInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutTecnicoInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutTecnicoInput
  }

  export type TecnicoCreateOrConnectWithoutDocumentacoesTecnicasInput = {
    where: TecnicoWhereUniqueInput
    create: XOR<TecnicoCreateWithoutDocumentacoesTecnicasInput, TecnicoUncheckedCreateWithoutDocumentacoesTecnicasInput>
  }

  export type InstituicaoUnidadeCreateWithoutDocumentacoesTecnicasInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroCreateNestedManyWithoutInstituicaoUnidadeInput
  }

  export type InstituicaoUnidadeUncheckedCreateWithoutDocumentacoesTecnicasInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutInstituicaoInput
    ordens?: OrdemdeServicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedCreateNestedManyWithoutInstituicaoInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedCreateNestedManyWithoutInstituicaoUnidadeInput
  }

  export type InstituicaoUnidadeCreateOrConnectWithoutDocumentacoesTecnicasInput = {
    where: InstituicaoUnidadeWhereUniqueInput
    create: XOR<InstituicaoUnidadeCreateWithoutDocumentacoesTecnicasInput, InstituicaoUnidadeUncheckedCreateWithoutDocumentacoesTecnicasInput>
  }

  export type ClienteUpsertWithoutDocumentacoesTecnicasInput = {
    update: XOR<ClienteUpdateWithoutDocumentacoesTecnicasInput, ClienteUncheckedUpdateWithoutDocumentacoesTecnicasInput>
    create: XOR<ClienteCreateWithoutDocumentacoesTecnicasInput, ClienteUncheckedCreateWithoutDocumentacoesTecnicasInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutDocumentacoesTecnicasInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutDocumentacoesTecnicasInput, ClienteUncheckedUpdateWithoutDocumentacoesTecnicasInput>
  }

  export type ClienteUpdateWithoutDocumentacoesTecnicasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutClienteNestedInput
    ordensDeServico?: OrdemdeServicoUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutDocumentacoesTecnicasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutClienteNestedInput
    ordensDeServico?: OrdemdeServicoUncheckedUpdateManyWithoutClienteNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutClienteNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type TecnicoUpsertWithoutDocumentacoesTecnicasInput = {
    update: XOR<TecnicoUpdateWithoutDocumentacoesTecnicasInput, TecnicoUncheckedUpdateWithoutDocumentacoesTecnicasInput>
    create: XOR<TecnicoCreateWithoutDocumentacoesTecnicasInput, TecnicoUncheckedCreateWithoutDocumentacoesTecnicasInput>
    where?: TecnicoWhereInput
  }

  export type TecnicoUpdateToOneWithWhereWithoutDocumentacoesTecnicasInput = {
    where?: TecnicoWhereInput
    data: XOR<TecnicoUpdateWithoutDocumentacoesTecnicasInput, TecnicoUncheckedUpdateWithoutDocumentacoesTecnicasInput>
  }

  export type TecnicoUpdateWithoutDocumentacoesTecnicasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUpdateManyWithoutTecnicoNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutTecnicoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutTecnicoNestedInput
  }

  export type TecnicoUncheckedUpdateWithoutDocumentacoesTecnicasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutTecnicoNestedInput
    controlesdeAssistenciatecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutTecnicoNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutTecnicoNestedInput
  }

  export type InstituicaoUnidadeUpsertWithoutDocumentacoesTecnicasInput = {
    update: XOR<InstituicaoUnidadeUpdateWithoutDocumentacoesTecnicasInput, InstituicaoUnidadeUncheckedUpdateWithoutDocumentacoesTecnicasInput>
    create: XOR<InstituicaoUnidadeCreateWithoutDocumentacoesTecnicasInput, InstituicaoUnidadeUncheckedCreateWithoutDocumentacoesTecnicasInput>
    where?: InstituicaoUnidadeWhereInput
  }

  export type InstituicaoUnidadeUpdateToOneWithWhereWithoutDocumentacoesTecnicasInput = {
    where?: InstituicaoUnidadeWhereInput
    data: XOR<InstituicaoUnidadeUpdateWithoutDocumentacoesTecnicasInput, InstituicaoUnidadeUncheckedUpdateWithoutDocumentacoesTecnicasInput>
  }

  export type InstituicaoUnidadeUpdateWithoutDocumentacoesTecnicasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUpdateManyWithoutInstituicaoUnidadeNestedInput
  }

  export type InstituicaoUnidadeUncheckedUpdateWithoutDocumentacoesTecnicasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutInstituicaoNestedInput
    ordens?: OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeAssistenciaTecnica?: controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesdeLaudoTecnico?: controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
    controlesDeLaboratio?: controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoNestedInput
    controlesDeMaquinasPendentesOro?: controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeNestedInput
  }

  export type statusComprasCreateWithoutSolicitacoesDeComprasInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusComprasUncheckedCreateWithoutSolicitacoesDeComprasInput = {
    id?: string
    name: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type statusComprasCreateOrConnectWithoutSolicitacoesDeComprasInput = {
    where: statusComprasWhereUniqueInput
    create: XOR<statusComprasCreateWithoutSolicitacoesDeComprasInput, statusComprasUncheckedCreateWithoutSolicitacoesDeComprasInput>
  }

  export type statusComprasUpsertWithoutSolicitacoesDeComprasInput = {
    update: XOR<statusComprasUpdateWithoutSolicitacoesDeComprasInput, statusComprasUncheckedUpdateWithoutSolicitacoesDeComprasInput>
    create: XOR<statusComprasCreateWithoutSolicitacoesDeComprasInput, statusComprasUncheckedCreateWithoutSolicitacoesDeComprasInput>
    where?: statusComprasWhereInput
  }

  export type statusComprasUpdateToOneWithWhereWithoutSolicitacoesDeComprasInput = {
    where?: statusComprasWhereInput
    data: XOR<statusComprasUpdateWithoutSolicitacoesDeComprasInput, statusComprasUncheckedUpdateWithoutSolicitacoesDeComprasInput>
  }

  export type statusComprasUpdateWithoutSolicitacoesDeComprasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusComprasUncheckedUpdateWithoutSolicitacoesDeComprasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type solicitacaoDeComprasCreateWithoutStatusComprasInput = {
    id?: string
    itemSolicitado: string
    solicitante: string
    motivoDaSolicitacao: string
    preco: number
    linkDeCompra: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput = {
    id?: string
    itemSolicitado: string
    solicitante: string
    motivoDaSolicitacao: string
    preco: number
    linkDeCompra: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type solicitacaoDeComprasCreateOrConnectWithoutStatusComprasInput = {
    where: solicitacaoDeComprasWhereUniqueInput
    create: XOR<solicitacaoDeComprasCreateWithoutStatusComprasInput, solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput>
  }

  export type solicitacaoDeComprasCreateManyStatusComprasInputEnvelope = {
    data: solicitacaoDeComprasCreateManyStatusComprasInput | solicitacaoDeComprasCreateManyStatusComprasInput[]
    skipDuplicates?: boolean
  }

  export type solicitacaoDeComprasUpsertWithWhereUniqueWithoutStatusComprasInput = {
    where: solicitacaoDeComprasWhereUniqueInput
    update: XOR<solicitacaoDeComprasUpdateWithoutStatusComprasInput, solicitacaoDeComprasUncheckedUpdateWithoutStatusComprasInput>
    create: XOR<solicitacaoDeComprasCreateWithoutStatusComprasInput, solicitacaoDeComprasUncheckedCreateWithoutStatusComprasInput>
  }

  export type solicitacaoDeComprasUpdateWithWhereUniqueWithoutStatusComprasInput = {
    where: solicitacaoDeComprasWhereUniqueInput
    data: XOR<solicitacaoDeComprasUpdateWithoutStatusComprasInput, solicitacaoDeComprasUncheckedUpdateWithoutStatusComprasInput>
  }

  export type solicitacaoDeComprasUpdateManyWithWhereWithoutStatusComprasInput = {
    where: solicitacaoDeComprasScalarWhereInput
    data: XOR<solicitacaoDeComprasUpdateManyMutationInput, solicitacaoDeComprasUncheckedUpdateManyWithoutStatusComprasInput>
  }

  export type solicitacaoDeComprasScalarWhereInput = {
    AND?: solicitacaoDeComprasScalarWhereInput | solicitacaoDeComprasScalarWhereInput[]
    OR?: solicitacaoDeComprasScalarWhereInput[]
    NOT?: solicitacaoDeComprasScalarWhereInput | solicitacaoDeComprasScalarWhereInput[]
    id?: StringFilter<"solicitacaoDeCompras"> | string
    itemSolicitado?: StringFilter<"solicitacaoDeCompras"> | string
    solicitante?: StringFilter<"solicitacaoDeCompras"> | string
    motivoDaSolicitacao?: StringFilter<"solicitacaoDeCompras"> | string
    preco?: FloatFilter<"solicitacaoDeCompras"> | number
    linkDeCompra?: StringFilter<"solicitacaoDeCompras"> | string
    create_at?: DateTimeNullableFilter<"solicitacaoDeCompras"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"solicitacaoDeCompras"> | Date | string | null
    statusCompras_id?: StringFilter<"solicitacaoDeCompras"> | string
  }

  export type UserCreateManyClienteInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    setor_id?: string | null
    instituicao_id?: string | null
  }

  export type OrdemdeServicoCreateManyClienteInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
  }

  export type controleDeAssistenciaTecnicaCreateManyClienteInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaboratioCreateManyClienteInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio_id: string
    instituicao_id: string
    equipamento_id: string
  }

  export type documentacaoTecnicaCreateManyClienteInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    tecnico_id: string
    instituicao_id?: string | null
  }

  export type UserUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setor?: SetorUpdateOneWithoutUsersNestedInput
    instituicao?: InstituicaoUnidadeUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setor_id?: NullableStringFieldUpdateOperationsInput | string | null
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setor_id?: NullableStringFieldUpdateOperationsInput | string | null
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrdemdeServicoUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tecnico?: TecnicoUpdateOneRequiredWithoutOrdensNestedInput
    statusOrdemdeServico?: statusOrdemdeServicoUpdateOneRequiredWithoutOrdensNestedInput
    tipodesolicitacao?: TipodeSolicitacaoUpdateOneRequiredWithoutOrdensNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutOrdensNestedInput
    formtecnico?: FormTecnicoUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    formtecnico?: FormTecnicoUncheckedUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeAssistenciaTecnicaUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeAssistenciaNestedInput
    statusReparo?: statusReparoUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    statusTeste?: StatusTesteUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeAssistenciaTecnicaNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutControlesdeAssistenciatecnicaNestedInput
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaboratioUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio?: statusControledeLaboratorioUpdateOneRequiredWithoutControlesDeLaboratioNestedInput
    instituicao?: InstituicaoUnidadeUpdateOneWithoutControlesDeLaboratioNestedInput
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeLaboratioNestedInput
  }

  export type controleDeLaboratioUncheckedUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeLaboratioUncheckedUpdateManyWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type documentacaoTecnicaUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tecnico?: TecnicoUpdateOneRequiredWithoutDocumentacoesTecnicasNestedInput
    instituicao?: InstituicaoUnidadeUpdateOneWithoutDocumentacoesTecnicasNestedInput
  }

  export type documentacaoTecnicaUncheckedUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type documentacaoTecnicaUncheckedUpdateManyWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManySetorInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    instituicao_id?: string | null
  }

  export type UserUpdateWithoutSetorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutUsersNestedInput
    instituicao?: InstituicaoUnidadeUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutSetorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutSetorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInstituicaoInput = {
    id?: string
    name: string
    email: string
    password: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    setor_id?: string | null
  }

  export type OrdemdeServicoCreateManyInstituicaoUnidadeInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
  }

  export type controleDeAssistenciaTecnicaCreateManyInstituicaoUnidadeInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    statusTeste_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaudoTecnicoCreateManyInstituicaoUnidadeInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    equipamento_id: string
    tecnico_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaboratioCreateManyInstituicaoInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio_id: string
    cliente_id: string
    equipamento_id: string
  }

  export type controledeMaquinasPendentesOroCreateManyInstituicaoUnidadeInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
    statusMaquinasPendentesOro_id: string
  }

  export type documentacaoTecnicaCreateManyInstituicaoInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
  }

  export type UserUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutUsersNestedInput
    setor?: SetorUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    setor_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    setor_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrdemdeServicoUpdateWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutOrdensDeServicoNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutOrdensNestedInput
    statusOrdemdeServico?: statusOrdemdeServicoUpdateOneRequiredWithoutOrdensNestedInput
    tipodesolicitacao?: TipodeSolicitacaoUpdateOneRequiredWithoutOrdensNestedInput
    formtecnico?: FormTecnicoUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    formtecnico?: FormTecnicoUncheckedUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeAssistenciaTecnicaUpdateWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeAssistenciaNestedInput
    statusReparo?: statusReparoUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    statusTeste?: StatusTesteUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutControlesdeAssistenciatecnicaNestedInput
    cliente?: ClienteUpdateOneWithoutControlesdeAssistenciatecnicaNestedInput
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaudoTecnicoUpdateWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput
  }

  export type controleDeLaudoTecnicoUncheckedUpdateWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaudoTecnicoUncheckedUpdateManyWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaboratioUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio?: statusControledeLaboratorioUpdateOneRequiredWithoutControlesDeLaboratioNestedInput
    cliente?: ClienteUpdateOneWithoutControlesDeLaboratioNestedInput
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeLaboratioNestedInput
  }

  export type controleDeLaboratioUncheckedUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeLaboratioUncheckedUpdateManyWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type controledeMaquinasPendentesOroUpdateWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput
    statusMaquinasPendentesOro?: statusMaquinasPendentesOroUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusMaquinasPendentesOro_id?: StringFieldUpdateOperationsInput | string
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateManyWithoutInstituicaoUnidadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusMaquinasPendentesOro_id?: StringFieldUpdateOperationsInput | string
  }

  export type documentacaoTecnicaUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutDocumentacoesTecnicasNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutDocumentacoesTecnicasNestedInput
  }

  export type documentacaoTecnicaUncheckedUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
  }

  export type documentacaoTecnicaUncheckedUpdateManyWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
  }

  export type OrdemdeServicoCreateManyStatusOrdemdeServicoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
  }

  export type FormTecnicoCreateManyStatusOrdemdeServicoInput = {
    id?: string
    name: string
    diagnostico: string
    solucao: string
    assinatura: string
    status_id: string
    ordemDeServico_id: string
    created_at?: Date | string | null
    update_at?: Date | string | null
  }

  export type OrdemdeServicoUpdateWithoutStatusOrdemdeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutOrdensDeServicoNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutOrdensNestedInput
    tipodesolicitacao?: TipodeSolicitacaoUpdateOneRequiredWithoutOrdensNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutOrdensNestedInput
    formtecnico?: FormTecnicoUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateWithoutStatusOrdemdeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    formtecnico?: FormTecnicoUncheckedUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutStatusOrdemdeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
  }

  export type FormTecnicoUpdateWithoutStatusOrdemdeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    diagnostico?: StringFieldUpdateOperationsInput | string
    solucao?: StringFieldUpdateOperationsInput | string
    assinatura?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordemDeServico?: OrdemdeServicoUpdateOneRequiredWithoutFormtecnicoNestedInput
  }

  export type FormTecnicoUncheckedUpdateWithoutStatusOrdemdeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    diagnostico?: StringFieldUpdateOperationsInput | string
    solucao?: StringFieldUpdateOperationsInput | string
    assinatura?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
    ordemDeServico_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FormTecnicoUncheckedUpdateManyWithoutStatusOrdemdeServicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    diagnostico?: StringFieldUpdateOperationsInput | string
    solucao?: StringFieldUpdateOperationsInput | string
    assinatura?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
    ordemDeServico_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrdemdeServicoCreateManyTipodesolicitacaoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    tecnico_id: string
    statusOrdemdeServico_id: string
    instituicaoUnidade_id: string
  }

  export type OrdemdeServicoUpdateWithoutTipodesolicitacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutOrdensDeServicoNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutOrdensNestedInput
    statusOrdemdeServico?: statusOrdemdeServicoUpdateOneRequiredWithoutOrdensNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutOrdensNestedInput
    formtecnico?: FormTecnicoUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateWithoutTipodesolicitacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    formtecnico?: FormTecnicoUncheckedUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutTipodesolicitacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    tecnico_id?: StringFieldUpdateOperationsInput | string
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
  }

  export type OrdemdeServicoCreateManyTecnicoInput = {
    id?: string
    name: string
    problemaOuSolicitacao: string
    created_at?: Date | string | null
    update_at?: Date | string | null
    cliente_id?: string | null
    statusOrdemdeServico_id: string
    tipodesolicitacao_id: string
    instituicaoUnidade_id: string
  }

  export type controleDeAssistenciaTecnicaCreateManyTecnicoInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaudoTecnicoCreateManyTecnicoInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    instituicaoUnidade_id: string
    equipamento_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type documentacaoTecnicaCreateManyTecnicoInput = {
    id?: string
    titulo: string
    descricao: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    cliente_id?: string | null
    instituicao_id?: string | null
  }

  export type OrdemdeServicoUpdateWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutOrdensDeServicoNestedInput
    statusOrdemdeServico?: statusOrdemdeServicoUpdateOneRequiredWithoutOrdensNestedInput
    tipodesolicitacao?: TipodeSolicitacaoUpdateOneRequiredWithoutOrdensNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutOrdensNestedInput
    formtecnico?: FormTecnicoUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    formtecnico?: FormTecnicoUncheckedUpdateOneWithoutOrdemDeServicoNestedInput
  }

  export type OrdemdeServicoUncheckedUpdateManyWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problemaOuSolicitacao?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    statusOrdemdeServico_id?: StringFieldUpdateOperationsInput | string
    tipodesolicitacao_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeAssistenciaTecnicaUpdateWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeAssistenciaNestedInput
    statusReparo?: statusReparoUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    statusTeste?: StatusTesteUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeAssistenciaTecnicaNestedInput
    cliente?: ClienteUpdateOneWithoutControlesdeAssistenciatecnicaNestedInput
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaudoTecnicoUpdateWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput
  }

  export type controleDeLaudoTecnicoUncheckedUpdateWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaudoTecnicoUncheckedUpdateManyWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type documentacaoTecnicaUpdateWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteUpdateOneWithoutDocumentacoesTecnicasNestedInput
    instituicao?: InstituicaoUnidadeUpdateOneWithoutDocumentacoesTecnicasNestedInput
  }

  export type documentacaoTecnicaUncheckedUpdateWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type documentacaoTecnicaUncheckedUpdateManyWithoutTecnicoInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    instituicao_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type controleDeAssistenciaTecnicaCreateManyEquipamentoInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    statusReparo_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaudoTecnicoCreateManyEquipamentoInput = {
    id?: string
    descricaodoProblema: string
    mesAno: Date | string
    osLab: string
    instituicaoUnidade_id: string
    tecnico_id: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeLaboratioCreateManyEquipamentoInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    statusControledeLaboratorio_id: string
    instituicao_id: string
    cliente_id: string
  }

  export type controleDeMaquinasPendentesLaboratorioCreateManyEquipamentoInput = {
    id?: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    statusMaquinasPendentesLab_id: string
  }

  export type controledeMaquinasPendentesOroCreateManyEquipamentoInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    instituicaoUnidade_id: string
    statusMaquinasPendentesOro_id: string
  }

  export type controleDeAssistenciaTecnicaUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusReparo?: statusReparoUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    statusTeste?: StatusTesteUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeAssistenciaTecnicaNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutControlesdeAssistenciatecnicaNestedInput
    cliente?: ClienteUpdateOneWithoutControlesdeAssistenciatecnicaNestedInput
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaudoTecnicoUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutControlesdeLaudoTecnicoNestedInput
  }

  export type controleDeLaudoTecnicoUncheckedUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaudoTecnicoUncheckedUpdateManyWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricaodoProblema?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    osLab?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaboratioUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio?: statusControledeLaboratorioUpdateOneRequiredWithoutControlesDeLaboratioNestedInput
    instituicao?: InstituicaoUnidadeUpdateOneWithoutControlesDeLaboratioNestedInput
    cliente?: ClienteUpdateOneWithoutControlesDeLaboratioNestedInput
  }

  export type controleDeLaboratioUncheckedUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeLaboratioUncheckedUpdateManyWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    statusControledeLaboratorio_id?: StringFieldUpdateOperationsInput | string
    instituicao_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusMaquinasPendentesLab?: statusMaquinasPendentesLabUpdateOneRequiredWithoutControlesDeMaquinasPendentesLaboratorioNestedInput
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusMaquinasPendentesLab_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusMaquinasPendentesLab_id?: StringFieldUpdateOperationsInput | string
  }

  export type controledeMaquinasPendentesOroUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput
    statusMaquinasPendentesOro?: statusMaquinasPendentesOroUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    statusMaquinasPendentesOro_id?: StringFieldUpdateOperationsInput | string
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateManyWithoutEquipamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    statusMaquinasPendentesOro_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeAssistenciaTecnicaCreateManyStatusReparoInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusTeste_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaUpdateWithoutStatusReparoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeAssistenciaNestedInput
    statusTeste?: StatusTesteUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeAssistenciaTecnicaNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutControlesdeAssistenciatecnicaNestedInput
    cliente?: ClienteUpdateOneWithoutControlesdeAssistenciatecnicaNestedInput
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateWithoutStatusReparoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutStatusReparoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusTeste_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaCreateManyStatusTesteInput = {
    id?: string
    name: string
    mesAno: Date | string
    idChamado: string
    assistencia: string
    observacoes: string
    osDaAssistencia: string
    dataDeRetirada: Date | string
    equipamento_id: string
    statusReparo_id: string
    instituicaoUnidade_id: string
    tecnico_id: string
    cliente_id?: string | null
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type controleDeAssistenciaTecnicaUpdateWithoutStatusTesteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeAssistenciaNestedInput
    statusReparo?: statusReparoUpdateOneRequiredWithoutControleDeAssistenciaTecnicaNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesdeAssistenciaTecnicaNestedInput
    tecnico?: TecnicoUpdateOneRequiredWithoutControlesdeAssistenciatecnicaNestedInput
    cliente?: ClienteUpdateOneWithoutControlesdeAssistenciatecnicaNestedInput
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateWithoutStatusTesteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeAssistenciaTecnicaUncheckedUpdateManyWithoutStatusTesteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mesAno?: DateTimeFieldUpdateOperationsInput | Date | string
    idChamado?: StringFieldUpdateOperationsInput | string
    assistencia?: StringFieldUpdateOperationsInput | string
    observacoes?: StringFieldUpdateOperationsInput | string
    osDaAssistencia?: StringFieldUpdateOperationsInput | string
    dataDeRetirada?: DateTimeFieldUpdateOperationsInput | Date | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
    statusReparo_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
    tecnico_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type controleDeLaboratioCreateManyStatusControledeLaboratorioInput = {
    id?: string
    nomedoEquipamento: string
    marca: string
    defeito: string
    osDeAbertura: string
    osDeDevolucao: string
    data_de_Chegada: Date | string
    data_de_Finalizacao: Date | string
    instituicao_id: string
    cliente_id: string
    equipamento_id: string
  }

  export type controleDeLaboratioUpdateWithoutStatusControledeLaboratorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao?: InstituicaoUnidadeUpdateOneWithoutControlesDeLaboratioNestedInput
    cliente?: ClienteUpdateOneWithoutControlesDeLaboratioNestedInput
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeLaboratioNestedInput
  }

  export type controleDeLaboratioUncheckedUpdateWithoutStatusControledeLaboratorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeLaboratioUncheckedUpdateManyWithoutStatusControledeLaboratorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomedoEquipamento?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    defeito?: StringFieldUpdateOperationsInput | string
    osDeAbertura?: StringFieldUpdateOperationsInput | string
    osDeDevolucao?: StringFieldUpdateOperationsInput | string
    data_de_Chegada?: DateTimeFieldUpdateOperationsInput | Date | string
    data_de_Finalizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao_id?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeMaquinasPendentesLaboratorioCreateManyStatusMaquinasPendentesLabInput = {
    id?: string
    numeroDeSerie: string
    ssd: string
    idDaOs: string
    obs: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
  }

  export type controleDeMaquinasPendentesLaboratorioUpdateWithoutStatusMaquinasPendentesLabInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeMaquinasPendentesLaboratorioNestedInput
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedUpdateWithoutStatusMaquinasPendentesLabInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type controleDeMaquinasPendentesLaboratorioUncheckedUpdateManyWithoutStatusMaquinasPendentesLabInput = {
    id?: StringFieldUpdateOperationsInput | string
    numeroDeSerie?: StringFieldUpdateOperationsInput | string
    ssd?: StringFieldUpdateOperationsInput | string
    idDaOs?: StringFieldUpdateOperationsInput | string
    obs?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
  }

  export type controledeMaquinasPendentesOroCreateManyStatusMaquinasPendentesOroInput = {
    id?: string
    datadaInstalacao: Date | string
    osInstalacao: string
    osRetirada: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
    equipamento_id: string
    instituicaoUnidade_id: string
  }

  export type controledeMaquinasPendentesOroUpdateWithoutStatusMaquinasPendentesOroInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento?: EquipamentoUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput
    instituicaoUnidade?: InstituicaoUnidadeUpdateOneRequiredWithoutControlesDeMaquinasPendentesOroNestedInput
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateWithoutStatusMaquinasPendentesOroInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
  }

  export type controledeMaquinasPendentesOroUncheckedUpdateManyWithoutStatusMaquinasPendentesOroInput = {
    id?: StringFieldUpdateOperationsInput | string
    datadaInstalacao?: DateTimeFieldUpdateOperationsInput | Date | string
    osInstalacao?: StringFieldUpdateOperationsInput | string
    osRetirada?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    equipamento_id?: StringFieldUpdateOperationsInput | string
    instituicaoUnidade_id?: StringFieldUpdateOperationsInput | string
  }

  export type solicitacaoDeComprasCreateManyStatusComprasInput = {
    id?: string
    itemSolicitado: string
    solicitante: string
    motivoDaSolicitacao: string
    preco: number
    linkDeCompra: string
    create_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type solicitacaoDeComprasUpdateWithoutStatusComprasInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemSolicitado?: StringFieldUpdateOperationsInput | string
    solicitante?: StringFieldUpdateOperationsInput | string
    motivoDaSolicitacao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    linkDeCompra?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type solicitacaoDeComprasUncheckedUpdateWithoutStatusComprasInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemSolicitado?: StringFieldUpdateOperationsInput | string
    solicitante?: StringFieldUpdateOperationsInput | string
    motivoDaSolicitacao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    linkDeCompra?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type solicitacaoDeComprasUncheckedUpdateManyWithoutStatusComprasInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemSolicitado?: StringFieldUpdateOperationsInput | string
    solicitante?: StringFieldUpdateOperationsInput | string
    motivoDaSolicitacao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    linkDeCompra?: StringFieldUpdateOperationsInput | string
    create_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}